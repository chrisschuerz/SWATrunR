[{"path":"https://chrisschuerz.github.io/SWATrunR/articles/par_sampl_calib.html","id":"aim-of-this-article","dir":"Articles","previous_headings":"","what":"Aim of this article","title":"Parameter sampling and model calibration","text":"article give general idea can integrate SWATplusR typical model calibration routines. many ways approach model calibration, one frequent ways sample set parameter combinations, run model, evaluate simulation outputs either perform simulations consider model acceptably calibrated (well usually happen one round simulations). Therefore article address following tasks: Sampling SWAT parameter combinations using two approaches, random Latin Hypercube Sampling (LHS) Performing model simulations SWATplusR (using parallel processing speed things ) Evaluating model simulations performance metrics often used hydrology","code":""},{"path":"https://chrisschuerz.github.io/SWATrunR/articles/par_sampl_calib.html","id":"r-packages","dir":"Articles","previous_headings":"","what":"R packages","title":"Parameter sampling and model calibration","text":"examples use different functions several R packages. recommend install load already required packages point. explain packages , refer functionality examples .","code":"# If any of the packages is not installed already run the respective lines here. # General data science packages install.packages('dplyr') install.packages('tibble') install.packages('purrr') install.packages('lubridate')  # Latin Hypercube sampling install.packages('lhs')  # Hydrological model performance metrics install.packages('hydroGOF') library(SWATplusR)  # General data science packages library(dplyr) library(tibble) library(tidyr) library(purrr) library(lubridate) library(ggplot2)  # Latin Hypercube sampling library(lhs)  # Hydrological model performance metrics library(hydroGOF)"},{"path":"https://chrisschuerz.github.io/SWATrunR/articles/par_sampl_calib.html","id":"parameter-sampling","dir":"Articles","previous_headings":"","what":"Parameter sampling","title":"Parameter sampling and model calibration","text":"Two frequently used sampling strategies parameter sampling simple generic random sampling Latin Hypercube Sampling (LHS). can implement sampling strategies quite easily R. draw random uniform samples can use function runif() base R package stats (R Core Team, 2019). Different LHS sampling routines available R package lhs (Carnell, 2019). procedures, certain methods parameter sensitivity analysis require specifically tailored sampling schemes. sampling schemes often provided respective sensitivity analysis related R packages.","code":""},{"path":"https://chrisschuerz.github.io/SWATrunR/articles/par_sampl_calib.html","id":"defining-parameter-boundaries","dir":"Articles","previous_headings":"Parameter sampling","what":"Defining parameter boundaries","title":"Parameter sampling and model calibration","text":"can draw parameter samples define: parameters want include parameter set type change want apply parameter ranges parameter changed. names parameters follow specific syntax controls type parameter change can include conditions parameter change. parameter syntax explained Get started section. familiar parameter name syntax already recommend look first. can define parameter names boundaries parameter changes tibble (Müller Wickham, 2019) use parameter sampling. recommend use tibble rather synonymous data.frame base R data frames may issues complex column names need . tibble parameter boundaries structured illustrated example . define column name assign two values represent lower upper boundaries possible parameter changes. example uses 7 SWAT+ parameters often included model calibration. first line tibble definition can example translated follows: define parameter ‘cn2’ ‘.mgt’ parameter want change initial parameter values adding substracting absolute values (‘abschg’) range -15 10.","code":"par_bound <- tibble('cn2.hru | change = abschg' = c(-15, 10),                     'lat_ttime.hru | change = absval' = c(0.5, 50),                     'lat_len.hru | change = absval' = c(10, 100),                     'k.sol | change = pctchg' = c(-50, 50),                     'awc.sol | change = pctchg' = c(-50, 50),                     'esco.hru | change = absval' = c(0, 1),                     'epco.hru | change = absval' = c(0, 1))"},{"path":"https://chrisschuerz.github.io/SWATrunR/articles/par_sampl_calib.html","id":"random-sampling-with-runif","dir":"Articles","previous_headings":"Parameter sampling","what":"Random sampling with runif()","title":"Parameter sampling and model calibration","text":"basic way draw random parameter samples use base R function runif(). runif() create uniformly distributed vector. draw specific number parameter sets runif() create vector number random values parameter transform parameter ranges. find simple approach create table parameter combinations using map*() function functional programming package purrr (Henry Wickham, 2019). Even fully understand map_df() code can use recipe drawing random uniform samples. approach work practical cases well.","code":"n_sample <- 250  par_runif <- map_df(par_bound, ~ runif(n_sample, .x[1], .x[2]))  par_runif #> # A tibble: 250 × 7 #>    `cn2.hru | change = abschg` lat_tti…¹ lat_l…² k.sol…³ awc.s…⁴ esco.…⁵ epco.…⁶ #>                          <dbl>     <dbl>   <dbl>   <dbl>   <dbl>   <dbl>   <dbl> #>  1                        6.92     29.3     86.7   49.0    -4.76  0.932    0.513 #>  2                      -14.5      22.8     83.9  -39.2     3.80  0.210    0.605 #>  3                        2.91     38.1     19.0    7.93   20.0   0.761    0.351 #>  4                       -4.74     49.6     17.9   26.9    31.3   0.704    0.195 #>  5                       -8.82      5.02    93.9  -45.0   -24.6   0.196    0.719 #>  6                       -5.16     24.5     26.3   39.0   -38.7   0.406    0.665 #>  7                        1.62      7.16    62.0  -35.0    -8.02  0.512    0.206 #>  8                        8.59     42.4     45.5  -48.4    -8.72  0.651    0.887 #>  9                       -2.77     23.0     19.2   16.7   -20.9   0.105    0.691 #> 10                       -9.72     29.2     53.6   42.5    -3.99  0.0445   0.309 #> # … with 240 more rows, and abbreviated variable names #> #   ¹​`lat_ttime.hru | change = absval`, ²​`lat_len.hru | change = absval`, #> #   ³​`k.sol | change = pctchg`, ⁴​`awc.sol | change = pctchg`, #> #   ⁵​`esco.hru | change = absval`, ⁶​`epco.hru | change = absval`"},{"path":"https://chrisschuerz.github.io/SWATrunR/articles/par_sampl_calib.html","id":"lhs-sampling-with-randomlhs","dir":"Articles","previous_headings":"Parameter sampling","what":"LHS sampling with randomLHS()","title":"Parameter sampling and model calibration","text":"similar way random sampling can draw LHS samples using function randomLHS() lhs package. preferred way sample parameter combinations, parameter combinations better distributed parameter space compared random sampling. can use defined parameter boundaries sample LHS parameter set. can consider code recipe perform sampling modeling cases well. put code LHS sampling function, might use function often later .","code":"sample_lhs <- function(par, n) {   n_par <- ncol(par)      randomLHS(n = n, k = n_par) %>% # Perform sampling     as_tibble(., .name_repair = 'minimal') %>% # Convert to a tibble     set_names(names(par)) %>% # Assign the parameter names with purrr     map2_df(., par, ~ (.x * (.y[2] - .y[1]) + .y[1])) # Scale parameter ranges }  par_lhs <- sample_lhs(par_bound, 250)  par_lhs #> # A tibble: 250 × 7 #>    `cn2.hru | change = abschg` lat_tti…¹ lat_l…² k.sol…³ awc.s…⁴ esco.…⁵ epco.…⁶ #>                          <dbl>     <dbl>   <dbl>   <dbl>   <dbl>   <dbl>   <dbl> #>  1                      -13.7      43.4     41.4    36.3    2.13 0.0363    0.870 #>  2                       -7.89     47.2     89.2    21.8   31.8  0.261     0.554 #>  3                        8.02     15.6     72.4   -12.5  -19.1  0.671     0.174 #>  4                       -1.23      1.49    81.7    22.9  -35.7  0.619     0.617 #>  5                        6.55     47.4     58.3   -43.5   48.7  0.180     0.586 #>  6                      -13.6      22.3     43.9   -39.0  -24.1  0.990     0.349 #>  7                       -9.97      2.21    94.1    35.3   22.9  0.0453    0.817 #>  8                       -2.17     42.8     44.8    19.7   15.5  0.00974   0.666 #>  9                        2.92     24.3     88.5   -36.5   40.6  0.207     0.312 #> 10                       -5.88     13.9     37.3    17.8  -29.2  0.890     0.393 #> # … with 240 more rows, and abbreviated variable names #> #   ¹​`lat_ttime.hru | change = absval`, ²​`lat_len.hru | change = absval`, #> #   ³​`k.sol | change = pctchg`, ⁴​`awc.sol | change = pctchg`, #> #   ⁵​`esco.hru | change = absval`, ⁶​`epco.hru | change = absval`"},{"path":"https://chrisschuerz.github.io/SWATrunR/articles/par_sampl_calib.html","id":"a-small-calibration-example","dir":"Articles","previous_headings":"","what":"A small calibration example","title":"Parameter sampling and model calibration","text":"endless ways approach SWAT model calibration. demonstrate small workflow give ideas consider model calibration. example shows bare minimum example calibrating discharge. Real case studies likely require extensive calibration evaluation depending scopes model setup. SWAT model applications variables -stream sediment load, nutrient loads may variables interest. focus small example.","code":""},{"path":"https://chrisschuerz.github.io/SWATrunR/articles/par_sampl_calib.html","id":"definition-for-the-simulation-experiments","dir":"Articles","previous_headings":"A small calibration example","what":"Definition for the simulation experiments","title":"Parameter sampling and model calibration","text":"small calibration example use SWAT+ demo project perform model simulations. can load demo path running load_demo(), use demo path previous examples, demo project already hard drive. Loading existing demo load_demo() path overwrite existing demo, return path demo project can use. catchment properties use later example define already point. perform simulations short time periods years keep computation times low, although much longer observations. small example define calibration period 2006 2009 3 years warm period validation period 2010 2012 3 years warm . perform calibration discharge. can load observed daily discharge data demo catchment load_demo(). already split observation data defined calibration validation periods.","code":"# The path where the SWAT demo project will be written demo_path <- 'Define:/your/path'  # Loading a SWAT+ demo project path_plus <- load_demo(dataset = 'project',                        path = demo_path,                        version = 'plus') #Catchment area cmt_area <- 22028300 #m2 # Average annual precipitation from station data pcp_avann_obs <- 1069.2 #mm # Average annual discharge in mm from station data q_avann_obs <- 223.8 #mm # Average annual ET estimated from pcp and q et_avann_est <- pcp_avann_obs - q_avann_obs # Calibration period cal_start <- 20030101 cal_start_print <- 20060101 cal_end <- 20091231  # Validation period val_start <- 20070101 val_start_print <- 20100101 val_end <- 20121231 qobs <- load_demo(dataset = 'obs')   qobs_cal <- filter(qobs, year(date) %in% 2006:2009) qobs_val <- filter(qobs, year(date) %in% 2010:2012)"},{"path":"https://chrisschuerz.github.io/SWATrunR/articles/par_sampl_calib.html","id":"first-checks","dir":"Articles","previous_headings":"A small calibration example","what":"First checks","title":"Parameter sampling and model calibration","text":"First checks model setup necessarily involve R SWATplusR, value step undeniably large. starting model calibration, run initial model setup (example SWAT+Editor) check aggregated general model results example SWATcheck implemented SWAT+Editor. simple step gives good idea model inputs, mean annual precipitation temperature plausible. potential evapotranspiration plausible? point model already include farm management want implement model simulations. plant biomass crop yields look plausible ? crop yields region (e.g. agricultural statistics) comparable simulated crop yields? Make sure initial checks solve issues already stage model development. model calibration wrong inputs implausible configurations waste time going back step fixing present issues likely inevitable.","code":""},{"path":"https://chrisschuerz.github.io/SWATrunR/articles/par_sampl_calib.html","id":"constraining-et-and-keeping-an-eye-on-crop-yields","dir":"Articles","previous_headings":"A small calibration example","what":"Constraining ET and keeping an eye on crop yields","title":"Parameter sampling and model calibration","text":"first calibration step recommend check fractions water input (.e. precipitation) removed system evapotranspiration (ET) remain catchment system (different fractions runoff). analysis assumes major storage component (e.g. ground water storage) fills simulation time period. Thus analysis always include longer simulation period (~10 years. , even better!). separation precipitation two general fractions mostly controlled SWAT parameters. relevant esco (Soil evaporation compensation factor), epco (Plant uptake compensation factor), awc (Available soil water capacity). include three parameters simulation experiment learn changes parameter values control simulation annual ET (remaining discharge) sums. parameters may included calibration steps, chance constrain parameter ranges already step exclude parameter ranges result implausible model simulations. conceptual idea somehow related soft calibration available SWAT+, overall approach different. first round simulations use entire ranges (0 1) esco epco vary values reassigning new parameter values ('change = absval'). awc already initial values derived soil input data. Thus, rewriting parameter values recommended. case spatially distributed parameter values perform relative changes parameter values add absolute values. case change initial values awc +/- 25%. analyze three parameters . necessary draw large parameter sets testing 40 100 parameter combinations may enough analyze patterns ET. simulation experiment extract two outputs analyze get better picture ET crop yields. Analyzing crop yields larger model setups can challenging, particularly crop rotations implemented management schedules (case demo model setup). crop rotations crop yields must analyzed great care order mix yields different crops. case recommend analyze yields individual HRUs years aggregate data different HRUs know crop planted harvested year. simple example show approaches. Yet, aggregation work larger setup. define basin average ET (et) yields crops HRUs 2, 3, 4 (yld_ag1) crop rotation management lrew_ag1 assigned model setup step model output variables. small setup three HRUs together HRUs lrew_ag1 model setup. return simulation outputs annual values time period 2006 2012.","code":"par_bound <- tibble('esco.hru | change = absval' = c(0, 1),                     'epco.hru | change = absval' = c(0, 1),                     'awc.sol | change = relchg' = c(-0.25, 0.25)) par_et_yld <- sample_lhs(par_bound, 40)  par_et_yld #> # A tibble: 40 × 3 #>    `esco.hru | change = absval` `epco.hru | change = absval` awc.sol | change …¹ #>                           <dbl>                        <dbl>               <dbl> #>  1                       0.376                        0.0947              0.234  #>  2                       0.582                        0.660              -0.0952 #>  3                       0.270                        0.996              -0.0403 #>  4                       0.679                        0.876              -0.0593 #>  5                       0.0775                       0.905              -0.0119 #>  6                       0.780                        0.607              -0.113  #>  7                       0.195                        0.297              -0.0723 #>  8                       0.0425                       0.130               0.0250 #>  9                       0.918                        0.804              -0.242  #> 10                       0.574                        0.176               0.0544 #> # … with 30 more rows, and abbreviated variable name #> #   ¹​`awc.sol | change = relchg` et_yld <- run_swatplus(project_path = path_plus,                        output = list(et      = define_output(file = 'basin_wb',                                                               variable = 'et',                                                               unit = 1),                                      yld_ag1 = define_output(file = 'hru_pw',                                                              variable = 'yield',                                                              unit = 2:4)),                        parameter = par_et_yld,                        start_date = cal_start,                        end_date = cal_end,                        start_date_print = cal_start_print,                        output_interval = 'y',                        n_thread = 4)  #> Building 4 threads in 'Define:/your/path/swatplus_rev60_demo/.model_run':  #>  Completed 4 threads in 0S                                                   #> Performing 40 simulations on 4 cores:  #>  Completed 40 simulations in 1M 2S"},{"path":"https://chrisschuerz.github.io/SWATrunR/articles/par_sampl_calib.html","id":"model-evaluation-with-dotty-plots","dir":"Articles","previous_headings":"A small calibration example > Constraining ET and keeping an eye on crop yields","what":"Model evaluation with dotty plots","title":"Parameter sampling and model calibration","text":"Dotty plots simple effective way evaluate parameter ranges respect scalar simulation output (e.g. average annual sums) performance metric (e.g. NSE, KGE, pbias, etc.). defined function dotty plots. use function model evaluation throughout entire calibration example. formulated general way. Thus, can use future work model evaluation. variable par must data.frame tibble parameter values (case run_swat*() outputs). var must vector scalar output variable want analyze dotty plots. vector must length number lines parameter table.","code":"plot_dotty <- function(par, var, y_label = 'y', n_col = 3, y_lim = NULL) {   dotty_tbl <- par %>%      mutate(var = var) %>%      pivot_longer(., cols = -var, names_to = 'parameter')      gg <- ggplot(data = dotty_tbl) +     geom_point(aes(x = value, y = var)) +     facet_wrap(. ~ parameter, ncol = n_col, scales = \"free_x\") +     labs(x = 'Change of parameter value', y = y_label) +     theme_bw()      if (!is.null(y_lim)) {     gg <- gg + ylim(y_lim)   }      return(gg) }"},{"path":"https://chrisschuerz.github.io/SWATrunR/articles/par_sampl_calib.html","id":"evalualtion-of-average-annual-et","dir":"Articles","previous_headings":"A small calibration example > Constraining ET and keeping an eye on crop yields","what":"Evalualtion of average annual ET","title":"Parameter sampling and model calibration","text":"simulation runs returned annual values. analyze average annual values calculate mean annual values can analyze dotty plot. can now analyze average annual ET values dotty plots. put simulated values reference “observed” values add average annual ET estimated discharge precipitation observations horizontal dashed line. plot_dotty() returns ggplot can simply add ggplot layers geom_hline() plot horizontal line plot.  dotty plot can see larger values awc, epco, esco result average annual ET simulations exceed “observed” value. lower ends simulations result ET values lower “observed” value. Constraining parameters lower upper ends parameter ranges therefore necessary simulations.","code":"et_avann <- et_yld$simulation$et %>%    summarise(across(starts_with('run_'), .fns = mean)) %>%    unlist(.) plot_dotty(par = et_yld$parameter$values,             var = et_avann,             y_label = 'av. annual ET') +   geom_hline(yintercept = et_avann_est, linetype = 'dashed')"},{"path":"https://chrisschuerz.github.io/SWATrunR/articles/par_sampl_calib.html","id":"evalualtion-of-corn-yields","dir":"Articles","previous_headings":"A small calibration example > Constraining ET and keeping an eye on crop yields","what":"Evalualtion of corn yields","title":"Parameter sampling and model calibration","text":"Constraining parameters awc, epco, esco can impact simulation plant growth can reduce crop yields. Plant growth however central part SWAT model can affect many processes (e.g. water balance components nutrient cycles). Therefore, constraining parameter ranges affect plant growth simulated yields. Typically decrease ET can also decrease simulated yields two goals can conflicting calibration step. First look crop yields single HRUs individual years. file ‘management.sch’ can see rotation lrew_ag1 pnut > corn > cots > cots. corn planted harvested years 2004 2008 HRUs (year 2004 warm period printed). analysis dotty plot can extract now example yields year 2008 HRU 3 (.$yld_ag1_3). dotty plot shows significant impact corn crop yields caused epco. plot can conclude epco set lower 0.4 0.5. Smaller also visible esco awc also constrain two parameters lower boundaries.  can perform analysis mean corn yields aggregate corn yields HRUs years corn planted. code one approach aggregate simulated yields. pattern aggregated yields comparable dotty plot draw similar conclusions plot.","code":"yld_corn_hru3 <- et_yld$simulation$yld_ag1_3 %>%    filter(year(date) == 2008) %>%    select(-date) %>%    unlist() plot_dotty(par = et_yld$parameter$values,             var = yld_corn_hru3,             y_label = 'corn yield, hru = 3') yld_corn_ag1 <- et_yld$simulation[paste0('yld_ag1_', 2:4)] %>%    bind_rows(.) %>%    filter(year(date) == 2008) %>%    select(-date) %>%    summarise(., across(.cols = starts_with('run_'), .fns = mean)) %>%    unlist() plot_dotty(par = et_yld$parameter$values,             var = yld_corn_ag1,             y_label = 'av. corn yield')"},{"path":"https://chrisschuerz.github.io/SWATrunR/articles/par_sampl_calib.html","id":"updating-parameter-boundaries-and-validating-et-and-yields","dir":"Articles","previous_headings":"A small calibration example > Constraining ET and keeping an eye on crop yields","what":"Updating parameter boundaries and validating ET and yields","title":"Parameter sampling and model calibration","text":"Based simulations ET corn yields can now try constrain boundaries awc, epco, esco. aim limit ET range far observed value compromising yield much. can see suggestion updated parameter boundaries. validate updated parameter boundaries see meet aims ET yields. small set simulations might enough get picture ET yield. Repeating dotty plot ET updated parameter boundaries shows overestimate ET now 20mm. Reducing parameter values however decrease corn yields much. Thus, compromise accept.  Plotting average corn yields can see yields decreased bit. Yet, simulated values 8.2 tons still within plausible range.","code":"par_bound <- tibble('esco.hru | change = absval' = c(0.15, 0.3),                     'epco.hru | change = absval' = c(0.4, 0.5),                     'awc.sol | change = relchg' = c(-0.1, 0.0)) par_et_yld <- sample_lhs(par_bound, 20) et_yld2 <- run_swatplus(project_path = path_plus,                         output = list(et      = define_output(file = 'basin_wb',                                                                variable = 'et',                                                                unit = 1),                                       yld_ag1 = define_output(file = 'hru_pw',                                                               variable = 'yield',                                                               unit = 2:4)),                         parameter = par_et_yld,                         start_date = cal_start,                         end_date = cal_end,                         start_date_print = cal_start_print,                         output_interval = 'y',                         n_thread = 4)  #> Building 4 threads in 'Define:/your/path/swatplus_rev60_demo/.model_run':  #>  Completed 4 threads in 0S                                                   #> Performing 40 simulations on 4 cores:  #>  Completed 40 simulations in 28S et_avann <- et_yld2$simulation$et %>%    summarise(across(starts_with('run_'), .fns = mean)) %>%    unlist(.) plot_dotty(par = et_yld2$parameter$values,             var = et_avann,             y_label = 'av. annual ET') +   geom_hline(yintercept = et_avann_est, linetype = 'dashed') yld_corn_ag1 <- et_yld2$simulation[paste0('yld_ag1_', 2:4)] %>%    bind_rows(.) %>%    filter(year(date) %in% c(2008, 2012)) %>%    select(-date) %>%    summarise(., across(.cols = starts_with('run_'), .fns = mean)) %>%    unlist()  plot_dotty(par = et_yld2$parameter$values,             var = yld_corn_ag1,             y_label = 'av. corn yield')"},{"path":[]},{"path":"https://chrisschuerz.github.io/SWATrunR/articles/par_sampl_calib.html","id":"parameter-definition-and-simulation-runs","dir":"Articles","previous_headings":"A small calibration example > Calibration of discharge","what":"Parameter definition and simulation runs","title":"Parameter sampling and model calibration","text":"calibration daily discharge perform demo catchment basic one. actual case study strongly recommend perform comprehensive analysis catchment now. example just demonstrate can perform simulations, evaluate simulations model performance metrics select model setups represent discharge well. comprehensive analysis example include analysis several water balance components, separation hydrograph fast runoff, lateral base flow, separation parameters functional groups calibration, conditioning parameters separate zones. example, however, simultaneously change values 10 parameters relevant simulation discharge. parameter set includes parameters ‘esco’, ‘epco’, ‘awc’ constrained already previous step. Additionally include ‘cn2’, ‘cn3_swf’, lat_ttime, latq_co, k, ‘perco’, alpha. Unless experience plausible parameter ranges start wide ranges vary parameter values. may ask parameters intend replace initial parameter valyes new values (absval, e.g. ‘esco’), initial values parameters changed certain fraction (relchg, e.g. ‘awc’) absolute value (abschg, e.g. ‘cn2’, ‘perco’). One reason relchg abschg can parameter spatial distribution (different initial values different HRUs) case ‘cn2’, ‘cn3_swf’, ‘awc’, ‘perco’ model setup. ‘esco’ ‘epco’ global default values good reason assign different values different spatial units . Therefore type change use absval. discharge simulations model calibration sample 500 combinations 10 selected parameters within defined boundaries LHS sampling. small example now focus discharge main catchment outlet. Therefore, variable simulate 500 parameter combinations par_cal daily channel discharge. simulation period defined already beginning article saved dates simulation period variables cal_start, cal_end, cal_start_print.","code":"par_bound <- tibble('esco.hru | change = absval' = c(0.15, 0.3),                     'epco.hru | change = absval' = c(0.4, 0.5),                     'awc.sol | change = relchg' = c(-0.1, 0.0),                     'cn2.hru | change = abschg' = c(-10, 10),                     'cn3_swf.hru | change = abschg' = c(-0.5, 0.5),                     'lat_ttime.hru | change = absval' = c(0.5, 20),                     'latq_co.hru | change = abschg' = c(-0.5, 0.5),                     'k.sol | change = relchg' = c(-0.5, 1),                     'perco.hru | change = abschg' = c(-0.5, 0.5),                     'alpha.aqu | change = absval' = c(0.01, 0.9)) par_cal <- sample_lhs(par_bound, 500) qsim_cal <- run_swatplus(project_path = path_plus,                          output = list(q = define_output(file = 'channel_sd',                                                           variable = 'flo_out',                                                           unit = 1)),                          parameter = par_cal,                          start_date = cal_start,                          end_date = cal_end,                          start_date_print = cal_start_print,                          n_thread = 4)  #> Building 4 threads in 'Define:/your/path/swatplus_rev60_demo/.model_run':  #>  Completed 4 threads in 0S                                                   #> Performing 500 simulations on 4 cores:  #>  Completed 500 simulations in 12M 40S"},{"path":"https://chrisschuerz.github.io/SWATrunR/articles/par_sampl_calib.html","id":"evaluation-of-model-runs","dir":"Articles","previous_headings":"A small calibration example > Calibration of discharge","what":"Evaluation of model runs","title":"Parameter sampling and model calibration","text":"use many different approaches performance criteria assess performed model simulations actual case study strongly recommend . simple example use two performance metrics apply daily discharge simulations compare simulations discharge observations main outlet. use Kling-Gupta-Efficiency (KGE, Gupta et al. (2009)) percent bias (pbias, Gupta et al. (1999)) evaluate model simulations identify acceptable parameter combinations. code can used many situations want evaluate multiple model simulations run_swat*() simultaions performance metric returns single value. can use recipe future analysis. use map_dbl() apply function KGE() simulated time series discharge calculate KGE values parameter combinations. plot_dotty() generate dotty plots analyze parameter ranges parameters.  can see KGE values simulations already range 0 0.8. means based KGE can already find model simulations perform well simulating observed discharge. tested parameters also show clear patterns. significant patterns can found perco. perco shows steep increase KGE increase perco values increments 0.05 0.50. Decreasing cn2 cn3_swf also can slightly improve model performance closely look outer boundary parameter response surface two parameters. alpha improves model performance range 0.2 0.5. can analysis pbias plot dotty plots parameters. Overall can see now majority model simulations result negative pbias simulations reach values close 0. likely due limitations constraining ET without reducing crop yields much. perco shows similar pattern improving pbias increasing initial values perco. Also reduction cn3_swf improvement pbias line results KGE. increase cn2 however now result decrease pbias conflict results KGE. Thus, improvement KGE achieved cost pbias.","code":"kge_cal <- qsim_cal$simulation$q %>%    filter(date %in% qobs_cal$date) %>%    select(-date) %>%    map_dbl(., ~ KGE(.x, qobs_cal$discharge)) plot_dotty(par = qsim_cal$parameter$values,             y_label = 'KGE', var = kge_cal, n_col = 5) pbias_cal <- qsim_cal$simulation$q %>%    filter(date %in% qobs_cal$date) %>%    select(-date) %>%    map_dbl(., ~ pbias(.x, qobs_cal$discharge))  plot_dotty(par = qsim_cal$parameter$values,             y_label = 'KGE', var = pbias_cal, n_col = 5)"},{"path":"https://chrisschuerz.github.io/SWATrunR/articles/par_sampl_calib.html","id":"selecting-acceptable-parameter-combinations","dir":"Articles","previous_headings":"A small calibration example > Calibration of discharge","what":"Selecting acceptable parameter combinations","title":"Parameter sampling and model calibration","text":"want select parameter sets perform well respect KGE time result absolute pbias values large. SWAT Literature certain recommendations often used define model performance acceptable. strongly recommend refer globally defined thresholds! opinion bad practice, potential reach certain value model performance can also depend factors variability seasonality observed runoff. settings can easy achieve high values certain performance metrics, settings may challenge. Thus, calculated values performance metrics may help selecting simulations performed better others catchment, used justify model setup “good use”. dotty plots can see setting demo catchment easy achieve high KGE values, difficult simulate enough discharge (negative pbias). select simulations want investigate defined thresholds absolute pbias < 15% KGE > 0.75. save evaluation results selected parameter combinations table. can helpful reporting results tabular form also plotting model performance. can challenge identify one best model simulations, particularly use several metrics evaluate simulations additionally can vary different ranges. cases can example just rank model performances calculate example sum ranks. example simply ranked KGE values descending order ranked absolute pbias values. final step ranked sum ranks sort model performances. reporting may interesting table “best” simulation ranges model performances acceptable model ensemble. generate summary. careful “best” performance. works case, already sorted model performances based ranks best one top one table. mentioned bad practice solely rely certain values performance metrics define model well performing. least thing always plot simulated discharge observed one identify strengths weaknesses calibration improved next iteration model calibration. evaluation simulated discharge time series summarize selected simulations calculate upper lower boundaries daily model simulations. Additionally select simulations “best” simulation plotting. plot now shows simulated ranges discharge grey area best run grey line. observed discharge plotted black line. can clearly see although performance metrics already indicate “good” model performance simulations quite significant weaknesses representation runoff processes. variability simulated discharge may already ok, simulated recession runoff peaks rather poor must improved. point strongly advised continue iterations model calibration. require repeat several steps , updating parameter boundaries introducing/removing parameters parameter set. small example however stop calibration point.","code":"run_sel <- which(abs(pbias_cal) < 15 & kge_cal > 0.75) cal_eval_tbl <- tibble(id = run_sel,                        run = names(run_sel),                         kge = kge_cal[run_sel],                        pbias = pbias_cal[run_sel],                        rank = rank(rank(-kge) + rank(abs(pbias)))) %>%    arrange(rank)  cal_eval_tbl #> # A tibble: 18 × 5 #>       id run       kge pbias  rank #>    <int> <chr>   <dbl> <dbl> <dbl> #>  1   148 run_148 0.794  -9.6   1   #>  2     4 run_004 0.768  -9.5   3.5 #>  3   137 run_137 0.766  -8.8   3.5 #>  4   253 run_253 0.767  -9.2   3.5 #>  5   436 run_436 0.763  -3.7   3.5 #>  6   226 run_226 0.784 -12.2   6.5 #>  7   464 run_464 0.780 -11.7   6.5 #>  8   244 run_244 0.774 -12.3   8   #>  9   325 run_325 0.772 -12.4   9   #> 10   157 run_157 0.763 -11.5  10   #> 11   348 run_348 0.751 -10.9  11   #> 12   459 run_459 0.762 -13.1  12   #> 13   113 run_113 0.753 -12.9  13   #> 14   300 run_300 0.752 -13    14   #> 15   269 run_269 0.755 -13.5  15.5 #> 16   415 run_415 0.756 -13.9  15.5 #> 17   406 run_406 0.750 -13.3  17   #> 18    67 run_067 0.751 -14.9  18 cal_summary <- cal_eval_tbl %>%    select(kge, pbias) %>%    pivot_longer(., cols = everything(),names_to = 'metric') %>%    group_by(metric) %>%    summarise(., best = value[1], min = min(value), max = max(value))  cal_summary #> # A tibble: 2 × 4 #>   metric   best     min    max #>   <chr>   <dbl>   <dbl>  <dbl> #> 1 kge     0.794   0.750  0.794 #> 2 pbias  -9.6   -14.9   -3.7 qcal_sel <- qsim_cal$simulation$q %>%    select(date, all_of(cal_eval_tbl$run)) %>%    select(-date) %>%   mutate(best = .[[1]],          qmax = pmap_dbl(., max),          qmin = pmap_dbl(., min)) %>%    select(best, qmin,qmax) %>%    mutate(date = qsim_cal$simulation$q$date) ggplot(qcal_sel) +   geom_ribbon(aes(x = date, ymin = qmin, ymax = qmax), fill = 'grey30', alpha = 0.3) +   geom_line(aes(x = date, y = qmin), col = 'grey30') +   geom_line(aes(x = date, y = qmax), col = 'grey30') +   geom_line(aes(x = date, y = best), col = 'tomato3') +   geom_line(data = qobs_cal, aes(x = date, y = discharge), col = 'black') +   labs(y = expression (Discharge~(m^3~s^{-1})), x = 'Date (year)') +   theme_bw()"},{"path":"https://chrisschuerz.github.io/SWATrunR/articles/par_sampl_calib.html","id":"validation-of-selected-parameter-combinations","dir":"Articles","previous_headings":"A small calibration example","what":"Validation of selected parameter combinations","title":"Parameter sampling and model calibration","text":"common procedure hydrological modelling assess model performance model setups performed well calibration period observation data used model calibration. small example calibrated model setup time period 2006 2009 use selected model validate model performance time period 2010 t0 2012. simulations discharge validation period extract parameter sets identified perform well model calibration write table can use new SWAT simulations. aware parameter table .$parameter$values uses short names parameters. parameter definition SWAT simulations need long names also define e.g. type change. can set names extracting parameters’ full names .$parameter$definition$full_name. run simulations selected parameter combinations validation period already defined beginning small calibration example. use KGE pbias assess model performance validation period. calculation can use recipe just replace simulation outputs. final comparison generate table calibration validation results. table validation results include column simulation period indicating results validation period values KGE pbias. rearrange table calibration period cal_eval_tbl organized way validation results bind tablse together. can now example use data plot comparison model performance calibration validation periods. plot simple boxplot together individual data points used parameter combinations. can see plot model performance validation period quite comparable one calibration period. Thus, can assume overfit model calibration data model also capable simulating time periods used model calibration.  Finally also look daily discharge simulations validation period compared observation data. aggregation simulated time series can use code already used simulations calibration period. selection best run best = .[[1]] works case arranged parameter combinations way first parameter set one resulted best simulation calibration period. also use code plotting validation time series. replace calibration data sets ones validation period.","code":"par_val <- qsim_cal$parameter$values[cal_eval_tbl$id,] %>%    set_names(qsim_cal$parameter$definition$full_name) qsim_val <- run_swatplus(project_path = path_plus,                          output = list(q = define_output(file = 'channel_sd',                                                           variable = 'flo_out',                                                           unit = 1)),                          parameter = par_val,                          start_date = val_start,                          end_date = val_end,                          start_date_print = val_start_print,                          n_thread = 4)  #> Building 4 threads in 'Define:/your/path/swatplus_rev60_demo/.model_run':  #>  Completed 4 threads in 0S                                                   #> Performing 18 simulations on 4 cores:  #>  Completed 18 simulations in 23S kge_val <- qsim_val$simulation$q %>%    filter(date %in% qobs_val$date) %>%    select(-date) %>%    map_dbl(., ~ KGE(.x, qobs_val$discharge))  pbias_val <- qsim_val$simulation$q %>%    filter(date %in% qobs_val$date) %>%    select(-date) %>%    map_dbl(., ~ pbias(.x, qobs_val$discharge)) val_eval_tbl <- tibble(period = 'validation',                        kge = kge_val,                        pbias = pbias_val)  eval_tbl <- cal_eval_tbl %>%    select(kge, pbias) %>%    mutate(period = 'calibration', .before = 1) %>%    bind_rows(., val_eval_tbl) %>%    pivot_longer(., cols = - period) ggplot(eval_tbl) +   geom_boxplot(aes(x = period, y = value)) +   geom_jitter(aes(x = period, y = value), ) +   labs(x = 'Simulation period', y = 'Performance metric value') +   facet_wrap(.~name, scales = \"free_y\") +    theme_bw() qval_sel <- qsim_val$simulation$q %>%    select(-date) %>%   mutate(best = .[[1]],          qmax = pmap_dbl(., max),          qmin = pmap_dbl(., min)) %>%    select(best, qmin,qmax) %>%    mutate(date = qsim_val$simulation$q$date) ggplot(qval_sel) +   geom_ribbon(aes(x = date, ymin = qmin, ymax = qmax), fill = 'grey30', alpha = 0.3) +   geom_line(aes(x = date, y = qmin), col = 'grey30') +   geom_line(aes(x = date, y = qmax), col = 'grey30') +   geom_line(aes(x = date, y = best), col = 'tomato3') +   geom_line(data = qobs_val, aes(x = date, y = discharge), col = 'black') +   labs(y = expression (Discharge~(m^3~s^{-1})), x = 'Date (year)') +   theme_bw()"},{"path":[]},{"path":"https://chrisschuerz.github.io/SWATrunR/articles/par_sensitivity.html","id":"aim-of-this-article","dir":"Articles","previous_headings":"","what":"Aim of this article","title":"Parameter sensitivity analysis","text":"article provide approaches can perform parameter sensitivity analysis SWATplusR standard R packages sensitivity analysis. Although parameter sensitivity analysis wide field many different methods available focus standard (still) state---art methods Global Sensitivity Analysis (GSA). article cover following topics: Introduction two R packages sensitivity analysis; sensitivity (Iooss et al., 2018) sensobol (Puy et al., 2022) Parameter screening Morris’ method (Morris, 1991) GSA VARS (Razavi Gupta, 2016a, 2016b) method GSA Sobol’ method (Sobol, 1993), calculation confidence intervals sensitivity estimates temporal sensitivity analysis Sobol’ indices","code":""},{"path":"https://chrisschuerz.github.io/SWATrunR/articles/par_sensitivity.html","id":"r-packages-for-sensitivity-analysis","dir":"Articles","previous_headings":"","what":"R packages for sensitivity analysis","title":"Parameter sensitivity analysis","text":"Several R packages available provide widely used methods (global) sensitivity analysis. sensitivity (Iooss et al., 2018) example comprehensive collection methods, including Morris’s “OAT” elementary effects screening method (Morris, 1991), different variance-based methods estimate example Sobol’ first order, second order total indices (Sobol, 1993), extended-FAST sensitivity indices (. Saltelli, 1999), derivative based methods Distributed Evaluation Local Sensitivity Analysis (DELSA, Rakovec et al. (2014)) , just mention . Another recent R package compute Variance-Based Sensitivity Indices sensobol (Puy et al., 2022). includes methods Sobol’ method VARS (Razavi Gupta, 2016a, 2016b). methods sensitivity analysis require scalar model output assess sensitivity output variable changes model inputs. directly perform sensitivity analysis simulated time series SWAT model output variable analysis can performed example time step (temporal sensitivity analysis), simulated time series aggregated single value used analysis. One way compute average annual values. Another option use performance measures calculate e.g. goodness--fit value comparison observation data used sensitivity analysis. latter approach common approach found literature. hydroGOF package (Mauricio Zambrano-Bigiarini, 2017) example provides comprehensive collection performance measures used hydrological model performance assessment (can also use sensitivity analysis). personally prefer perform sensitivity analyses directly simulation outputs, first require observation data second analysis shows direct effect simulated output changes e.g. perturbed model parameters require performance metric may emphasis specific parts time series (e.g. NSE stronger weight peaks). learn can use R packages sensitivity analysis together SWATplusR share examples different approaches sensitivity analysis section. beginning introduce two packages sensivitity sensobol show can implemented general way. introduction go simple parameter screening using Morris’ method. learn implement VARS Sobol’ method global sensitivity analysis can considered depth analysis, come however higher computational costs. last example show can quickly transform analysis Sobol’ method temporal sensitivity analysis. target variables (model outputs) use analyses switch aggregated long term average values calculated Nash Sutcliffe Efficiency (NSE, Nash Sutcliffe (1970)) values scalar variables demonstrate different possible approaches can implement analyses.","code":""},{"path":"https://chrisschuerz.github.io/SWATrunR/articles/par_sensitivity.html","id":"package-installation","dir":"Articles","previous_headings":"R packages for sensitivity analysis","what":"Package installation","title":"Parameter sensitivity analysis","text":"installed required R package, follow instructions respective R package. required R packages available CRAN can installed following commands:","code":"# If any of the packages is not installed already run the respective lines here. # General data science packages, plotting etc. install.packages('dplyr') install.packages('tidyr') install.packages('purrr') install.packages('lubridate') install.packages('forcats') install.packages('stringr') install.packages('ggplot2') install.packages(\"patchwork\")  # Packages for sensitivity analysis install.packages('sensitivity') install.packages('sensobol')  # Hydrological model performance metrics install.packages('hydroGOF')"},{"path":"https://chrisschuerz.github.io/SWATrunR/articles/par_sensitivity.html","id":"loading-r-packages","dir":"Articles","previous_headings":"R packages for sensitivity analysis","what":"Loading R packages","title":"Parameter sensitivity analysis","text":"","code":"# General data science packages, plotting etc. library(dplyr) library(tidyr) library(purrr) library(lubridate) library(forcats) library(stringr) library(ggplot2) library(patchwork)  # Packages for sensitivity analysis library(SWATplusR) library(sensitivity) library(sensobol)  # Hydrological model performance metrics library(hydroGOF)"},{"path":"https://chrisschuerz.github.io/SWATrunR/articles/par_sensitivity.html","id":"using-sensitivity-with-swatplusr","dir":"Articles","previous_headings":"R packages for sensitivity analysis","what":"Using sensitivity with SWATplusR","title":"Parameter sensitivity analysis","text":"concept sensitivity keep model parameters, analyzed model, sensitivity analysis results together one object R. define sensitivity analysis, pass model parameters model together one function call. however optimal way use sensitivity SWATplusR. intuitive workflow SWATplusR define model parameter sets, perform simulations (maybe parallel processing), return model results, analyze simulations calculated performance metrics sensitivity analysis method. sensitivity offers way decouple model simulations sensitivity analysis function tell(). can first define sensitivity analysis experiment without passing model, run simulations parameter set defined experiment calculate sensitivity indices afterwards tell(). simple example , taken tell() help page shows decoupling works general way. example sensitivity analysis designed using eFAST method. Three parameters (factors) sample size n = 1000 defined. important step model = NULL, means model passed sensitivity analysis setup initially. separate step parameter set generated (stored x$X) used perform model simulations. simple example ishigami.fun() example function sensitivity package used run simulations. SWAT model, simulations using e.g. run_swatplus now performed instead. tell() brings designed sensitivity analysis x together model simulations. sensitivity indices calculated also stored object x. print() can print results sensitivity analysis. plot() can visualize results sensitivity analysis.","code":"x <- fast99(model = NULL, factors = c('par1', 'par2', 'par3'), n = 1000,             q = \"qunif\", q.arg = list(min = -pi, max = pi)) y <- ishigami.fun(x$X) tell(x, y) print(x) #>  #> Call: #> fast99(model = NULL, factors = c(\"par1\", \"par2\", \"par3\"), n = 1000,     q = \"qunif\", q.arg = list(min = -pi, max = pi)) #>  #> Model runs: 3000  #>  #> Estimations of the indices: #>       first order total order #> par1 3.076874e-01   0.5506015 #> par2 4.419659e-01   0.4697538 #> par3 3.429110e-29   0.2391275 plot(x)"},{"path":"https://chrisschuerz.github.io/SWATrunR/articles/par_sensitivity.html","id":"using-sensobol-with-swatplusr","dir":"Articles","previous_headings":"R packages for sensitivity analysis","what":"Using sensobol with SWATplusR","title":"Parameter sensitivity analysis","text":"sensobol uses concept better fits workflow SWATplusR. Parameter sampling, running simulations sensitivity analysis default decoupled. short example shows analysis Ishigami function time using Sobol’ method sensobol. can see sampling, simulation analysis 3 separate function calls. can use print() print analysis results. can also use plot() plot analysis results.","code":"# Define the parameter names params <- paste(\"par\", 1:3, sep = \"\") # Create sample matrix to compute first and total-order indices mat <- sobol_matrices(N = 500, params = params) # Compute the model output (using the Ishigami test function) Y <- ishigami_Fun(mat) # Compute and the Sobol' indices ind <- sobol_indices(Y = Y, N = 500, params = params) print(ind) #>  #> First-order estimator: saltelli | Total-order estimator: jansen  #>  #> Total number of model runs: 2500  #>  #> Sum of first order indices: 0.4342083  #>         original sensitivity parameters #> 1:  0.4574752335          Si       par1 #> 2:  0.0013345109          Si       par2 #> 3: -0.0246014634          Si       par3 #> 4:  1.0218236406          Ti       par1 #> 5:  0.0009107365          Ti       par2 #> 6:  0.6165576890          Ti       par3 plot(ind)"},{"path":"https://chrisschuerz.github.io/SWATrunR/articles/par_sensitivity.html","id":"parameter-screening-with-the-morris-method","dir":"Articles","previous_headings":"","what":"Parameter screening with the Morris’ method","title":"Parameter sensitivity analysis","text":"Morris’ method useful parameter screening identify important parameters low cost (number simulations). Morris’ method however analyze elementary effects model parameters (thus also called Morris’ elementary effects screening). uses one-step---time method (OAT) sampling design one parameter changed step. number simulations required elementary effects screening $r (p + 1) $, \\(p\\) number parameters \\(r\\) number repetitions OAT sampling. example perform parameter screening simulated average annual sums ET average annual mean discharge. Morris’ method implemented sensitivity. example also following examples use small set parameter frequently used model calibration.","code":""},{"path":"https://chrisschuerz.github.io/SWATrunR/articles/par_sensitivity.html","id":"used-model-parameters","dir":"Articles","previous_headings":"Parameter screening with the Morris’ method","what":"Used Model parameters","title":"Parameter sensitivity analysis","text":"defined table 7 model parameters, type change want apply initial parameter values, upper lower boundaries changes apply parameter values. syntax definition SWAT model parameters SWATplusR important explained great detail Get started section. familiar concept, recommend go first, continue sensitivity analysis examples.","code":"par_bound <- tibble('esco.hru | change = absval' = c(0, 1),                     'epco.hru | change = absval' = c(0, 1),                     'cn2.hru | change = abschg' = c(-15, 10),                     'cn3_swf.hru | change = abschg' = c(-0.5, 0.5),                     'surlag.bsn | change = absval' = c(0.05, 3),                     'awc.sol | change = relchg' = c(-0.25, 0.25),                     'perco.hru | change = abschg' = c(-0.5, 0.5))  # Extract parameter names from the names in par_bound par_names <- str_remove(names(par_bound), '\\\\:\\\\:.*|\\\\..*')"},{"path":"https://chrisschuerz.github.io/SWATrunR/articles/par_sensitivity.html","id":"defining-the-morris-screening-experiment","dir":"Articles","previous_headings":"Parameter screening with the Morris’ method","what":"Defining the Morris’ screening experiment","title":"Parameter sensitivity analysis","text":"explained define Morris’ screening experiment without passing model (model = NULL) function morris() decouple sensitivity analysis SWAT simulations using function tell() evaluation simulation outputs. morris() provides different sampling designs improvements experiment design initially proposed Morris (1991). Please see R package documentation want implement one . demonstration use default sampling design. experiment design results parameter set 32 parameter combinations. printing parameter set can see things; ) model parameter range parameter 0 1, ii) set levels = 5 interval steps parameter space 0.25 range 0 1 split 5 levels. can see clear pattern parameter jumps single parameters others kept constant. parameter grid.jump = 3 defines sampling jump 3 levels parameter changed.","code":"# Define the Morris experiment design morris_sample <- morris(model = NULL, factors = ncol(par_bound), r = 4,                         design = list(type = 'oat', levels = 5, grid.jump = 3))  # Assign the SWAT model parameter names to parameters in the experiment colnames(morris_sample$X) <- par_names morris_sample$X #>       esco epco  cn2 cn3_swf surlag  awc perco #>  [1,] 0.00 0.75 0.00    0.00   1.00 0.25  0.25 #>  [2,] 0.00 0.75 0.00    0.00   1.00 1.00  0.25 #>  [3,] 0.00 0.00 0.00    0.00   1.00 1.00  0.25 #>  [4,] 0.00 0.00 0.00    0.00   0.25 1.00  0.25 #>  [5,] 0.00 0.00 0.75    0.00   0.25 1.00  0.25 #>  [6,] 0.00 0.00 0.75    0.75   0.25 1.00  0.25 #>  [7,] 0.00 0.00 0.75    0.75   0.25 1.00  1.00 #>  [8,] 0.75 0.00 0.75    0.75   0.25 1.00  1.00 #>  [9,] 0.75 1.00 0.75    1.00   0.25 0.00  0.75 #> [10,] 0.00 1.00 0.75    1.00   0.25 0.00  0.75 #> [11,] 0.00 1.00 0.75    1.00   0.25 0.00  0.00 #> [12,] 0.00 1.00 0.75    1.00   0.25 0.75  0.00 #> [13,] 0.00 1.00 0.75    0.25   0.25 0.75  0.00 #> [14,] 0.00 1.00 0.75    0.25   1.00 0.75  0.00 #> [15,] 0.00 0.25 0.75    0.25   1.00 0.75  0.00 #> [16,] 0.00 0.25 0.00    0.25   1.00 0.75  0.00 #> [17,] 1.00 1.00 0.75    1.00   0.25 0.75  0.00 #> [18,] 1.00 1.00 0.75    1.00   0.25 0.75  0.75 #> [19,] 1.00 1.00 0.75    0.25   0.25 0.75  0.75 #> [20,] 1.00 1.00 0.75    0.25   0.25 0.00  0.75 #> [21,] 1.00 1.00 0.00    0.25   0.25 0.00  0.75 #> [22,] 1.00 0.25 0.00    0.25   0.25 0.00  0.75 #> [23,] 1.00 0.25 0.00    0.25   1.00 0.00  0.75 #> [24,] 0.25 0.25 0.00    0.25   1.00 0.00  0.75 #> [25,] 1.00 1.00 0.00    0.00   0.25 0.25  1.00 #> [26,] 1.00 1.00 0.00    0.00   1.00 0.25  1.00 #> [27,] 1.00 1.00 0.00    0.00   1.00 1.00  1.00 #> [28,] 1.00 1.00 0.00    0.75   1.00 1.00  1.00 #> [29,] 1.00 0.25 0.00    0.75   1.00 1.00  1.00 #> [30,] 0.25 0.25 0.00    0.75   1.00 1.00  1.00 #> [31,] 0.25 0.25 0.00    0.75   1.00 1.00  0.25 #> [32,] 0.25 0.25 0.75    0.75   1.00 1.00  0.25"},{"path":"https://chrisschuerz.github.io/SWATrunR/articles/par_sensitivity.html","id":"swat-model-simulations","dir":"Articles","previous_headings":"Parameter screening with the Morris’ method","what":"SWAT model simulations","title":"Parameter sensitivity analysis","text":"sampled parameter values vary 0 1 transform parameter boundaries defined SWAT model parameter. can use recipe transform parameter ranges 0 1 actual parameter ranges. lines code find many examples task transforming parameter values 0 1 actual SWAT parameter values often necessary. use SWAT+ demo project perform model simulations. can load demo path running load_demo(), use demo path previous examples, demo project already hard drive. Loading existing demoe load_demo() path overwrite existing demo, return path demo project can use. perform daily simulations basin average evapotranspiration (et) discharge (q) channel model setup.","code":"par_morris <- morris_sample$X %>%   as_tibble(., .name_repair = 'minimal') %>% # Convert to a tibble   set_names(names(par_bound)) %>% # Assign the parameter names with purrr   map2_df(., par_bound, ~ (.x * (.y[2] - .y[1]) + .y[1])) # The path where the SWAT demo project will be written demo_path <- 'Define:/your/path'  # Loading a SWAT+ demo project path_plus <- load_demo(dataset = 'project',                        path = demo_path,                        version = 'plus') sim_morris <- run_swatplus(project_path = path_plus,                            output = list(et = define_output(file = 'basin_wb',                                                             variable = 'et',                                                             unit = 1),                                          q  = define_output(file = 'channel_sd',                                                             variable = 'flo_out',                                                             unit = 1)),                            parameter = par_morris,                            start_date = 20030101,                            end_date = 20121231,                            start_date_print = 20060101,                            n_thread = 4)  #> Building 4 threads in 'Define:/your/path/swatplus_rev60_demo/.model_run':  #>  Completed 4 threads in 0S                                                   #> Performing 32 simulations on 4 cores:  #>  Completed 32 simulations in 1M 14S"},{"path":"https://chrisschuerz.github.io/SWATrunR/articles/par_sensitivity.html","id":"output-aggregation-and-sensitivity-analysis","dir":"Articles","previous_headings":"Parameter screening with the Morris’ method","what":"Output aggregation and sensitivity analysis","title":"Parameter sensitivity analysis","text":"perform sensitivity analysis Morris’ method average annual values ET discharge. also returned average annual values already model execution. prefer however write daily values perform aggregation later , gives full control aggregation step. temporal aggregation can use functions know previous examples. calculate average annual ET first calculate annual sums calculate average annual sums. explained introduction sensitivity now “tell” Morris’ sampling design model output. done function tell(). print() returns results sensitivity analysis tabular form. plot() plots resulting sensitivity average annual ET analyzed model parameters. Plotting sensitivity analyses performed sensitivity results different plot types depending used method. Morris’ method statistics \\(\\mu^{*}\\) \\(\\sigma\\) plotted, \\(\\mu^{*}\\) mean sensitivity value \\(\\sigma\\) standard deviation. \\(\\mu^{*}\\) can interpreted direct effect parameter, \\(\\sigma\\) describes interaction effects parameter.  example can see surlag effect ET, example perco strong direct linear effect low interaction parameters. esco epco, two highly relevant parameters, show large \\(\\mu^{*}\\) large \\(\\sigma\\) values. also simulated discharge can perform analysis average annual discharge. case simply calculate mean discharge \\(m^3 s^{-1}\\). “tell” sampling design simulated average annual values plot results sensitivity analysis. simulation mean average annual discharge perco far relevant parameter. makes sense, larger amounts water infiltrate lower average discharge . cn3_swf parameter less important ET now relevant. cn3_swf parameter controls calculation daily curve number values thus affects runoff. contrast perco, cn3_swf shows large interaction component \\(\\sigma\\). , surlag shows relevance discharge, although parameter controls properties surface runoff. analyzed long term mean discharges . surlag impact long term average values seems plausible .","code":"aggregate_annual <- function(tbl, fun) {   tbl %>%     mutate(year = year(date)) %>%     group_by(year) %>%     summarise(across(starts_with('run_'), ~ fun(.x))) } et_annual <- sim_morris$simulation$et %>%   aggregate_annual(., sum)  et_avann <- et_annual %>%   summarise(across(starts_with('run_'), .fns = mean)) %>%   unlist(.) morris_et <- morris_sample tell(morris_et, et_avann) print(morris_et) #>  #> Call: #> morris(model = NULL, factors = ncol(par_bound), r = 4, design = list(type = \"oat\",     levels = 5, grid.jump = 3)) #>  #> Model runs: 32  #>                mu  mu.star    sigma #> esco     77.36638 77.36638 63.31053 #> epco     73.40938 73.40938 74.54560 #> cn2     -30.79586 30.79586 23.24428 #> cn3_swf  35.43714 35.43714 52.23233 #> surlag    0.00000  0.00000  0.00000 #> awc      43.16029 43.16029 14.98067 #> perco   -86.30019 86.30019 38.16950 plot(morris_et, xlim = c(0,100), ylim = c(0,100)) q_avann <- sim_morris$simulation$q %>%   summarise(across(starts_with('run_'), .fns = mean)) %>%   unlist(.) morris_q <- morris_sample tell(morris_q, q_avann) plot(morris_q, xlim = c(0,0.11), ylim = c(0,0.07))"},{"path":"https://chrisschuerz.github.io/SWATrunR/articles/par_sensitivity.html","id":"sensitivity-analysis-with-vars","dir":"Articles","previous_headings":"","what":"Sensitivity analysis with VARS","title":"Parameter sensitivity analysis","text":"VARS state---art method global sensitivity analysis (GSA) implements variograms parameter response surface estimate parameter sensitivities. calculation total order VARS sensitivity indices implemented sensobol package. show two small example implement VARS method average annual SWAT+ simulation outputs also use scalar performance metrics.","code":""},{"path":"https://chrisschuerz.github.io/SWATrunR/articles/par_sensitivity.html","id":"star-sampling","dir":"Articles","previous_headings":"Sensitivity analysis with VARS","what":"STAR sampling","title":"Parameter sensitivity analysis","text":"VARS uses specific sampling design ‘center points’ parameter space defined. center points transects defined step width h sampled along parameter dimension. small VARS experiment define following STAR sample. number star centers set star_centers <- 10 example. practical application number larger recommend increase number e.g. star_centers <- 50. example simply wanted keep computation time acceptable levels. 10 center points, 7 parameters step width h <- 0.1 resulted 640 parameter combinations use SWAT simulations. implementation run_swatplus() transform matrix star_sample tibble proper parameter names parameter value ranges defined par_bound. procedure previous example.","code":"# Number of STAR sample centers star_centers <- 10  # Normalized step width of the transects  h <- 0.1  # Create STAR sample star_sample <- vars_matrices(star.centers = star_centers, params = par_names, h = h) par_star <- star_sample %>%    as_tibble(., .name_repair = 'minimal') %>% # Convert to a tibble   set_names(names(par_bound)) %>% # Assign the parameter names with purrr   map2_df(., par_bound, ~ (.x * (.y[2] - .y[1]) + .y[1]))"},{"path":"https://chrisschuerz.github.io/SWATrunR/articles/par_sensitivity.html","id":"swat-simulations","dir":"Articles","previous_headings":"Sensitivity analysis with VARS","what":"SWAT simulations","title":"Parameter sensitivity analysis","text":"simulate ET discharge already analyzed Morris’ example. keep time periods start date print simulation outputs. Hence input argument change simulation run parameter set want use. define parameter = par_star implement parameter set sampled STAR sampling design.","code":"sim_vars <- run_swatplus(project_path = path_plus,                          output = list(et = define_output(file = 'basin_wb',                                                           variable = 'et',                                                           unit = 1),                                        q  = define_output(file = 'channel_sd',                                                           variable = 'flo_out',                                                           unit = 1)),                          parameter = par_star,                          start_date = 20030101,                          end_date = 20121231,                          start_date_print = 20060101,                          n_thread = 4)  #> Building 4 threads in 'Define:/your/path/swatplus_rev60_demo/.model_run':  #>  Completed 4 threads in 0S                                                   #> Performing 640 simulations on 4 cores:  #>  Completed 640 simulations in 27M 45S"},{"path":"https://chrisschuerz.github.io/SWATrunR/articles/par_sensitivity.html","id":"calculation-of-vars-sensitivity","dir":"Articles","previous_headings":"Sensitivity analysis with VARS","what":"Calculation of VARS sensitivity","title":"Parameter sensitivity analysis","text":"calculation total order sensitivity indices done function vars_to(). provide scalar model outputs (single value per parameter combination) STAR sample including sampling design. ET use average annual ET sums. aggregate daily simulations use calculate parameter sensitivities. Printing sensitivity analysis results VARS gives table total order sensitivity values analyzed parameters. \\(Ti\\) values can vary range 0 1, 0 indicates parameter relevance values closer 1 mean large sensitivities. Morris’ method surlag influence. epco results relevant parameter, followed perco. sensobol provide function plot results VARS analysis. using table vars_et$results ggplot can quickly generate plot, like short example .  SWATdata provides observation data discharge demo catchment outlet. simulated discharge now use calculate NSE values daily simulated observed discharge use scalar performance metrics sensitivity analysis. first load observation data load_demo() trim time period performed simulations . use map_dbl() apply function NSE() simulated time series discharge calculate NSE values parameter combinations STAR parameter set. vars_to() calculate total order sensitivity values. parameter perco strongest impact daily discharge simulations evaluated NSE. parameters cn2 cn3_swf well relevant simulation discharge. Although impact surlag 0 rather low (applies awc).","code":"et_avann <- sim_vars$simulation$et %>%   aggregate_annual(., sum) %>%    summarise(across(starts_with('run_'), .fns = mean)) %>%   unlist(.)  vars_et <- vars_to(Y = et_avann, star.centers = star_centers,                     params = par_names, h = h) vars_et #>  #> Number of star centers: 10 | h: 0.1  #>  #> Total number of model runs: 640  #>            Ti parameters #> 1: 0.23730114       esco #> 2: 0.66438595       epco #> 3: 0.06175698        cn2 #> 4: 0.01860577    cn3_swf #> 5: 0.00000000     surlag #> 6: 0.16586504        awc #> 7: 0.39084430      perco ggplot(vars_et$results) +   geom_col(aes(x = parameters, y = Ti)) +   ylim(c(0,1)) +   theme_bw() obs <- load_demo(dataset = 'obs') %>%    filter(date %in% sim_vars$simulation$q$date) nse_q <- sim_vars$simulation$q %>%    select(-date) %>%    map_dbl(., ~ NSE(.x, obs$discharge)) vars_nse_q <- vars_to(Y = nse_q, star.centers = star_centers,                        params = par_names, h = h) ggplot(vars_nse_q$results) +   geom_col(aes(x = parameters, y = Ti)) +   ylim(c(0,1)) +   theme_bw()"},{"path":"https://chrisschuerz.github.io/SWATrunR/articles/par_sensitivity.html","id":"sensitivity-analysis-with-the-sobol-method","dir":"Articles","previous_headings":"","what":"Sensitivity analysis with the Sobol’ method","title":"Parameter sensitivity analysis","text":"Sobol’ method well established method perform global sensitivity analysis often considered benchmark method e.g. compare new methods . presented R packages sensitivity sensobol offer large number implementations Sobol’ method adjustments different sampling schemes adapted estimators first total order sensitivity indices. example use implementation Sobol’ method sensobol package. Without executing code added setup Sobol’ sensitivity analysis sensitivity package . function calls differ bit. eventually analysis performed.","code":""},{"path":"https://chrisschuerz.github.io/SWATrunR/articles/par_sensitivity.html","id":"parameter-sampling","dir":"Articles","previous_headings":"Sensitivity analysis with the Sobol’ method","what":"Parameter sampling","title":"Parameter sensitivity analysis","text":"sobol_matrices() sample parameter matrices needed compute Sobol’ indices. function requires base sample size defined n <- 100 . see results confidence intervals calculated sensitivity indices wide. Thus, actual application Sobol’ method recommend use base sample sizes larger 500 1000. large samples however computationally expensive therefore use lower sample size. order = 'first' define want calculate first total order sensitivities. case function create matrix \\(n \\cdot (p + 2)\\) parameter combinations, n base sample size p number parameters. case perform simulations 900 parameter combinations. transform parameter values ranges actual SWAT model parameters use model simulations.","code":"n <- 100 sobol_mat <- sobol_matrices(N = n, params = names(par_bound), order = 'first') par_sobol <- sobol_mat %>%   as_tibble(.) %>% # Convert to a tibble   map2_df(., par_bound, ~ (.x * (.y[2] - .y[1]) + .y[1]))"},{"path":"https://chrisschuerz.github.io/SWATrunR/articles/par_sensitivity.html","id":"swat-model-simulations-1","dir":"Articles","previous_headings":"Sensitivity analysis with the Sobol’ method","what":"SWAT model simulations","title":"Parameter sensitivity analysis","text":"previous examples simulate ET discharge. number required simulations large previous examples use shorter simulation period start_date = 20050101 end_date = 20101231 print years starting start_date_print = 20080101. also use new parameter set parameter = par_sobol now simulations.","code":"sim_sobol <- run_swatplus(project_path = path_plus,                           output = list(et = define_output(file = 'basin_wb',                                                            variable = 'et',                                                            unit = 1),                                         q  = define_output(file = 'channel_sd',                                                            variable = 'flo_out',                                                            unit = 1)),                           parameter = par_sobol,                           start_date = 20050101,                           end_date = 20101231,                           start_date_print = 20080101,                           n_thread = 4)  #> Building 4 threads in 'Define:/your/path/swatplus_rev60_demo/.model_run':  #>  Completed 4 threads in 0S                                                   #> Performing 900 simulations on 4 cores:  #>  Completed 900 simulations in 21M 6S  #> Performing 450 simulations on 4 cores:  #> Completed 450 simulations in 12M 51S"},{"path":"https://chrisschuerz.github.io/SWATrunR/articles/par_sensitivity.html","id":"sobol-analysis-for-average-annual-et","dir":"Articles","previous_headings":"Sensitivity analysis with the Sobol’ method","what":"Sobol analysis for average annual ET","title":"Parameter sensitivity analysis","text":"analysis ET use average annual values calculate code previous examples. Sobol’ sensitivity indices calculated function sobol_indices(). function different options calculate first total order sensitivities. selected method Jansen (1999) . select available methods. simple reason selected method others results smaller confidence intervals small selected base sample. just demonstration reasons. get conficence intervals set boot = TRUE provide value bootstrap replicas R. bootstrapping results table now comprehensive also provides e.g. standard error lower upper confidence intervals estimates sensitivity indices. results show first order total order sensitivities together one table. Sobol’ method sensobol provides plot() option. plot() returns ggplot , first total order sensitivity values analyzed parameters. whiskers show confidence intervals sensitivity estimates. results comparable previous sensitivity experiments largest sensitivity values epco perco. used bootstrapping option Sobol’ indices give us idea uncertainties estimates. Due used small base sample size confidence intervals large. can try methods calculation first total order sensitivities see confidence intervals computation can lead even excessive values.","code":"et_avann <- sim_sobol$simulation$et %>%   aggregate_annual(., sum) %>%    summarise(across(starts_with('run_'), .fns = mean)) %>%   unlist(.)  sobol_et <- sobol_indices(Y = et_avann, N = n, params = par_names,                            first = \"jansen\", total = 'jansen',                           boot = TRUE, R = 100) sobol_et #>  #> First-order estimator: jansen | Total-order estimator: jansen  #>  #> Total number of model runs: 900  #>  #> Sum of first order indices: 0.7842864  #>         original          bias   std.error       low.ci    high.ci sensitivity #>  1:  0.072933021 -0.0110289078 0.084874880 -0.082389778 0.25031364          Si #>  2:  0.483465576 -0.0021534952 0.065960955  0.356337975 0.61490017          Si #>  3:  0.021484098 -0.0031559127 0.084708895 -0.141386373 0.19066639          Si #>  4: -0.008710804  0.0006357511 0.081270816 -0.168634427 0.14994132          Si #>  5: -0.035221870 -0.0017282910 0.084528029 -0.199165472 0.13217831          Si #>  6:  0.065330458  0.0031669326 0.089934866 -0.114105572 0.23843262          Si #>  7:  0.185005918 -0.0141125583 0.097839941  0.007355715 0.39088124          Si #>  8:  0.140854763  0.0045212605 0.032219436  0.073184569 0.19948244          Ti #>  9:  0.475671672  0.0170372765 0.061370180  0.338351054 0.57891774          Ti #> 10:  0.030857046 -0.0002044961 0.005935057  0.019429043 0.04269404          Ti #> 11:  0.016990857  0.0001053053 0.005182207  0.006728613 0.02704249          Ti #> 12:  0.000000000  0.0000000000 0.000000000  0.000000000 0.00000000          Ti #> 13:  0.077937102  0.0018423710 0.012304079  0.051979178 0.10021028          Ti #> 14:  0.276161819  0.0024053693 0.038292068  0.198705377 0.34880752          Ti #>     parameters #>  1:       esco #>  2:       epco #>  3:        cn2 #>  4:    cn3_swf #>  5:     surlag #>  6:        awc #>  7:      perco #>  8:       esco #>  9:       epco #> 10:        cn2 #> 11:    cn3_swf #> 12:     surlag #> 13:        awc #> 14:      perco plot(sobol_et)"},{"path":"https://chrisschuerz.github.io/SWATrunR/articles/par_sensitivity.html","id":"using-sensitivity-for-the-sobol-analysis","dir":"Articles","previous_headings":"Sensitivity analysis with the Sobol’ method","what":"Using sensitivity for the Sobol’ analysis","title":"Parameter sensitivity analysis","text":"code performs Sobol’ analysis using sensitivity package instead sensobol. implementation methods sensitivity even comprehensive compared sensobol. Eventually use methods lead comparable results use variants Sobol’ method. code complete workflow show differences application Sobol’ method.","code":"ns <- 100 np <- length(par_names) X1 <- data.frame(matrix(runif(np * ns), nrow = ns)) %>% set_names(par_names) X2 <- data.frame(matrix(runif(np * ns), nrow = ns)) %>% set_names(par_names)  sobol_sample <- sobolSalt(model = NULL, X1, X2, scheme=\"A\", nboot = 100)  par_sobol <- sobol_sample$X %>%   as_tibble(., .name_repair = 'minimal') %>% # Convert to a tibble   set_names(names(par_bound)) %>% # Assign the parameter names with purrr   map2_df(., par_bound, ~ (.x * (.y[2] - .y[1]) + .y[1]))  # Here you would simulate ET and aggregate to average annual values.  tell(sobol_sample, et_avann) row.names(sobol_sample$S) <- par_names row.names(sobol_sample$T) <- par_names print(sobol_sample) ggplot(sobol_sample, choice=1) +    theme(axis.text.x = element_text(hjust = 0.5))"},{"path":"https://chrisschuerz.github.io/SWATrunR/articles/par_sensitivity.html","id":"sobol-analysis-for-nse-values-of-discharge","dir":"Articles","previous_headings":"Sensitivity analysis with the Sobol’ method","what":"Sobol analysis for NSE values of discharge","title":"Parameter sensitivity analysis","text":"contrast example average annual ET values implement NSE values scalar output variables sensitivity analysis. NSE expresses goodness--fit simulated discharge compared observed discharge scalar value \\(-\\inf\\) 1. evaluation simulated discharge time series observed data load observation data demo model setup using load_demo(). trim observed data time period simulations filter(). get vector NSE values simulated discharge time series NSE() hydroGOF package map simulated time series. use sobol_indices() estimate Sobol’ indices parameters calculated NSE values. leave settings ET example unchanged. use plot() ggplot Sobol’ analysis. results comparable ones VARS analysis, largest sensitivity inidices found perco, cn2, cn3_swf. Also example confidence intervals wide practical applicaction might use larger base sample size.","code":"obs <- load_demo(dataset = 'obs') %>%    filter(date %in% sim_sobol$simulation$q$date) nse_q <- sim_sobol$simulation$q %>%    select(-date) %>%    map_dbl(., ~ NSE(.x, obs$discharge)) sobol_nse_q <- sobol_indices(Y = nse_q, N = n, params = par_names,                               first = \"jansen\", total = 'jansen',                              boot = TRUE, R = 100) plot(sobol_nse_q)"},{"path":"https://chrisschuerz.github.io/SWATrunR/articles/par_sensitivity.html","id":"temporal-sensitivity-analysis","dir":"Articles","previous_headings":"Sensitivity analysis with the Sobol’ method","what":"Temporal sensitivity analysis","title":"Parameter sensitivity analysis","text":"steps can transform sensitivity analysis temporal analysis, can use daily simulations sampled Sobol’ parameter set. example gives another good argument prefer simulations daily time steps perform data aggregation simulations. always better keep information reduce . small difference previous sensitivity analyses temporal one simply aggregated simulated time series scalar values, now just analysis simulated values time step already scalar values. really ! achieve calculation practice loop time steps simulations perform sensitivity analysis time step. later analysis put results individual analyses together one table. looping done loop (point assume familiar basic elements programming loops). iterate dates generate empty list s store analysis results time step individual element list. make analysis bit simpler shorter analysis days year 2009. Thus extract simulated discharges year 2009 simulations assign variale q_2009. loop use function sobol_indices() calculation Sobol’ indices. taking \\(^{th}\\) line discharge data columns starting 2 (q_2009[, 2:ncol(q_2009)) perform analysis discharges day \\(\\). unlist() necessary convert values table vector. input arguments sobol_indices() know already previous examples. loop bind results together one table using bind_rows(). want show temporal sensitivity analysis rather comprehensive plot, want show simulated upper lower bounds discharge together first total order Sobol’ estimates parameters including calculated confidence intervals. first step prepare discharge data year 2009 (q_2009) plot simulated ranges. select columns except .$date column calculate minimum maximum values line (time step) using pmap_dbl() function passing functions min() max(). general efficient way calculate rowwise values. ways (can e.g. look rowwise() across*() functionality dplyr. base R way e.g. use apply()) approaches sometimes bit slow. Finally, select computed min max values qmin qmax add date. discharge prepare ggplot show simulated ranges grey areas (geom_ribbon()). boundaries area border lines (geom_line()). give plot final touch adding better y-axis title use black white theme (theme_bw() prefer bit standard theme). also remove text x-axis theme() settings, put discharge sensitivity plot together final step . sensitivity plot similar structure discharge plot. plot calculated confidence intervals areas (geom_ribbon()) border lines (geom_line()). time series sensitivity estimates also plotted lines. define fill colors line colors first total order sensitivities scale_color_manual() scale_fill_manual(). labs() give Axes legend entries better names. control plot properties color fill sensitivity index type give arguments name. facet_grid() split plots different parameters analyzed. use coord_cartesian() limit plot window range -0.1 1.1. Sobol’ estimates plausible range 0 1. estimates confidence intervals cna however also lie outside ranges. make plot hard read show entire calculated ranges. show smaller range plot e.g. confidence bands considering data lies outside range limit plot canvas coord_cartesian() instead using e.g. ylim() lims(). scale_y_continuous() define breaks y-axis. use ‘nicer’ theme place legend bottom plot. use patchwork package ‘patch’ two plots together. plot gives us wonderful insight processes control simulated discharge parameters control processes temporal sequence.","code":"s <- list() q_2009 <- filter(sim_sobol$simulation$q, year(date) == 2009) for (i in 1:nrow(q_2009)) {   s[[i]] <- sobol_indices(Y = unlist(q_2009[i, 2:ncol(q_2009)]),                            N = n, params = par_names,                            first = \"jansen\", total = 'jansen',                           boot = TRUE, R = 100) %>%      .$results %>%      as_tibble(.) %>%      mutate(., date = q_2009$date[i]) }  s <- bind_rows(s) q_bound <- q_2009 %>%   select(-date) %>%   mutate(qmax = pmap_dbl(., max),          qmin = pmap_dbl(., min)) %>%   select(qmin, qmax) %>%   mutate(date = q_2009$date, .before = 1) q_plot <- ggplot(q_bound) +   geom_ribbon(aes(x = date, ymin = qmin, ymax = qmax), fill = 'grey30', alpha = 0.3) +   geom_line(aes(x = date, y = qmin), col = 'grey30') +   geom_line(aes(x = date, y = qmax), col = 'grey30') +   labs(y = expression (Discharge~(m^3~s^{-1}))) +   theme_bw() +   theme(axis.title.x = element_blank(),         axis.text.x = element_blank()) sens_plot <- ggplot(s) +   geom_hline(yintercept = 0, lty = 'dotted') +   geom_ribbon(aes(x = date, ymin = low.ci, ymax = high.ci, fill = sensitivity), alpha = 0.3) +   geom_line(aes(x = date, y = low.ci, col = sensitivity), size = 0.25, alpha = 0.3) +   geom_line(aes(x = date, y = high.ci, col = sensitivity), size = 0.25, alpha = 0.3) +   geom_line(aes(x = date, y = original, col = sensitivity), size = 0.75) +   scale_color_manual(values = c('tomato3', 'steelblue')) +   scale_fill_manual(values = c('tomato3', 'steelblue')) +   labs(x = 'Date', y = 'First and total order sensitivity',        color = 'Sensitivity index', fill = 'Sensitivity index') +   facet_grid(rows = vars(parameters)) +   coord_cartesian(ylim = c(-0.1, 1.1)) +   theme_bw() +   theme(legend.position = 'bottom') #> Warning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0. #> ℹ Please use `linewidth` instead. q_plot / sens_plot + plot_layout(heights = c(0.3, 0.7))"},{"path":[]},{"path":"https://chrisschuerz.github.io/SWATrunR/articles/SWATrunR.html","id":"loading-swatrunr","dir":"Articles","previous_headings":"","what":"Loading SWATrunR","title":"Getting started with SWATrunR","text":"install SWATrunR yet can now running following lines R. start exploring package load SWATrunR.","code":"# If the package remotes is not installed run first: install.packages('remotes')  remotes::install_github('chrisschuerz/SWATrunR') library(SWATrunR)"},{"path":"https://chrisschuerz.github.io/SWATrunR/articles/SWATrunR.html","id":"swat-demo-projects","dir":"Articles","previous_headings":"","what":"SWAT demo projects","title":"Getting started with SWATrunR","text":"SWATdata provides set fast running, lightweight SWAT2012 SWAT+ model setups head watershed Little River Experimental Watershed [LREW; Bosch et al. (2007)]. Additionally, discharge observations outlet demo catchment (gauge J LREW) spatial information SWAT model setups available SWATdata. SWATdata GitHub page gives overview available data sets.","code":""},{"path":"https://chrisschuerz.github.io/SWATrunR/articles/SWATrunR.html","id":"loading-a-swat-project","dir":"Articles","previous_headings":"SWAT demo projects","what":"Loading a SWAT project","title":"Getting started with SWATrunR","text":"Demo data can loaded function load_demo(). input argument dataset can define SWAT project data want load. load SWAT project folder define dataset = 'project'. path defines path local hard drive want store SWAT project folder. Please try avoid blanks path names (e.g. ‘C://path blanks’). can cause issues running model. Try use e.g. ’_’ path names instead. SWAT project available SWAT+ SWAT2012 project specify version SWAT project want load. Use version = 'plus' load SWAT+ project version = '2012' load SWAT2012 version project. SWAT+ constant development new model revisions released time time. try keep SWATdata SWAT+ demo projects date provide least last SWAT+ revisions demo projects. revision number specified recent SWAT+ model loaded. can, however, also load SWAT+ project built specific SWAT+ revision providing example input argument revision = 59.3 load SWAT+ revision 59.3 model setup. Please check SWATdata GitHub page see model setups available. two examples load recent SWAT+ model setup available SWAT2012 setup. case SWAT project load_demo() saves defined SWAT project file path defined path = demo_path returns final demo project path character string R. assigned paths variables path_plus path_2012 use later model runs.","code":"# The path where the SWAT demo project will be written demo_path <- 'Define:/your/path'  # Loading a SWAT+ demo project path_plus <- load_demo(dataset = 'project',                        path = demo_path,                        version = 'plus')  # Loading a SWAT2012 demo project path_2012 <- load_demo(dataset = 'project',                        path = demo_path,                        version = '2012')"},{"path":"https://chrisschuerz.github.io/SWATrunR/articles/SWATrunR.html","id":"observation-data","dir":"Articles","previous_headings":"SWAT demo projects","what":"Observation data","title":"Getting started with SWATrunR","text":"SWATdata also provides daily discharge records outlet demo catchment (Gauge J LREW) time period 1968-01-01 2012-12-31. Observation data useful model evaluation. date used several examples SWAT demo projects. can load observation data using function load_demo(). access observation data set define dataset = 'observation'. input arguments required case observation data demos. loading observation data set load_demo() returns data frame date column column mean daily discharge date. code observation data frame assigned variable q_obs. quick plot observation data q_obs shows daily mean discharge Gauge J years 1968 2012 \\(m^3 s^{-1}\\).","code":"q_obs <- load_demo(dataset = 'observation')  q_obs #> # A tibble: 16,437 × 2 #>    date       discharge #>    <date>         <dbl> #>  1 1968-01-01      0.16 #>  2 1968-01-02      0.57 #>  3 1968-01-03      0.61 #>  4 1968-01-04      0.37 #>  5 1968-01-05      0.25 #>  6 1968-01-06      0.2  #>  7 1968-01-07      0.21 #>  8 1968-01-08      0.22 #>  9 1968-01-09      0.18 #> 10 1968-01-10      0.34 #> # … with 16,427 more rows plot(q_obs, type = 'l')"},{"path":"https://chrisschuerz.github.io/SWATrunR/articles/SWATrunR.html","id":"first-swat-model-runs","dir":"Articles","previous_headings":"","what":"First SWAT model runs","title":"Getting started with SWATrunR","text":"functions run_swatplus() run_swat2012() can perform simulations SWAT+ SWAT2012 project folder located local hard drive. SWAT model simulations write large range output variables simulation run. Usually variables analyzed (e.g. -stream discharge nutrient loads). function define_output() can specify output variables returned R simulation run. Thus, minimum information provide perform model simulation project located input argument project_path simulation outputs returned simulation defined input argument output. output variables always specified function define_output() passed input argument output. example shows minimum example SWAT+ project.","code":""},{"path":"https://chrisschuerz.github.io/SWATrunR/articles/SWATrunR.html","id":"project_path","dir":"Articles","previous_headings":"First SWAT model runs","what":"project_path","title":"Getting started with SWATrunR","text":"project path define path previously loaded demo project project_path = path_plus. want work demo project, already want use SWAT project can define path SWAT ‘TxtInOut’ folder simply run simulations . aware case runtime can much longer large projects, might hinder testing many things first playing around SWATrunR. demo projects designed way simulations take longer seconds, depending machine executed. want use SWAT project please consider things: SWAT project folder must contain exactly one executable file. run_swat*() automatically searches one SWAT executable project folder. one executables available project folder error returned run_swat*() know executable file use. Weather data must provided project run_swat*() checks time periods weather data available. Make clear use right function, ether run_swatplus() run SWAT+ project, run_swat2012() run SWAT2012 project. Please try avoid blanks path names (e.g. ‘C://path blanks’). can cause issues running model. Try use e.g. ’_’ path names instead.","code":""},{"path":"https://chrisschuerz.github.io/SWATrunR/articles/SWATrunR.html","id":"output-and-define_output","dir":"Articles","previous_headings":"First SWAT model runs","what":"output and define_output()","title":"Getting started with SWATrunR","text":"simple example defines one output returned R. definition follows simple syntax. define_output() requires three input arguments. file indicates file SWAT output variable interest written. want return discharge example define file = 'channel_sd'. output files SWAT+ listed ‘print.prt’ SWAT+ project. variable discharge leaves channel called 'flo_out'. define variable = 'flo_out'. third input argument unit. unit defines units, case channels, want extract output variable. SWAT+ demo project one channel therefore define unit = 1. correct channel ID listed ‘chandeg.con’ file SWAT+ project folder. , many channels want compare simulation outputs observation data, make sure select correct id corresponds gauge location. syntax define_output() shown SWAT+ SWAT2012 projects. difference two models output definition correctly address output variables. output files organized differently SWAT+ SWAT2012. SWAT2012 simulations generate output files called ‘output.’ followed suffix defines type output. Subbasin outputs stored ‘.sub’ file, HRU outputs ‘.hru’ file, channel outputs example ’.rch’ file. list comprehensive output files. want return variables SWAT2012 output files please please go ‘output.’ files project folder performing simulation run. minimum example define file = 'rch' access channel output file. variable ‘FLOW_OUT’ defines discharge leaves channel. Therefore, define variable = 'FLOW_OUT'. Caution: aware variable definition case sensitive variables SWAT2012 usually upper case. SWAT2012 demo project total 3 channels. output definition can also define multiple units want extract outputs. example define unit = 1:3 means return ‘FLOW_OUT’ channel units 1,2, 3. caps variable names can annoying frequently call analyses R. can also assign different name ouput variables. difference provide defined outputs list(). output definition list() required case want define several output variables, explained article output definition. small example performs exactly SWAT2012 simulations assigns names q_1, q_2, q_3 output variables. two examples first SWAT simulations use basic output definitions. output definition run_swat*() can complex comprehensive. detailed insight examples provided article focuses simulation output definition. recommend go examples article well, model simulations likely return just discharge catchment outlet (article currently preparation online soon. Please patient meantime).","code":"q_sim_plus <- run_swatplus(project_path = path_plus,                            output = define_output(file = 'channel_sd_day',                                                   variable = 'flo_out',                                                   unit = 1))  #> Building 1 thread in 'Define:/your/path/swatplus_demo/.model_run': #>  Thread 1 of 1   Time elapsed: 0S   Time remaining: 0S     #>  Completed 1 thread in 0S #> Performing 1 simulation on 1 core: #>  Simulation 1 of 1   Time elapsed: 3S   Time remaining: 0S #>  Completed 1 simulation in 3S q_sim_2012 <- run_swat2012(project_path = path_2012,                            output = define_output(file = 'rch',                                                   variable = 'FLOW_OUT',                                                   unit = 1:3))  #> Building 1 thread in 'Define:/your/path/swat2012_demo/.model_run': #>  Thread 1 of 1   Time elapsed: 3S   Time remaining: 0S     #>  Completed 1 thread in 3S #> Performing 1 simulation on 1 core: #>  Simulation 1 of 1   Time elapsed: 4S   Time remaining: 0S #>  Completed 1 simulation in 4S q_sim_2012_2 <- run_swat2012(project_path = path_2012,                              output = list(q = define_output(file = 'rch',                                                              variable = 'FLOW_OUT',                                                              unit = 1:3)))   #> Building 1 thread in 'Define:/your/path/swat2012_demo/.model_run': #>  Thread 1 of 1   Time elapsed: 3S   Time remaining: 0S     #>  Completed 1 thread in 3S #> Performing 1 simulation on 1 core: #>  Simulation 1 of 1   Time elapsed: 4S   Time remaining: 0S #>  Completed 1 simulation in 4S"},{"path":"https://chrisschuerz.github.io/SWATrunR/articles/SWATrunR.html","id":"exploring-the-simulation-outputs","dir":"Articles","previous_headings":"First SWAT model runs","what":"Exploring the simulation outputs","title":"Getting started with SWATrunR","text":"SWATrunR aims return SWAT simulations tidy format. date structure simulation results different single simulation many simulations different parameter sets. Yet, general structure simulation outputs returned R. Simulation results always arranged tibbles (Müller Wickham, 2019). run_swat*() default setting (add_date = TRUE) first column simulation results always date column followed columns output variables. single simulation run performed without parameter changes (parameter = NULL default setting) single tibble simulation outputs run returned. performing simulations one many different parameter sets list tibbles returned explain . look outputs three simulations see general structure. first column date column followed defined output variables. case SWAT+ simulation outputs q_sim_plus single output variable defined called flo_out, name variable defined .txt output file. SWAT2012 model setup defined return discharges three channels model setup. simulation outputs can see now suffix number added variable names. numbers correspond unit IDs output table. Thus, can directly relate outputs R respective units model setup. mentioned , difference q_sim_2012 q_sim_2012_2 naming output variables. defined now called q instead FLOW_OUT. Although name changed suffix values case added automatically define_output(). can see three simulation outputs daily simulation outputs returned output printing cases started date 2003-01-01. simple reason default settings ‘file.cio’ SWAT2012 model setup ‘print.prt’ ‘time.sim’ files SWAT+ model setup defined perform simulations 2000-01-01 2012-12-31 skip 3 years return daily outputs. practice often want change model parameters. run_swatplus() run_swat2012() many input arguments specify model configurations. explain input arguments section input arguments.","code":"q_sim_plus #> $simulation #> $simulation$flo_out #> # A tibble: 3,653 × 2 #>    date        run_1 #>    <date>      <dbl> #>  1 2003-01-01 0.0924 #>  2 2003-01-02 0.0905 #>  3 2003-01-03 0.0912 #>  4 2003-01-04 0.0908 #>  5 2003-01-05 0.0918 #>  6 2003-01-06 0.0914 #>  7 2003-01-07 0.0922 #>  8 2003-01-08 0.0929 #>  9 2003-01-09 0.0921 #> 10 2003-01-10 0.0926 #> # … with 3,643 more rows #>  #>  #> $run_info #> $run_info$simulation_log #> # A tibble: 1 × 5 #>   run_started         run_finished        run_time project_path          run_p…¹ #>   <dttm>              <dttm>              <Period> <chr>                 <chr>   #> 1 2023-07-19 10:56:22 2023-07-19 10:56:28 6S       C:/Users/schuerz/Doc… C:/Use… #> # … with abbreviated variable name ¹​run_path #>  #> $run_info$simulation_period #> # A tibble: 1 × 4 #>   start_date end_date   years_skip start_date_print #>   <date>     <date>          <dbl>            <dbl> #> 1 2000-01-01 2012-12-31          3               NA #>  #> $run_info$output_definition #> # A tibble: 1 × 6 #>   name    file_full          file       time_interval variable unit  #>   <chr>   <chr>              <chr>      <chr>         <chr>    <chr> #> 1 flo_out channel_sd_day.txt channel_sd day           flo_out  1 q_sim_2012 #> $simulation #> $simulation$FLOW_OUT_1 #> # A tibble: 3,653 × 2 #>    date       run_1 #>    <date>     <dbl> #>  1 2003-01-01 0.174 #>  2 2003-01-02 0.154 #>  3 2003-01-03 0.150 #>  4 2003-01-04 0.148 #>  5 2003-01-05 0.146 #>  6 2003-01-06 0.145 #>  7 2003-01-07 0.144 #>  8 2003-01-08 0.144 #>  9 2003-01-09 0.143 #> 10 2003-01-10 0.143 #> # … with 3,643 more rows #>  #> $simulation$FLOW_OUT_2 #> # A tibble: 3,653 × 2 #>    date        run_1 #>    <date>      <dbl> #>  1 2003-01-01 0.103  #>  2 2003-01-02 0.0956 #>  3 2003-01-03 0.0935 #>  4 2003-01-04 0.0921 #>  5 2003-01-05 0.0912 #>  6 2003-01-06 0.0906 #>  7 2003-01-07 0.0901 #>  8 2003-01-08 0.0897 #>  9 2003-01-09 0.0894 #> 10 2003-01-10 0.0890 #> # … with 3,643 more rows #>  #> $simulation$FLOW_OUT_3 #> # A tibble: 3,653 × 2 #>    date       run_1 #>    <date>     <dbl> #>  1 2003-01-01 0.413 #>  2 2003-01-02 0.377 #>  3 2003-01-03 0.369 #>  4 2003-01-04 0.363 #>  5 2003-01-05 0.359 #>  6 2003-01-06 0.357 #>  7 2003-01-07 0.355 #>  8 2003-01-08 0.354 #>  9 2003-01-09 0.353 #> 10 2003-01-10 0.352 #> # … with 3,643 more rows #>  #>  #> $run_info #> $run_info$simulation_log #> # A tibble: 1 × 5 #>   run_started         run_finished        run_time project_path          run_p…¹ #>   <dttm>              <dttm>              <Period> <chr>                 <chr>   #> 1 2023-07-19 10:56:16 2023-07-19 10:56:21 6S       C:/Users/schuerz/Doc… C:/Use… #> # … with abbreviated variable name ¹​run_path #>  #> $run_info$simulation_period #> # A tibble: 1 × 4 #>   start_date end_date   years_skip output_interval #>   <date>     <date>          <dbl> <chr>           #> 1 2000-01-01 2012-12-31          3 d               #>  #> $run_info$output_definition #> # A tibble: 1 × 4 #>   name     file       variable unit  #>   <chr>    <chr>      <chr>    <chr> #> 1 FLOW_OUT output.rch FLOW_OUT 1:3 q_sim_2012_2 #> $simulation #> $simulation$q_1 #> # A tibble: 3,653 × 2 #>    date       run_1 #>    <date>     <dbl> #>  1 2003-01-01 0.174 #>  2 2003-01-02 0.154 #>  3 2003-01-03 0.150 #>  4 2003-01-04 0.148 #>  5 2003-01-05 0.146 #>  6 2003-01-06 0.145 #>  7 2003-01-07 0.144 #>  8 2003-01-08 0.144 #>  9 2003-01-09 0.143 #> 10 2003-01-10 0.143 #> # … with 3,643 more rows #>  #> $simulation$q_2 #> # A tibble: 3,653 × 2 #>    date        run_1 #>    <date>      <dbl> #>  1 2003-01-01 0.103  #>  2 2003-01-02 0.0956 #>  3 2003-01-03 0.0935 #>  4 2003-01-04 0.0921 #>  5 2003-01-05 0.0912 #>  6 2003-01-06 0.0906 #>  7 2003-01-07 0.0901 #>  8 2003-01-08 0.0897 #>  9 2003-01-09 0.0894 #> 10 2003-01-10 0.0890 #> # … with 3,643 more rows #>  #> $simulation$q_3 #> # A tibble: 3,653 × 2 #>    date       run_1 #>    <date>     <dbl> #>  1 2003-01-01 0.413 #>  2 2003-01-02 0.377 #>  3 2003-01-03 0.369 #>  4 2003-01-04 0.363 #>  5 2003-01-05 0.359 #>  6 2003-01-06 0.357 #>  7 2003-01-07 0.355 #>  8 2003-01-08 0.354 #>  9 2003-01-09 0.353 #> 10 2003-01-10 0.352 #> # … with 3,643 more rows #>  #>  #> $run_info #> $run_info$simulation_log #> # A tibble: 1 × 5 #>   run_started         run_finished        run_time project_path          run_p…¹ #>   <dttm>              <dttm>              <Period> <chr>                 <chr>   #> 1 2023-07-19 10:55:58 2023-07-19 10:56:04 6S       C:/Users/schuerz/Doc… C:/Use… #> # … with abbreviated variable name ¹​run_path #>  #> $run_info$simulation_period #> # A tibble: 1 × 4 #>   start_date end_date   years_skip output_interval #>   <date>     <date>          <dbl> <chr>           #> 1 2000-01-01 2012-12-31          3 d               #>  #> $run_info$output_definition #> # A tibble: 1 × 4 #>   name  file       variable unit  #>   <chr> <chr>      <chr>    <chr> #> 1 q     output.rch FLOW_OUT 1:3"},{"path":"https://chrisschuerz.github.io/SWATrunR/articles/SWATrunR.html","id":"plotting-the-simulation-outputs","dir":"Articles","previous_headings":"First SWAT model runs","what":"Plotting the simulation outputs","title":"Getting started with SWATrunR","text":"clear data structure SWAT simulations returned run_swat*() facilitate integration analyses, without requiring additional major data preparation. small example shows can use simulation outputs plot SWAT+ simulations SWAT2012 simulations together observed discharge.","code":"# Loading R package for data analysis (dplyr and tidyr) and plotting (ggplot2) library(dplyr) library(lubridate) library(ggplot2) library(tidyr)  # Prepare the SWAT+ simulation output q_plus <- q_sim_plus$simulation$flo_out %>%   rename(q_plus = run_1) # Rename the output to q_plus  # Prepare the SWAT2012 simulation output q_2012 <- q_sim_2012$simulation$FLOW_OUT_3 %>%   rename(q_2012 = run_1)  # Rename the output to q_plus  # Prepare the table for plotting q_plot <- q_obs %>%    rename(q_obs = discharge) %>% # Rename the discharge columnt to q_obs   filter(year(date) %in% 2003:2012) %>% # Filter for years between 2003 and 2012   left_join(., q_plus, by = 'date') %>% # Join with the q_plus table by date   left_join(., q_2012, by = 'date') %>% # Join with the q_plus table by date   pivot_longer(., cols = -date, names_to = 'variable', values_to = 'discharge') # Make a long table for plotting  ggplot(data = q_plot) +   geom_line(aes(x = date, y = discharge, col = variable, lty = variable)) +   scale_color_manual(values = c('tomato3', 'black', 'steelblue3')) +   scale_linetype_manual(values = c('dotted', 'solid', 'dashed')) +    theme_bw()"},{"path":"https://chrisschuerz.github.io/SWATrunR/articles/SWATrunR.html","id":"changing-parameter-values","dir":"Articles","previous_headings":"","what":"Changing parameter values","title":"Getting started with SWATrunR","text":"Changing parameter values essential option SWAT model simulations. SWAT model calibration (least ) define large sets combinations model parameter changes apply model simulations. Parameter optimization usually starts initial parameter combination iteratively tests new parameter combinations progessively improve model performance. SWATrunR’s run_swat*() functions can easily included modelling workflows R. Parameter value changes SWAT run controlled input argument parameter.","code":""},{"path":"https://chrisschuerz.github.io/SWATrunR/articles/SWATrunR.html","id":"parameter-inputs","dir":"Articles","previous_headings":"Changing parameter values","what":"parameter inputs","title":"Getting started with SWATrunR","text":"input argument parameter available run_swatplus run_swat2012. definition parameter changes works similar way SWAT+ SWAT2012 models. definition parameter value change essentially consists parameter name text string value defines magnitude change. name definition parameter value change follows specific syntax. individual parts text string control different aspects parameter change. overview figure shows individual parts parameter name.  minimum required inputs define parameter change SWAT model parameter, type change applied parameter value change. example cause change Curve Number 2 ‘cn2’ values SWAT+ model setup value 5. syntax outlined figure , model parameter information must provide exact name parameter model together file suffix (case SWAT+ unit) parameter implemented. parameter name suffix separated '.'. ‘cn2’ HRU parameter SWAT+ setup. Therefore suffix '.hru'. expressions follow parameter separated pipe dash '|'. second expression type change must follow. type definition always written 'change = change_type'. Four types parameter changes can applied. 'absval' replaces initial value newly defined value. 'abschg' adds absolute value initial parameter value. 'relchg' 'pctchg' change parameter fraction percentage initial parameter value. Similar ouput definition goal parameter definition keep syntax SWAT+ SWAT2012 . Yet differences present due , e.g. different parameter names model parameter suffixes. parameter change example look follows SWAT2012 model setup. see parameter name written caps, Curve Number 2 defined way SWAT2012 input files. Also parameter defined ‘.hru’ input files, part ‘.mgt’ input files. parameters, associated object types value ranges SWAT+ model setups listed ‘cal_parms.cal’ available every SWAT+ ‘TxtInOut’ folder. Caution: guarantee changes parameters listed file effective. always recommend test parameter changes small examples. identify SWAT2012 parameters associated input files recommend look SWAT2012 peoject check parameters can found. can define individual names parameter. cases optional. name must unique used parameters. name assigned SWAT parameter name used instead. Thus, common situation define parameter name, define change parameter e.g. different subbasins, soils, slope classes, etc. (defined parameter conditions explained detail upcoming article parameter definition). parameter name assigned parameter name first position separated '::' following expressions. example shows case SWAT2012 model parameter ‘CANMX’ used twice changed different values different land uses. example initial values SWAT2012 parameter ‘CANMX’ replaced different values forest land uses land uses. Therefore, individual names required assign. Otherwise, run_swat*() tries assign name effectively two different parameter changes trigger error. last expression can see parameter definitions example called conditions. conditions can constrain parameter change specific units model setup thus parameter change affect entire model setup. conditions must written R code syntax. first condition 'luse %% c('FRST', 'FRSD', 'FRSE')' means parameter ‘CANMX’ receives value 4 every HRU land use forest land use. second expression '!(luse %% c('FRST', 'FRSD', 'FRSE'))' means opposite, land uses forest land use. syntax conditions similar SWAT+ SWAT2012 model setups. Yet, major differences exist variables can used apply condition. biggest difference present definition spatial units. SWAT2012 model setups clear overall model structure, SWAT+ setups can flexible spatial configuration. Due clear structure SWAT2012 models spatial conditions 'sub' 'hru' can applied parameters. SWAT+ conditions spatial variable 'unit' exists can used constrain change unit IDs objects parameter associated . example defines parameter value changes SWAT2012 model setup. parameter ‘ALPHA_BF’ changed three different values depending Subbasin ID. case definition unique parameter names mandatory. parameter ‘USLE_P’ changed three specific HRUs. required assign parameter name , overall good practice give parameter changes good, self explanatory names help analysis. example shows unit conditions SWAT+ model parameters. changes ‘cn2’ affect specific HRUs defined 'unit' condition, unit condition second case addresses aquifers IDs 1 5 parameter ‘alpha’ aquifer parameter. many possibilities define conditions parameter changes multiple variables exist can used conditions. addressed article parameter changes also provides overview tables condition variables gives examples parameter definitions. (article currently preparation).","code":"par_chg <- c(\"cn2.hru|change = abschg\" = 5) par_chg <- c(\"CN2.mgt|change = abschg\" = 5) par_chg <- c(\"canmax_forest::CANMX.hru | change = absval | luse %in% c('FRST', 'FRSD', 'FRSE')\" = 4,              \"canmax_other::CANMX.hru | change = absval | !(luse %in% c('FRST', 'FRSD', 'FRSE'))\" = 1) par_cond2012 <- c(\"a_bf_head::ALPHA_BF.gw | change = abschg | sub < 4\" = 0.2,                   \"a_bf_upland::ALPHA_BF.gw | change = abschg | sub %in% c(5,7,11)\" = 0.35,                   \"a_bf_floodpl::ALPHA_BF.gw | change = abschg | sub %in% c(6,8:10)\" = 0.6,                   \"p_terrace::USLE_P.mgt | change = absval | hru %in% c(37, 45, 154)\" = 0.1) par_condplus <- c(\"cn2_agri::cn2.hru | change = relchg | unit = c(1:12, 25:27, 46:72)\" = - 0.05,                   \"alpha::alpha.aqu | change = absval | unit %in% c(1,5)\" = 0.35)"},{"path":"https://chrisschuerz.github.io/SWATrunR/articles/SWATrunR.html","id":"simulation-with-one-parameter-combination","dir":"Articles","previous_headings":"Changing parameter values","what":"Simulation with one parameter combination","title":"Getting started with SWATrunR","text":"can define one combination parameter changes named vector. parameter combination defined described examples , parameter name following specific syntax value change. parameter changes concatinated concatinate c() function form parameter combination. define single parameter set named vector generated. names define parameters type change. generate combination parameter changes 9 SWAT+ model parameters frequently used model calibration. generated parameter combination can included SWAT+ model execution passing parameter set input argument parameter run_swatplus() function call. see difference simulation parameter changes applied simulation run input argument parameter, NULL uses defined vector par_comb define parameter changes.","code":"par_comb <- c(\"cn2.hru | change = abschg | plant == 'corn'\" = -5,               'lat_ttime.hru | change = absval' = 0.5,               'lat_len.hru | change = abschg' = 30,               'epco.hru | change = absval' = 0.8,               'esco.hru | change = absval' = 0.5,               'perco.hru | change = absval' = 0.4,               \"k.sol | change = pctchg | hsg == 'C'\" = 25,               'awc.sol | change = pctchg' = -10,               'alpha.aqu | change = absval' = 0.35) q_sim1 <- run_swatplus(project_path = path_plus,                        output = define_output(file = \"channel_sd_day\",                                               variable = \"flo_out\",                                               unit = 1),                        parameter = par_comb)  #> Building 1 thread in 'Define:/your/path/swatplus_demo/.model_run': #>  Thread 1 of 1   Time elapsed: 1S   Time remaining: 0S     #>  Completed 1 thread in 1S #> Performing 1 simulation on 1 core: #>  Simulation 1 of 1   Time elapsed: 2S   Time remaining: 0S #>  Completed 1 simulation in 2S"},{"path":"https://chrisschuerz.github.io/SWATrunR/articles/SWATrunR.html","id":"exploring-results-with-one-parameter-combination","dir":"Articles","previous_headings":"Changing parameter values","what":"Exploring results with one parameter combination","title":"Getting started with SWATrunR","text":"recap, simulation parameter changes applied returned single tibble simulation outputs defined output variables. output q_sim1 example bit complex consists list tibbles store information case changed parameter values. output consists two main parts. first element parameter list hast two tibble elements. first one parameter$values stores parameter combinations tibble, case nine columns parameters one row, defined one parameter combination. names parameter case SWAT+ model parameter names define individual names. individual parameter names defined column names individual names. second element parameter$definition. tibble provides information defined parameter change. value parameter change alone useless information say anything type change parameter conditions applied. definition table shows par_name user defined name case name assigned. example par_name parameter SWAT parameter name. column file_name indicates file unit level parameter implemented suffix parameter defined par_comb. change showes type change applied parameter. parameter conditions implemented parameter set additional columns visible table give information applied rules. example changes ‘cn2’ employed corn currently planted HRU hydraulic conductivity ‘k’ increased soils hydrological soil group ‘C’. last column full_name gives full parameter combination defined . second part simulation outputs provides simulation results defined output variables tibble. structure table one outputs parameter changes implemented. parameter changes effect simulation flo_out, simulated values simulated values stored simulation course different. see parameter change effective compare simulated outputs q_sim1 implemented parameter set par_comb initial simulation q_sim_plus first SWAT model runs simple plot.  plot shows differences two simulations, particularly recession base flow discharge. Without discussing results way, can see parameter changes effective small example. strongly recommend perform procedure short simulation runs every parameter included e.g. calibration individually verify intended parameter changes actually work. better invest time quick simulation experiments, realize changing parameter values work running thousands simulations days.","code":"q_sim1$parameter$values #> # A tibble: 1 × 9 #>     cn2 lat_ttime lat_len  epco  esco perco     k   awc alpha #>   <dbl>     <dbl>   <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> #> 1    -5       0.5      30   0.8   0.5   0.4    25   -10  0.35 q_sim1$parameter$definition #> # A tibble: 9 × 7 #>   par_name  parameter file_name change plant    hsg   full_name                  #>   <chr>     <chr>     <chr>     <chr>  <chr>    <chr> <chr>                      #> 1 cn2       cn2       hru       abschg =='corn' NA    cn2.hru | change = abschg… #> 2 lat_ttime lat_ttime hru       absval NA       NA    lat_ttime.hru | change = … #> 3 lat_len   lat_len   hru       abschg NA       NA    lat_len.hru | change = ab… #> 4 epco      epco      hru       absval NA       NA    epco.hru | change = absval #> 5 esco      esco      hru       absval NA       NA    esco.hru | change = absval #> 6 perco     perco     hru       absval NA       NA    perco.hru | change = absv… #> 7 k         k         sol       pctchg NA       =='C' k.sol | change = pctchg |… #> 8 awc       awc       sol       pctchg NA       NA    awc.sol | change = pctchg  #> 9 alpha     alpha     aqu       absval NA       NA    alpha.aqu | change = absv… q_sim1$simulation$flo_out #> # A tibble: 3,653 × 2 #>    date        run_1 #>    <date>      <dbl> #>  1 2003-01-01 0.0649 #>  2 2003-01-02 0.0365 #>  3 2003-01-03 0.022  #>  4 2003-01-04 0.0174 #>  5 2003-01-05 0.0153 #>  6 2003-01-06 0.0137 #>  7 2003-01-07 0.0144 #>  8 2003-01-08 0.0135 #>  9 2003-01-09 0.0128 #> 10 2003-01-10 0.0121 #> # … with 3,643 more rows library(dplyr) library(ggplot2)  # Adding a column that indicates the par change to q_sim1 q_sim1_sim <- mutate(q_sim1$simulation$flo_out, par_change = 'yes')   # Preparing the plot table q_plot <- q_sim_plus$simulation$flo_out %>%    mutate(., par_change = 'no') %>% # Also add par change column to q_sim_plus   bind_rows(., q_sim1_sim) %>%    rename(discharge = run_1)  ggplot(data = q_plot) +   geom_line(aes(x = date, y = discharge, col = par_change, linetype = par_change)) +   scale_color_manual(values = c('tomato3', 'steelblue3')) +   scale_linetype_manual(values = c('solid', 'dashed')) +    theme_bw()"},{"path":"https://chrisschuerz.github.io/SWATrunR/articles/SWATrunR.html","id":"simulations-with-a-parameter-set","dir":"Articles","previous_headings":"Changing parameter values","what":"Simulations with a parameter set","title":"Getting started with SWATrunR","text":"Similar single parameter combination previous example can also define entire parameter sets implement simulation runs. difference define set parameter combinations single vector c() function. Instead define tibble parameter combinations. tibble column defines parameter change (syntax name). row one combination parameter changes used simulation. example uses similar combination parameter changes previous example. time uniformly sample parameter change n = 5 times runif() combine samples table 9 columns 5 rows. implementation run_swat*() works way single parameter set. parameter table par_set simply passed input argument parameter. show main differences simulation outputs define three SWAT output variables ‘flo_out’, ‘surq_gen’, ‘latq’ returned R. progress message time shows 5 simulations performed updates elapsed remaining time simulations, can valuable information case longer simulation experiments. says simulations performed one core. Parallel processing implemented SWATrunR can easily activated input argument n_thread. Parallel processing briefly addressed section ??? .","code":"library(tibble) n <- 5  par_set <- tibble('cn2.hru | change = abschg' = runif(n,-15,10),                   'lat_ttime.hru | change = absval' = runif(n,0.5,5),                   'lat_len.hru | change = abschg' = runif(n,-10,50),                   'epco.hru | change = absval' = runif(n,0.1,1),                   'esco.hru | change = absval' = runif(n,0.1,1),                   'perco.hru | change = absval' = runif(n,0.1,0.8),                   'k.sol | change = pctchg' = runif(n,-20,100),                   'awc.sol | change = pctchg' = runif(n,-20,20),                   'alpha.aqu | change = absval' = runif(n,0.1,0.8))  par_set q_simn <- run_swatplus(project_path = path_plus,                        output = list(q_cha = define_output(file = 'channel_sd_day',                                                            variable = 'flo_out',                                                            unit = 1),                                      q_sur = define_output(file = \"basin_wb_day\",                                                            variable = \"surq_gen\",                                                            unit = 1),                                      q_lat = define_output(file = \"basin_wb_day\",                                                            variable = \"latq\",                                                            unit = 1)),                        parameter = par_set)  #> Building 1 thread in 'Define:/your/path/swatplus_demo/.model_run': #>  Thread 1 of 1   Time elapsed: 0S   Time remaining: 1S     #>  Completed 1 thread in 1S #> Performing 5 simulations on 1 cores: #>  Simulation 4 of 5   Time elapsed: 16S   Time remaining: 4S #>  Completed 5 simulations in 20S saveRDS(q_simn, here::here('vignettes/datasets/q_simn.rds'))"},{"path":"https://chrisschuerz.github.io/SWATrunR/articles/SWATrunR.html","id":"exploring-results-with-a-parameter-set","dir":"Articles","previous_headings":"Changing parameter values","what":"Exploring results with a parameter set","title":"Getting started with SWATrunR","text":"general structure simulation output results parameter set list two main elements parameter simulation. look q_simn$parameter can see structure previous example. Differences parameter$values table now 5 rows used 5 different parameter combinations simulation runs. table parameter$definition lacks columns conditions plant hsg time define parameter conditions time. major difference output list given simulation outputs. simulation single table case simulations single parameter combination. case multiple simulations one parameter combination list tibbles generated. can see q_simn$simulation output organized three tables table provides simulation runs output variable defined. table case date column first column followed columns run_1 run_5 run provides simulation outputs 5 parameter combinations. visualize simulation results 5 parameter combinations. simplicity use outputs ‘flo_out’. better see differences runs also plot year 2008. Without going details, see substantial differences runoff peaks, recession base flow visible. plot example illustrates data structure simulation outputs makes easy process SWAT simulations analyses.","code":"q_simn$parameter #> $values #> # A tibble: 5 × 9 #>       cn2 lat_ttime lat_len  epco  esco perco     k    awc alpha #>     <dbl>     <dbl>   <dbl> <dbl> <dbl> <dbl> <dbl>  <dbl> <dbl> #> 1  0.350      4.54    28.7  0.954 0.995 0.258  97.0   9.83 0.207 #> 2  5.32       3.68    22.0  0.399 0.806 0.131  57.4   7.23 0.756 #> 3  1.30       2.38    -4.91 0.650 0.468 0.758 -17.6  -6.05 0.207 #> 4 -4.37       4.59    31.0  0.527 0.945 0.631  88.7  -4.04 0.591 #> 5  0.0104     0.646   23.2  0.610 0.283 0.716  46.6 -19.5  0.288 #>  #> $definition #> # A tibble: 9 × 5 #>   par_name  parameter file_name change full_name                       #>   <chr>     <chr>     <chr>     <chr>  <chr>                           #> 1 cn2       cn2       hru       abschg cn2.hru | change = abschg       #> 2 lat_ttime lat_ttime hru       absval lat_ttime.hru | change = absval #> 3 lat_len   lat_len   hru       abschg lat_len.hru | change = abschg   #> 4 epco      epco      hru       absval epco.hru | change = absval      #> 5 esco      esco      hru       absval esco.hru | change = absval      #> 6 perco     perco     hru       absval perco.hru | change = absval     #> 7 k         k         sol       pctchg k.sol | change = pctchg         #> 8 awc       awc       sol       pctchg awc.sol | change = pctchg       #> 9 alpha     alpha     aqu       absval alpha.aqu | change = absval q_simn$simulation #> $q_sur #> # A tibble: 3,653 × 6 #>    date       run_1 run_2 run_3 run_4 run_5 #>    <date>     <dbl> <dbl> <dbl> <dbl> <dbl> #>  1 2003-01-01 0.3   0.407 0.008 0.01  0.007 #>  2 2003-01-02 0.064 0.093 0.001 0.002 0.001 #>  3 2003-01-03 0.015 0.026 0.001 0.001 0     #>  4 2003-01-04 0.004 0.01  0     0     0     #>  5 2003-01-05 0.001 0.004 0     0     0     #>  6 2003-01-06 0     0.002 0     0     0     #>  7 2003-01-07 0     0.001 0     0     0     #>  8 2003-01-08 0     0.001 0     0     0     #>  9 2003-01-09 0     0.001 0     0     0     #> 10 2003-01-10 0     0     0     0     0     #> # … with 3,643 more rows #>  #> $q_lat #> # A tibble: 3,653 × 6 #>    date       run_1 run_2 run_3 run_4 run_5 #>    <date>     <dbl> <dbl> <dbl> <dbl> <dbl> #>  1 2003-01-01 0.03  0.025 0.013 0.019 0.015 #>  2 2003-01-02 0.029 0.025 0.012 0.019 0.013 #>  3 2003-01-03 0.029 0.024 0.012 0.019 0.012 #>  4 2003-01-04 0.028 0.024 0.011 0.019 0.012 #>  5 2003-01-05 0.028 0.023 0.011 0.019 0.011 #>  6 2003-01-06 0.028 0.023 0.011 0.019 0.011 #>  7 2003-01-07 0.027 0.023 0.01  0.019 0.011 #>  8 2003-01-08 0.027 0.023 0.01  0.018 0.01  #>  9 2003-01-09 0.027 0.022 0.01  0.018 0.01  #> 10 2003-01-10 0.026 0.022 0.009 0.018 0.01  #> # … with 3,643 more rows #>  #> $q_cha #> # A tibble: 3,653 × 6 #>    date        run_1  run_2  run_3   run_4 run_5 #>    <date>      <dbl>  <dbl>  <dbl>   <dbl> <dbl> #>  1 2003-01-01 0.0831 0.107  0.0956 0.0120  0.125 #>  2 2003-01-02 0.0483 0.0616 0.0976 0.0107  0.128 #>  3 2003-01-03 0.0348 0.0414 0.100  0.00985 0.132 #>  4 2003-01-04 0.0294 0.0327 0.102  0.00930 0.136 #>  5 2003-01-05 0.0254 0.0297 0.104  0.00965 0.138 #>  6 2003-01-06 0.0249 0.0279 0.105  0.00923 0.140 #>  7 2003-01-07 0.0233 0.0252 0.106  0.00885 0.141 #>  8 2003-01-08 0.0219 0.0233 0.107  0.00849 0.142 #>  9 2003-01-09 0.0207 0.0217 0.108  0.00815 0.144 #> 10 2003-01-10 0.0195 0.0220 0.108  0.00782 0.143 #> # … with 3,643 more rows library(dplyr) library(tidyr) library(ggplot2) library(lubridate)  q_plot <- q_simn$simulation$q_cha %>%    pivot_longer(., cols = -date, names_to = 'run', values_to = 'flo_out') %>%    filter(year(date) == 2008)  ggplot(q_plot)+   geom_line(aes(x = date, y = flo_out, col = run, linetype = run)) +    scale_color_brewer(palette = 'Dark2') +   theme_bw()"},{"path":"https://chrisschuerz.github.io/SWATrunR/articles/SWATrunR.html","id":"setting-simulation-period-and-interval","dir":"Articles","previous_headings":"","what":"Setting simulation period and interval","title":"Getting started with SWATrunR","text":"Defining simulation periods time intervals simulation results printed necessary settings nearly every SWAT simulation. run_swatplus() run_swat2012() provide input arguments define arguments SWAT simulations. input arguments SWAT+ SWAT2012 simulations difference must considered. can control simulation period two input arguments start_date end_date run_swatplus() run_swat2012(). skip certain number simulations printing outputs additional argument usually defined together time frame simulation. reason skip years simulated time series printed use simulated years warm period initiate state variables SWAT model run. run_swatplus() run_swat2012() provide input argument years_skip define number years printed outputs. example define simulations performed 2000-01-01 2005-12-31 first 3 years skipped output printing. look simulated time series can see starts year 2003 holds data 3 years. run_swatplus() provides additional input argument define date output printing started. start_date_print can define date first outputs printed rather defining years skipped. can advantage cases, might synonymous years_skip many cases. situation start_date_print can favored hydrological years simulated rather calendar years. years_skipwould cases simply skip defined years starts printing first January next year. start_date_print printing outputs can e.g. started October first start day hydrological year. example shows described difference years_skip start_date_print.","code":"sim_set_date <- run_swatplus(project_path = path_plus,                              output = define_output('channel_sd_day', 'flo_out', 1),                              start_date = 20000101,                              end_date = 20051231,                              years_skip = 3) #> Building 1 thread in 'Define:/your/path/swatplus_demo/.model_run':  #>  Completed 1 thread in 0S                                                    #> Performing 1 simulation on 1 core:  #>  Completed 1 simulation in 2S sim_set_date #> $simulation #> $simulation$flo_out #> # A tibble: 1,096 × 2 #>    date        run_1 #>    <date>      <dbl> #>  1 2003-01-01 0.0924 #>  2 2003-01-02 0.0905 #>  3 2003-01-03 0.0912 #>  4 2003-01-04 0.0908 #>  5 2003-01-05 0.0918 #>  6 2003-01-06 0.0914 #>  7 2003-01-07 0.0922 #>  8 2003-01-08 0.0929 #>  9 2003-01-09 0.0921 #> 10 2003-01-10 0.0926 #> # … with 1,086 more rows #>  #>  #> $run_info #> $run_info$simulation_log #> # A tibble: 1 × 5 #>   run_started         run_finished        run_time project_path          run_p…¹ #>   <dttm>              <dttm>              <Period> <chr>                 <chr>   #> 1 2023-07-19 11:03:48 2023-07-19 11:03:52 4S       C:/Users/schuerz/Doc… C:/Use… #> # … with abbreviated variable name ¹​run_path #>  #> $run_info$simulation_period #> # A tibble: 1 × 4 #>   start_date end_date   years_skip start_date_print #>   <date>     <date>          <dbl>            <dbl> #> 1 2000-01-01 2005-12-31          3               NA #>  #> $run_info$output_definition #> # A tibble: 1 × 6 #>   name    file_full          file       time_interval variable unit  #>   <chr>   <chr>              <chr>      <chr>         <chr>    <chr> #> 1 flo_out channel_sd_day.txt channel_sd day           flo_out  1 sim_yskip <- run_swatplus(project_path = path_plus,                           output = define_output('channel_sd_day', 'flo_out', 1),                           start_date = 20001101,                           end_date = 20051031,                           years_skip = 3) #> Building 1 thread in 'Define:/your/path/swatplus_demo/.model_run':  #>  Completed 1 thread in 0S                                                    #> Performing 1 simulation on 1 core:  #>  Completed 1 simulation in 2S sim_stprint <- run_swatplus(project_path = path_plus,                             output = define_output('channel_sd_day', 'flo_out', 1),                             start_date = 20001101,                             end_date = 20051031,                             start_date_print = 20031101) #> Building 1 thread in 'Define:/your/path/swatplus_demo/.model_run':  #>  Completed 1 thread in 0S                                                    #> Performing 1 simulation on 1 core:  #>  Completed 1 simulation in 2S sim_yskip #> $simulation #> $simulation$flo_out #> # A tibble: 1,035 × 2 #>    date        run_1 #>    <date>      <dbl> #>  1 2003-01-01 0.0925 #>  2 2003-01-02 0.0907 #>  3 2003-01-03 0.0902 #>  4 2003-01-04 0.0901 #>  5 2003-01-05 0.0913 #>  6 2003-01-06 0.0911 #>  7 2003-01-07 0.0921 #>  8 2003-01-08 0.0917 #>  9 2003-01-09 0.0924 #> 10 2003-01-10 0.0930 #> # … with 1,025 more rows #>  #>  #> $run_info #> $run_info$simulation_log #> # A tibble: 1 × 5 #>   run_started         run_finished        run_time project_path          run_p…¹ #>   <dttm>              <dttm>              <Period> <chr>                 <chr>   #> 1 2023-07-19 11:04:17 2023-07-19 11:04:21 4S       C:/Users/schuerz/Doc… C:/Use… #> # … with abbreviated variable name ¹​run_path #>  #> $run_info$simulation_period #> # A tibble: 1 × 4 #>   start_date end_date   years_skip start_date_print #>   <date>     <date>          <dbl>            <dbl> #> 1 2000-11-01 2005-10-31          3               NA #>  #> $run_info$output_definition #> # A tibble: 1 × 6 #>   name    file_full          file       time_interval variable unit  #>   <chr>   <chr>              <chr>      <chr>         <chr>    <chr> #> 1 flo_out channel_sd_day.txt channel_sd day           flo_out  1 sim_stprint #> $simulation #> $simulation$flo_out #> # A tibble: 731 × 2 #>    date        run_1 #>    <date>      <dbl> #>  1 2003-11-01 0.0347 #>  2 2003-11-02 0.0346 #>  3 2003-11-03 0.0354 #>  4 2003-11-04 0.0373 #>  5 2003-11-05 0.0364 #>  6 2003-11-06 0.0362 #>  7 2003-11-07 0.0369 #>  8 2003-11-08 0.0375 #>  9 2003-11-09 0.0371 #> 10 2003-11-10 0.0376 #> # … with 721 more rows #>  #>  #> $run_info #> $run_info$simulation_log #> # A tibble: 1 × 5 #>   run_started         run_finished        run_time project_path          run_p…¹ #>   <dttm>              <dttm>              <Period> <chr>                 <chr>   #> 1 2023-07-19 11:04:21 2023-07-19 11:04:25 4S       C:/Users/schuerz/Doc… C:/Use… #> # … with abbreviated variable name ¹​run_path #>  #> $run_info$simulation_period #> # A tibble: 1 × 4 #>   start_date end_date   years_skip start_date_print #>   <date>     <date>          <int> <date>           #> 1 2000-11-01 2005-10-31         NA 2003-11-01       #>  #> $run_info$output_definition #> # A tibble: 1 × 6 #>   name    file_full          file       time_interval variable unit  #>   <chr>   <chr>              <chr>      <chr>         <chr>    <chr> #> 1 flo_out channel_sd_day.txt channel_sd day           flo_out  1"},{"path":"https://chrisschuerz.github.io/SWATrunR/articles/SWATrunR.html","id":"parallel-processing-with-n_thread","dir":"Articles","previous_headings":"","what":"Parallel processing with n_thread","title":"Getting started with SWATrunR","text":"run_swatplus() run_swat2012() provide option perform SWAT simulations parallel. several parameter combinations defined SWAT run passed run_swat*() argument parameter. simulations individual parameter combinations can distributed individual cores computer. simple demonstartion parallel processing simulation runs use example define 16 parameter combinations time. difference want perform simulations parallel define number cores input argument n_thread. example define n_thread = 4. means use 4 cores computer (computer 4 cores, otherwise uses maximum number) always run 4 different parameter combinations parallel. can see run time per parameter combination reduced. large reduction depends many parameters always one--one reduction (.e. doubling number cores necessarily halve run time).","code":"n <- 16  par_set <- tibble('cn2.hru | change = abschg' = runif(n,-15,10),                   'lat_ttime.hru | change = absval' = runif(n,0.5,5),                   'lat_len.hru | change = abschg' = runif(n,-10,50),                   'epco.hru | change = absval' = runif(n,0.1,1),                   'esco.hru | change = absval' = runif(n,0.1,1),                   'perco.hru | change = absval' = runif(n,0.1,0.8),                   'k.sol | change = pctchg' = runif(n,-20,100),                   'awc.sol | change = pctchg' = runif(n,-20,20),                   'alpha.aqu | change = absval' = runif(n,0.1,0.8)) q_simn <- run_swatplus(project_path = path_plus,                         output = list(q_cha = define_output(file = 'channel_sd_day',                                                            variable = 'flo_out',                                                            unit = 1),                                      q_sur = define_output(file = \"basin_wb_day\",                                                            variable = \"surq_gen\",                                                            unit = 1),                                      q_lat = define_output(file = \"basin_wb_day\",                                                            variable = \"latq\",                                                            unit = 1)),                        parameter = par_set,                        n_thread = 4)  #> Building 4 threads in 'Define:/your/path/swatplus_demo/.model_run': #>  Thread 1 of 4   Time elapsed: 0S   Time remaining: 1S     #>  Completed 4 thread in 1S #> Performing 16 simulations on 4 cores: #>  Simulation 8 of 16   Time elapsed: 22S   Time remaining: 20S #>  Completed 16 simulations in 40S"},{"path":"https://chrisschuerz.github.io/SWATrunR/articles/SWATrunR.html","id":"using-parameter-subsets-with-run_index","dir":"Articles","previous_headings":"","what":"Using parameter subsets with run_index","title":"Getting started with SWATrunR","text":"might run situations defined set parameter combinations, want perform simulations subset defined combinations, example: Splitting simulation task perform several computers. set e.g. 500 parameter combinations can split two subsets parameter set used computers machine 1 run_index = 1:250, second one run_index = 251:500. Rerunning unsuccessful runs e.g. case computer crashed running simulations specific parameter combinations caused errors simulation. case determine missing runs can define run_index accordingly. Performing case study simulations parameter combinations selected model calibration. case also keep original parameter set define parameter combinations used case study simulations. following small example assume simulations parameter combinations 3,4,5 7 previous example failed want perform simulations . can running code , adding input argument run_index. may ask use run_index manually subset parameter set passing run_swatplus()? compare two cases see one major difference. perform simulations parameter set, subset parameter combinations pass SWAT simulations. simulation runs first example used run_index subsetting ‘know’ parameter combinations also exist, simulations second example simply information performed subsetting outside run_swat*() function. can see differences looking parameter sets saved simulation runs. q_simn_sub still stores 16 parameter combinations although used four q_simn_sub1 got information four parameter combinations. , naming simulation runs different two examples shown results qsur. simulations used run_index subsetting preserved initial run numbers naming. Thus, want merge runs subset previous runs, names simulations always match corresponding parameter combinations initially defined parameter set. second example can see runs called run_1 run_4. function run_swatplus() received 4 parameter combinations input used parameter combinations 1 4. Merging runs runs parameter set requires rename runs. however potential source errors.","code":"q_simn_sub <- run_swatplus(project_path = path_plus,                             output = list(q_cha = define_output(file = 'channel_sd_day',                                                                variable = 'flo_out',                                                                unit = 1),                                          q_sur = define_output(file = \"basin_wb_day\",                                                                variable = \"surq_gen\",                                                                unit = 1),                                          q_lat = define_output(file = \"basin_wb_day\",                                                                variable = \"latq\",                                                                unit = 1)),                            parameter = par_set,                            run_index = c(3:5, 7),                            n_thread = 4)  #> Building 4 threads in 'Define:/your/path/swatplus_demo/.model_run': #>  Thread 1 of 4   Time elapsed: 0S   Time remaining: 1S     #>  Completed 4 thread in 1S #> Performing 4 simulations on 4 cores: #>  Completed 4 simulations in 9S par_subset <- par_set[c(3:5,7), ]  q_simn_sub1 <- run_swatplus(project_path = path_plus,                             output = list(q_cha = define_output(file = 'channel_sd_day',                                                                 variable = 'flo_out',                                                                 unit = 1),                                           q_sur = define_output(file = \"basin_wb_day\",                                                                 variable = \"surq_gen\",                                                                 unit = 1),                                           q_lat = define_output(file = \"basin_wb_day\",                                                                 variable = \"latq\",                                                                 unit = 1)),                             parameter = par_subset,                             n_thread = 4)  #> Building 4 threads in 'Define:/your/path/swatplus_demo/.model_run': #>  Thread 1 of 4   Time elapsed: 0S   Time remaining: 1S     #>  Completed 4 thread in 0S #> Performing 4 simulations on 4 cores: #>  Completed 4 simulations in 10S q_simn_sub$parameter$values #> # A tibble: 16 × 9 #>       cn2 lat_ttime lat_len  epco  esco perco      k     awc alpha #>     <dbl>     <dbl>   <dbl> <dbl> <dbl> <dbl>  <dbl>   <dbl> <dbl> #>  1  -1.02     2.92    32.8  0.807 0.393 0.154   5.01 -18.6   0.133 #>  2  -7.85     1.39    -9.12 0.291 0.926 0.223  17.7   10.2   0.153 #>  3 -10.5      1.50    34.9  0.208 0.170 0.113  77.7   -9.14  0.740 #>  4  -9.94     2.47    11.2  0.596 0.200 0.361  48.8   13.9   0.650 #>  5   9.15     1.44    40.4  0.492 0.452 0.210  24.7   -8.91  0.778 #>  6  -9.81     3.71    48.0  0.703 0.774 0.162  22.4   -0.192 0.492 #>  7   7.80     2.49    -5.98 0.439 0.503 0.532  35.1   -5.16  0.800 #>  8  -8.82     3.92    19.6  0.703 0.754 0.781  57.9   17.7   0.715 #>  9  -3.10     4.94    -6.67 0.891 0.935 0.550  70.3   -7.56  0.490 #> 10   2.26     0.692    9.64 0.205 0.427 0.707 -17.7   17.0   0.665 #> 11  -8.61     4.60    42.6  0.831 0.955 0.536  -4.34 -14.6   0.474 #> 12 -12.5      2.05    -4.46 0.672 0.447 0.759  41.7    8.72  0.440 #> 13   2.00     4.60     2.22 0.804 0.448 0.130 -11.8   -0.957 0.671 #> 14  -1.64     2.65    12.5  0.176 0.980 0.470  -1.64  13.9   0.587 #> 15   2.80     3.36    20.7  0.534 0.651 0.635  21.6   15.7   0.342 #> 16  -5.90     1.25     7.06 0.389 0.292 0.782  13.8    3.97  0.264 q_simn_sub1$parameter$values #> # A tibble: 4 × 9 #>      cn2 lat_ttime lat_len  epco  esco perco     k   awc alpha #>    <dbl>     <dbl>   <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> #> 1 -10.5       1.50   34.9  0.208 0.170 0.113  77.7 -9.14 0.740 #> 2  -9.94      2.47   11.2  0.596 0.200 0.361  48.8 13.9  0.650 #> 3   9.15      1.44   40.4  0.492 0.452 0.210  24.7 -8.91 0.778 #> 4   7.80      2.49   -5.98 0.439 0.503 0.532  35.1 -5.16 0.800 q_simn_sub$simulation$q_sur #> # A tibble: 3,653 × 5 #>    date       run_03 run_04 run_05 run_07 #>    <date>      <dbl>  <dbl>  <dbl>  <dbl> #>  1 2003-01-01  0.307  0.189  0.507  0.186 #>  2 2003-01-02  0.065  0.036  0.139  0.058 #>  3 2003-01-03  0.015  0.008  0.052  0.026 #>  4 2003-01-04  0.004  0.002  0.025  0.014 #>  5 2003-01-05  0.001  0.001  0.014  0.009 #>  6 2003-01-06  0      0      0.009  0.005 #>  7 2003-01-07  0      0      0.006  0.003 #>  8 2003-01-08  0      0      0.004  0.002 #>  9 2003-01-09  0      0      0.002  0.001 #> 10 2003-01-10  0      0      0.002  0.001 #> # … with 3,643 more rows q_simn_sub1$simulation$q_sur #> # A tibble: 3,653 × 5 #>    date       run_1 run_2 run_3 run_4 #>    <date>     <dbl> <dbl> <dbl> <dbl> #>  1 2003-01-01 0.307 0.189 0.507 0.186 #>  2 2003-01-02 0.065 0.036 0.139 0.058 #>  3 2003-01-03 0.015 0.008 0.052 0.026 #>  4 2003-01-04 0.004 0.002 0.025 0.014 #>  5 2003-01-05 0.001 0.001 0.014 0.009 #>  6 2003-01-06 0     0     0.009 0.005 #>  7 2003-01-07 0     0     0.006 0.003 #>  8 2003-01-08 0     0     0.004 0.002 #>  9 2003-01-09 0     0     0.002 0.001 #> 10 2003-01-10 0     0     0.002 0.001 #> # … with 3,643 more rows"},{"path":"https://chrisschuerz.github.io/SWATrunR/articles/SWATrunR.html","id":"saving-simulation-outputs-with-save_file","dir":"Articles","previous_headings":"","what":"Saving simulation outputs with save_file","title":"Getting started with SWATrunR","text":"run_swat*() provides option immediately save simulation outputs SQLite date bases simulation parameter set performed. option useful many cases, Performance time consuming simulation experiments large number parameter combinations. Performing many simulations bears risk errors single simulations. run simulations single run results unsolvable error run_swat*() may return error return simulation results. Thus, computation time simply lost time simulations must repeated. Performing simulations entire list simulation outputs parameter combinations fit computers RAM. case simulations can saved incrementally data bases fill RAM (input argument return_output = FALSE. See example ). Splitting simulations run several computers merging later one machine. SWATrunR function load_swat_run() can access results saved multiple data bases merge return R single simulation output. Thus, SWATrunR facilitates user friendly workflow split simulations merge outputs analysis. incrementally save simulation outputs just define name simulation output input argument save_file. Running simulations run_swat*() generates folder name project_path contains multiple SQLite data bases store simulations runs. can see run following simulations computer look SWAT project folder. example use parameter set generated simply extend execution run_swatplus() run_file = q_sim_1_16 (name indicates save folder contains simulations 1 16 simulation project). can also see assign function call run_swatplus() variable also added input argument return_output = FALSE. return_output = FALSE simulation results returned back R simulation results saved data bases. can course still keep setting return_output = TRUE assigning outputs variable R. case simulation outputs directly saved RAM R working environment backup SQLite data bases. can probably see simulation time slightly increased. safer incrementally save simulations. incremental saving can result significantly longer computation times writing simulations hard drive can take . load_swat_run() can load simulations saved files. just provide path saved folder q_sim_1_16 hard drive load R. can see structure loaded simulations one get running simulations directly returning R. loaded simulations store parameter$values parameter$definition together simulation three defined output variables. want analyze large simulation project load entire simulation output RAM can also load specific variables selected runs. can also omit add parameter information. following example load simulation outputs q_sur first 5 simulations. Additionally, add parameter information.","code":"run_swatplus(project_path = path_plus,              output = list(q_cha = define_output(file = 'channel_sd_day',                                                  variable = 'flo_out',                                                  unit = 1),                            q_sur = define_output(file = \"basin_wb_day\",                                                  variable = \"surq_gen\",                                                  unit = 1),                            q_lat = define_output(file = \"basin_wb_day\",                                                  variable = \"latq\",                                                  unit = 1)),              parameter = par_set,              save_file = 'q_sim_1_16',              return_output = FALSE,              n_thread = 4)  #> Building 4 threads in 'Define:/your/path/swatplus_demo/.model_run': #>  Thread 1 of 1   Time elapsed: 0S   Time remaining: 1S     #>  Completed 4 thread in 1S #> Performing 4 simulations on 4 cores: #>  Completed 4 simulations in 36S q_saved <- load_swat_run(save_dir = paste(path_plus, 'q_sim_1_16', sep = '/')) #> Scan saved runs...Done! #> Read variables... #>   Progress: 3%   Time elapsed: 0S   Time remaining: 0S      Progress: 6%   Time elapsed: 0S   Time remaining: 0S      Progress: 9%   Time elapsed: 0S   Time remaining: 0S      Progress: 12%   Time elapsed: 0S   Time remaining: 0S      Progress: 16%   Time elapsed: 0S   Time remaining: 0S      Progress: 19%   Time elapsed: 0S   Time remaining: 0S      Progress: 22%   Time elapsed: 0S   Time remaining: 0S      Progress: 25%   Time elapsed: 0S   Time remaining: 0S      Progress: 28%   Time elapsed: 0S   Time remaining: 0S      Progress: 31%   Time elapsed: 0S   Time remaining: 0S      Progress: 34%   Time elapsed: 0S   Time remaining: 0S      Progress: 38%   Time elapsed: 0S   Time remaining: 0S      Progress: 41%   Time elapsed: 0S   Time remaining: 0S      Progress: 44%   Time elapsed: 0S   Time remaining: 0S      Progress: 47%   Time elapsed: 0S   Time remaining: 0S      Progress: 50%   Time elapsed: 0S   Time remaining: 0S      Progress: 53%   Time elapsed: 0S   Time remaining: 0S      Progress: 56%   Time elapsed: 0S   Time remaining: 0S      Progress: 59%   Time elapsed: 0S   Time remaining: 0S      Progress: 62%   Time elapsed: 0S   Time remaining: 0S      Progress: 66%   Time elapsed: 0S   Time remaining: 0S      Progress: 69%   Time elapsed: 0S   Time remaining: 0S      Progress: 72%   Time elapsed: 0S   Time remaining: 0S      Progress: 75%   Time elapsed: 0S   Time remaining: 0S      Progress: 78%   Time elapsed: 0S   Time remaining: 0S      Progress: 81%   Time elapsed: 0S   Time remaining: 0S      Progress: 84%   Time elapsed: 0S   Time remaining: 0S      Progress: 88%   Time elapsed: 0S   Time remaining: 0S      Progress: 91%   Time elapsed: 0S   Time remaining: 0S      Progress: 94%   Time elapsed: 0S   Time remaining: 0S      Progress: 97%   Time elapsed: 0S   Time remaining: 0S      Progress: 100%   Time elapsed: 0S   Time remaining: 0S                                                                                   Completed 32 Tables in 0S  #> Return simulation results...Done! qsur_1_5 <- load_swat_run(save_dir = paste(path_plus, 'q_sim_1_16', sep = '/'),                            variable = 'q_sur',                           run = 1:5,                            add_parameter = FALSE) #> Scan saved runs...Done! #> Read variables... #>   Progress: 10%   Time elapsed: 0S   Time remaining: 0S      Progress: 20%   Time elapsed: 0S   Time remaining: 0S      Progress: 30%   Time elapsed: 0S   Time remaining: 0S      Progress: 40%   Time elapsed: 0S   Time remaining: 0S      Progress: 50%   Time elapsed: 0S   Time remaining: 0S      Progress: 60%   Time elapsed: 0S   Time remaining: 0S      Progress: 70%   Time elapsed: 0S   Time remaining: 0S      Progress: 80%   Time elapsed: 0S   Time remaining: 0S      Progress: 90%   Time elapsed: 0S   Time remaining: 0S      Progress: 100%   Time elapsed: 0S   Time remaining: 0S                                                                                   Completed 10 Tables in 0S  #> Return simulation results...Done!  qsur_1_5 #> $simulation #> $simulation$q_sur #>  [38;5;246m# A tibble: 3,653 × 5 [39m #>    run_01 run_02 run_03 run_04 run_05 #>      [3m [38;5;246m<dbl> [39m [23m   [3m [38;5;246m<dbl> [39m [23m   [3m [38;5;246m<dbl> [39m [23m   [3m [38;5;246m<dbl> [39m [23m   [3m [38;5;246m<dbl> [39m [23m #>  [38;5;250m 1 [39m  0.377  0.242  0.307  0.189  0.507 #>  [38;5;250m 2 [39m  0.082  0.051  0.065  0.036  0.139 #>  [38;5;250m 3 [39m  0.02   0.012  0.015  0.008  0.052 #>  [38;5;250m 4 [39m  0.005  0.003  0.004  0.002  0.025 #>  [38;5;250m 5 [39m  0.002  0.001  0.001  0.001  0.014 #>  [38;5;250m 6 [39m  0.001  0      0      0      0.009 #>  [38;5;250m 7 [39m  0      0      0      0      0.006 #>  [38;5;250m 8 [39m  0      0      0      0      0.004 #>  [38;5;250m 9 [39m  0      0      0      0      0.002 #>  [38;5;250m10 [39m  0      0      0      0      0.002 #>  [38;5;246m# … with 3,643 more rows [39m #>  #>  #> $run_info #> $run_info$simulation_log #>  [38;5;246m# A tibble: 1 × 5 [39m #>   run_started         run_finished        run_time project_path          run_p…¹ #>    [3m [38;5;246m<dttm> [39m [23m               [3m [38;5;246m<dttm> [39m [23m               [3m [38;5;246m<chr> [39m [23m     [3m [38;5;246m<chr> [39m [23m                  [3m [38;5;246m<chr> [39m [23m   #>  [38;5;250m1 [39m 2023-07-19  [38;5;246m11:08:31 [39m 2023-07-19  [38;5;246m11:09:27 [39m 56S      C:/Users/schuerz/Doc… C:/Use… #>  [38;5;246m# … with abbreviated variable name ¹​run_path [39m #>  #> $run_info$simulation_period #>  [38;5;246m# A tibble: 1 × 4 [39m #>   start_date end_date   years_skip start_date_print #>    [3m [38;5;246m<date> [39m [23m      [3m [38;5;246m<date> [39m [23m           [3m [38;5;246m<int> [39m [23m  [3m [38;5;246m<date> [39m [23m           #>  [38;5;250m1 [39m 2000-01-01 2012-12-31          3  [31mNA [39m               #>  #> $run_info$output_definition #>  [38;5;246m# A tibble: 3 × 6 [39m #>   name  file_full          file       time_interval variable unit  #>    [3m [38;5;246m<chr> [39m [23m  [3m [38;5;246m<chr> [39m [23m               [3m [38;5;246m<chr> [39m [23m       [3m [38;5;246m<chr> [39m [23m          [3m [38;5;246m<chr> [39m [23m     [3m [38;5;246m<chr> [39m [23m #>  [38;5;250m1 [39m q_cha channel_sd_day.txt channel_sd day           flo_out  1     #>  [38;5;250m2 [39m q_sur basin_wb_day.txt   basin_wb   day           surq_gen 1     #>  [38;5;250m3 [39m q_lat basin_wb_day.txt   basin_wb   day           latq     1"},{"path":"https://chrisschuerz.github.io/SWATrunR/articles/SWATrunR.html","id":"alternative-paths-for-running-and-saving-simulations","dir":"Articles","previous_headings":"","what":"Alternative paths for running and saving simulations","title":"Getting started with SWATrunR","text":"Default run_swat*() performs simulations folder .model_run generated SWAT project folder incrementally saves simulation outputs folder named input argument save_file SWAT project folder. run_swat*() provides option simulations performed different location simulation results saved path different project_path. two options can defined input arguments run_path save_path. options can useful original project example located small slow drive simulations saving simulations performed different drive storage limiting reading/writing much faster.","code":""},{"path":"https://chrisschuerz.github.io/SWATrunR/articles/SWATrunR.html","id":"adding-parameters-and-dates-to-outputs-quiet-option","dir":"Articles","previous_headings":"","what":"Adding parameters and dates to outputs, quiet option","title":"Getting started with SWATrunR","text":"cases can useful add date column parameter information simulation outputs. One example simulation output directly used optimization routine. output interest might vector simulated variable returning information obsolete. can activate options input arguments add_date add_parameter. quiet option can useful run_swat*() used specific workflows optimization. case showing , cases useful information run progress, simulation annoying. quiet = TRUE run_swat*() remains quiet running.","code":""},{"path":"https://chrisschuerz.github.io/SWATrunR/articles/SWATrunR.html","id":"keeping-and-refreshing-the-simulation-folders","dir":"Articles","previous_headings":"","what":"Keeping and refreshing the simulation folders","title":"Getting started with SWATrunR","text":"simulation folders default deleted simulations successful. may however want keep simulation folder simulation performed, e.g. want check simulation folder errors, want keep simulation folder uses certain model parameterization. folder deleted successful simulation define input argument keep_folder = TRUE. set keep_folder = TRUE refresh = FALSE can additionally force new model runs one successful round model runs rewrite .model_run folder. option can make sense SWAT2012 projects used carefully! Generating many parallel thread folders large SWAT2012 projects can time consuming reusing parallel folders can usefule. case parameter changes performed previous simulations still contained thread folders .model_run. can problem rerunning SWAT2012 project parameters previous runs. Parameters changed previous runs changed new runs keep last changes assigned parameters (different thread folders!).","code":""},{"path":[]},{"path":"https://chrisschuerz.github.io/SWATrunR/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Christoph Schuerz. Author, maintainer.","code":""},{"path":"https://chrisschuerz.github.io/SWATrunR/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Schürz C (2019). SWATplusR: Running SWAT2012 SWAT+ Projects R. doi:10.5281/zenodo.3373859, R package version 0.2.7, https://github.com/chrisschuerz/SWATplusR.","code":"@Manual{,   author = {Christoph Schürz},   title = {SWATplusR: Running SWAT2012 and SWAT+ Projects in R},   year = {2019},   note = {R package version 0.2.7},   doi = {10.5281/zenodo.3373859},   url = {https://github.com/chrisschuerz/SWATplusR}, }"},{"path":[]},{"path":"https://chrisschuerz.github.io/SWATrunR/CODE_OF_CONDUCT.html","id":"our-pledge","dir":"","previous_headings":"","what":"Our Pledge","title":"Contributor Covenant Code of Conduct","text":"interest fostering open welcoming environment, contributors maintainers pledge making participation project community harassment-free experience everyone, regardless age, body size, disability, ethnicity, sex characteristics, gender identity expression, level experience, education, socio-economic status, nationality, personal appearance, race, religion, sexual identity orientation.","code":""},{"path":"https://chrisschuerz.github.io/SWATrunR/CODE_OF_CONDUCT.html","id":"our-standards","dir":"","previous_headings":"","what":"Our Standards","title":"Contributor Covenant Code of Conduct","text":"Examples behavior contributes creating positive environment include: Using welcoming inclusive language respectful differing viewpoints experiences Gracefully accepting constructive criticism Focusing best community Showing empathy towards community members Examples unacceptable behavior participants include: use sexualized language imagery unwelcome sexual attention advances Trolling, insulting/derogatory comments, personal political attacks Public private harassment Publishing others’ private information, physical electronic address, without explicit permission conduct reasonably considered inappropriate professional setting","code":""},{"path":"https://chrisschuerz.github.io/SWATrunR/CODE_OF_CONDUCT.html","id":"our-responsibilities","dir":"","previous_headings":"","what":"Our Responsibilities","title":"Contributor Covenant Code of Conduct","text":"Project maintainers responsible clarifying standards acceptable behavior expected take appropriate fair corrective action response instances unacceptable behavior. Project maintainers right responsibility remove, edit, reject comments, commits, code, wiki edits, issues, contributions aligned Code Conduct, ban temporarily permanently contributor behaviors deem inappropriate, threatening, offensive, harmful.","code":""},{"path":"https://chrisschuerz.github.io/SWATrunR/CODE_OF_CONDUCT.html","id":"scope","dir":"","previous_headings":"","what":"Scope","title":"Contributor Covenant Code of Conduct","text":"Code Conduct applies within project spaces public spaces individual representing project community. Examples representing project community include using official project e-mail address, posting via official social media account, acting appointed representative online offline event. Representation project may defined clarified project maintainers.","code":""},{"path":"https://chrisschuerz.github.io/SWATrunR/CODE_OF_CONDUCT.html","id":"enforcement","dir":"","previous_headings":"","what":"Enforcement","title":"Contributor Covenant Code of Conduct","text":"Instances abusive, harassing, otherwise unacceptable behavior may reported contacting project team c.schuerz@posteo.org. complaints reviewed investigated result response deemed necessary appropriate circumstances. project team obligated maintain confidentiality regard reporter incident. details specific enforcement policies may posted separately. Project maintainers follow enforce Code Conduct good faith may face temporary permanent repercussions determined members project’s leadership.","code":""},{"path":"https://chrisschuerz.github.io/SWATrunR/CODE_OF_CONDUCT.html","id":"attribution","dir":"","previous_headings":"","what":"Attribution","title":"Contributor Covenant Code of Conduct","text":"Code Conduct adapted Contributor Covenant, version 1.4, available https://www.contributor-covenant.org/version/1/4/code--conduct.html answers common questions code conduct, see https://www.contributor-covenant.org/faq","code":""},{"path":"https://chrisschuerz.github.io/SWATrunR/index.html","id":"swatrunr-","dir":"","previous_headings":"","what":"Running SWAT2012 and SWAT+ Projects in R","title":"Running SWAT2012 and SWAT+ Projects in R","text":"SWATrunR integrates SWAT2012 SWAT+ projects R modeling workflows. SWATrunR’s key function execute SWAT project folder located hard drive return simulation results R. Running SWAT models SWATrunR allows user control essential parameters simulation run, model parameter changes, simulation periods, time intervals output printing. formatting SWAT simulation outputs R follow tidy data principle. clear output data structure facilitates efficient processing simulation outputs data analysis workflow R promotes compatibility many R packages. SWATrunR provides great features, parallel processing run simulations different parameter sets parallel, incremental writing simulation outputs SQLite data bases store large outputs safely perform computationally expensive simulation experiments.","code":""},{"path":"https://chrisschuerz.github.io/SWATrunR/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Running SWAT2012 and SWAT+ Projects in R","text":"can install SWATrunR package’s GitHub repository: SWATrunR constantly updated new features find way R package time time. updates fixed issues documented Changelog. Bugs open issues documented R package’s issue section. encounter issues, want suggest new features encourage . Please also check closed issues see question related anything already solved .","code":"# If the package remotes is not installed run first: install.packages(\"remotes\")  remotes::install_github(\"chrisschuerz/SWATrunR\")"},{"path":"https://chrisschuerz.github.io/SWATrunR/index.html","id":"package-workflow","dir":"","previous_headings":"","what":"Package workflow","title":"Running SWAT2012 and SWAT+ Projects in R","text":"run_swatplus() run_swat2012() core SWATrunR functions perform simulations SWAT project folder located local hard drive return simulation results back R environment. simulation outputs returned R defined function define_output(). define_output() translates easily readable output definitions commands extract simulation results SWAT+ SWAT2012 simulation run, maintaining syntax models. SWATdata accompanying R package provides SWAT+ SWAT2012 demo projects can instantly start working SWATrunR. load_demo() can access SWAT demo projects useful demo data observation data. load_swat_run() scan_swat_run() can load just get overview SWAT simulations stored incrementally SQLite databases.","code":""},{"path":"https://chrisschuerz.github.io/SWATrunR/index.html","id":"getting-started","dir":"","previous_headings":"","what":"Getting started","title":"Running SWAT2012 and SWAT+ Projects in R","text":"Get started page good starting point learn basics working SWAT project R. covers following basics: Loading demo project >> Performing first SWAT model runs R >> Performing parameter changes SWAT run >> Saving loading SWAT simulations >> short overview run_swat*() input arguments >> Reference pages document functions SWATrunR provide descriptions function input arguments short examples use functions. Additional materials usage SWATrunR short tutorials can integrate SWATrunR typical SWAT modelling workflows added Articles section time.","code":""},{"path":"https://chrisschuerz.github.io/SWATrunR/reference/add_id.html","id":null,"dir":"Reference","previous_headings":"","what":"Add id column to output table — add_id","title":"Add id column to output table — add_id","text":"Add id column output table","code":""},{"path":"https://chrisschuerz.github.io/SWATrunR/reference/add_id.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add id column to output table — add_id","text":"","code":"add_id(tbl)"},{"path":"https://chrisschuerz.github.io/SWATrunR/reference/add_id.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add id column to output table — add_id","text":"tbl Output table read SWAT model results","code":""},{"path":"https://chrisschuerz.github.io/SWATrunR/reference/add_obj.html","id":null,"dir":"Reference","previous_headings":"","what":"Add the unit values for which objects the parameter change should be applied — add_obj","title":"Add the unit values for which objects the parameter change should be applied — add_obj","text":"Add unit values objects parameter change applied","code":""},{"path":"https://chrisschuerz.github.io/SWATrunR/reference/add_obj.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add the unit values for which objects the parameter change should be applied — add_obj","text":"","code":"add_obj(par_cal, unit, unit_all)"},{"path":"https://chrisschuerz.github.io/SWATrunR/reference/add_obj.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add the unit values for which objects the parameter change should be applied — add_obj","text":"par_cal calibration.cal tibble parameter unit Character string defines condition object units (ids e.g. hru objects) unit_all List vectors define unit ids object types.","code":""},{"path":"https://chrisschuerz.github.io/SWATrunR/reference/add_run_info.html","id":null,"dir":"Reference","previous_headings":"","what":"Prepare run info for the simulation experiment — add_run_info","title":"Prepare run info for the simulation experiment — add_run_info","text":"Prepare run info simulation experiment","code":""},{"path":"https://chrisschuerz.github.io/SWATrunR/reference/add_run_info.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prepare run info for the simulation experiment — add_run_info","text":"","code":"add_run_info(run_info, sim_result, run_index)"},{"path":"https://chrisschuerz.github.io/SWATrunR/reference/add_run_info.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prepare run info for the simulation experiment — add_run_info","text":"run_info Existing list run information sim_result List simulation results SWAT model runs run_index Vector run IDs","code":""},{"path":"https://chrisschuerz.github.io/SWATrunR/reference/add_slope.html","id":null,"dir":"Reference","previous_headings":"","what":"Add condition lines based on slope — add_slope","title":"Add condition lines based on slope — add_slope","text":"Add condition lines based slope","code":""},{"path":"https://chrisschuerz.github.io/SWATrunR/reference/add_slope.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add condition lines based on slope — add_slope","text":"","code":"add_slope(cond, cond_tbl)"},{"path":"https://chrisschuerz.github.io/SWATrunR/reference/add_slope.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add condition lines based on slope — add_slope","text":"cond Character string defines condition variable 'var' cond_tbl Tibble conditions defined based soil land use","code":""},{"path":"https://chrisschuerz.github.io/SWATrunR/reference/add_soil_luse.html","id":null,"dir":"Reference","previous_headings":"","what":"Add condition lines based on soil and land use variables — add_soil_luse","title":"Add condition lines based on soil and land use variables — add_soil_luse","text":"Add condition lines based soil land use variables","code":""},{"path":"https://chrisschuerz.github.io/SWATrunR/reference/add_soil_luse.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add condition lines based on soil and land use variables — add_soil_luse","text":"","code":"add_soil_luse(cond, var, cond_all)"},{"path":"https://chrisschuerz.github.io/SWATrunR/reference/add_soil_luse.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add condition lines based on soil and land use variables — add_soil_luse","text":"cond Character string defines condition variable 'var' var Character string. Variable condition applied cond_all List vectors define possible values condition variables.","code":""},{"path":"https://chrisschuerz.github.io/SWATrunR/reference/add_suffix_to_duplicate.html","id":null,"dir":"Reference","previous_headings":"","what":"Add suffix value to duplicated column names of SWAT+ output files.. — add_suffix_to_duplicate","title":"Add suffix value to duplicated column names of SWAT+ output files.. — add_suffix_to_duplicate","text":"Add suffix value duplicated column names SWAT+ output files..","code":""},{"path":"https://chrisschuerz.github.io/SWATrunR/reference/add_suffix_to_duplicate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add suffix value to duplicated column names of SWAT+ output files.. — add_suffix_to_duplicate","text":"","code":"add_suffix_to_duplicate(col_name)"},{"path":"https://chrisschuerz.github.io/SWATrunR/reference/add_suffix_to_duplicate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add suffix value to duplicated column names of SWAT+ output files.. — add_suffix_to_duplicate","text":"col_name Vector column names","code":""},{"path":"https://chrisschuerz.github.io/SWATrunR/reference/add_value_range.html","id":null,"dir":"Reference","previous_headings":"","what":"Add the value range 'val' for the condition variable 'var' for a parameter to\r\ncalibration.cal — add_value_range","title":"Add the value range 'val' for the condition variable 'var' for a parameter to\r\ncalibration.cal — add_value_range","text":"Add value range 'val' condition variable 'var' parameter calibration.cal","code":""},{"path":"https://chrisschuerz.github.io/SWATrunR/reference/add_value_range.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add the value range 'val' for the condition variable 'var' for a parameter to\r\ncalibration.cal — add_value_range","text":"","code":"add_value_range(par_cal, val, var)"},{"path":"https://chrisschuerz.github.io/SWATrunR/reference/add_value_range.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add the value range 'val' for the condition variable 'var' for a parameter to\r\ncalibration.cal — add_value_range","text":"par_cal calibration.cal tibble parameter val Vector defines value range var Character string. Name variable","code":""},{"path":"https://chrisschuerz.github.io/SWATrunR/reference/as_num.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert character string to numeric without displaying warnings — as_num","title":"Convert character string to numeric without displaying warnings — as_num","text":"Convert character string numeric without displaying warnings","code":""},{"path":"https://chrisschuerz.github.io/SWATrunR/reference/as_num.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert character string to numeric without displaying warnings — as_num","text":"","code":"as_num(chr)"},{"path":"https://chrisschuerz.github.io/SWATrunR/reference/as_num.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert character string to numeric without displaying warnings — as_num","text":"chr Character string","code":""},{"path":"https://chrisschuerz.github.io/SWATrunR/reference/build_constraint_tbl.html","id":null,"dir":"Reference","previous_headings":"","what":"Build the parameter constraint from the rules in the parameter names — build_constraint_tbl","title":"Build the parameter constraint from the rules in the parameter names — build_constraint_tbl","text":"Build parameter constraint rules parameter names","code":""},{"path":"https://chrisschuerz.github.io/SWATrunR/reference/build_constraint_tbl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Build the parameter constraint from the rules in the parameter names — build_constraint_tbl","text":"","code":"build_constraint_tbl(cons_i, bool_op)"},{"path":"https://chrisschuerz.github.io/SWATrunR/reference/build_constraint_tbl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Build the parameter constraint from the rules in the parameter names — build_constraint_tbl","text":"cons_i Text string defines constraint bool_op Vector strings define different possible boolean operations","code":""},{"path":"https://chrisschuerz.github.io/SWATrunR/reference/build_expression.html","id":null,"dir":"Reference","previous_headings":"","what":"Build filter expressions from the parameter constraint table' — build_expression","title":"Build filter expressions from the parameter constraint table' — build_expression","text":"Build filter expressions parameter constraint table'","code":""},{"path":"https://chrisschuerz.github.io/SWATrunR/reference/build_expression.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Build filter expressions from the parameter constraint table' — build_expression","text":"","code":"build_expression(constraints)"},{"path":"https://chrisschuerz.github.io/SWATrunR/reference/build_expression.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Build filter expressions from the parameter constraint table' — build_expression","text":"constraints Constraint table","code":""},{"path":"https://chrisschuerz.github.io/SWATrunR/reference/build_model_run.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate folder structure for parallel SWAT execution — build_model_run","title":"Generate folder structure for parallel SWAT execution — build_model_run","text":"Generate folder structure parallel SWAT execution","code":""},{"path":"https://chrisschuerz.github.io/SWATrunR/reference/build_model_run.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate folder structure for parallel SWAT execution — build_model_run","text":"","code":"build_model_run(project_path, run_path, n_thread, os, swat_vers, quiet)"},{"path":"https://chrisschuerz.github.io/SWATrunR/reference/build_model_run.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate folder structure for parallel SWAT execution — build_model_run","text":"project_path Path SWAT project folder (.e. TxtInOut) run_path Path '.model_run' folder built. NULL executable model built 'project_path' n_thread Number parallel threads created. number must accordance number cores PC swat_vers Character string defines SWAT version. Either \"2012\" \"plus\". quiet Logical. Defines messages written function executed quietly.","code":""},{"path":"https://chrisschuerz.github.io/SWATrunR/reference/check_dates.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if input start and end dates are given in the weather inputs — check_dates","title":"Check if input start and end dates are given in the weather inputs — check_dates","text":"Check input start end dates given weather inputs","code":""},{"path":"https://chrisschuerz.github.io/SWATrunR/reference/check_dates.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if input start and end dates are given in the weather inputs — check_dates","text":"","code":"check_dates(project_path, model_setup)"},{"path":"https://chrisschuerz.github.io/SWATrunR/reference/check_dates.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if input start and end dates are given in the weather inputs — check_dates","text":"project_path Path SWAT project folder (.e. TxtInOut) model_setup list model setup features","code":""},{"path":"https://chrisschuerz.github.io/SWATrunR/reference/check_parameter.html","id":null,"dir":"Reference","previous_headings":"","what":"Checks if all provided parameters exist in 'Absolute_SWAT_Values' — check_parameter","title":"Checks if all provided parameters exist in 'Absolute_SWAT_Values' — check_parameter","text":"Checks provided parameters exist 'Absolute_SWAT_Values'","code":""},{"path":"https://chrisschuerz.github.io/SWATrunR/reference/check_parameter.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Checks if all provided parameters exist in 'Absolute_SWAT_Values' — check_parameter","text":"","code":"check_parameter(parameter, abs_swat_val)"},{"path":"https://chrisschuerz.github.io/SWATrunR/reference/check_parameter.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Checks if all provided parameters exist in 'Absolute_SWAT_Values' — check_parameter","text":"parameter Named parameter vector parameter table abs_swat_val (optional) path custom 'Absolute_SWAT_Value' file","code":""},{"path":"https://chrisschuerz.github.io/SWATrunR/reference/check_revision.html","id":null,"dir":"Reference","previous_headings":"","what":"Check the Revision of used SWAT+ executable — check_revision","title":"Check the Revision of used SWAT+ executable — check_revision","text":"Check Revision used SWAT+ executable","code":""},{"path":"https://chrisschuerz.github.io/SWATrunR/reference/check_revision.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check the Revision of used SWAT+ executable — check_revision","text":"","code":"check_revision(project_path, run_path, os, swat_exe)"},{"path":"https://chrisschuerz.github.io/SWATrunR/reference/check_revision.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check the Revision of used SWAT+ executable — check_revision","text":"project_path Path SWAT project folder (.e. TxtInOut) run_path Path '.model_run' folder built. NULL executable model built 'project_path' os Character string gives operationg system swat_exe Character string gives name SWAT executable.","code":""},{"path":"https://chrisschuerz.github.io/SWATrunR/reference/check_run_index.html","id":null,"dir":"Reference","previous_headings":"","what":"Checks the provided run_index vector in accordance with provided parameters — check_run_index","title":"Checks the provided run_index vector in accordance with provided parameters — check_run_index","text":"Checks provided run_index vector accordance provided parameters","code":""},{"path":"https://chrisschuerz.github.io/SWATrunR/reference/check_run_index.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Checks the provided run_index vector in accordance with provided parameters — check_run_index","text":"","code":"check_run_index(run_index, parameter)"},{"path":"https://chrisschuerz.github.io/SWATrunR/reference/check_run_index.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Checks the provided run_index vector in accordance with provided parameters — check_run_index","text":"run_index Numeric vector subset provided parameter sets parameter Named parameter vector parameter table","code":""},{"path":"https://chrisschuerz.github.io/SWATrunR/reference/check_swatplus_parameter.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if the names of the defined parameters are available in 'cal_parms.cal'. — check_swatplus_parameter","title":"Check if the names of the defined parameters are available in 'cal_parms.cal'. — check_swatplus_parameter","text":"Check names defined parameters available 'cal_parms.cal'.","code":""},{"path":"https://chrisschuerz.github.io/SWATrunR/reference/check_swatplus_parameter.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if the names of the defined parameters are available in 'cal_parms.cal'. — check_swatplus_parameter","text":"","code":"check_swatplus_parameter(project_path, parameter)"},{"path":"https://chrisschuerz.github.io/SWATrunR/reference/check_swatplus_parameter.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if the names of the defined parameters are available in 'cal_parms.cal'. — check_swatplus_parameter","text":"project_path Path SWAT+ project parameter Model parameter data set","code":""},{"path":"https://chrisschuerz.github.io/SWATrunR/reference/cio_to_numeric.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper function to convert file.cio entries to numerics — cio_to_numeric","title":"Helper function to convert file.cio entries to numerics — cio_to_numeric","text":"Helper function convert file.cio entries numerics","code":""},{"path":"https://chrisschuerz.github.io/SWATrunR/reference/cio_to_numeric.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper function to convert file.cio entries to numerics — cio_to_numeric","text":"","code":"cio_to_numeric(cio_entry)"},{"path":"https://chrisschuerz.github.io/SWATrunR/reference/cio_to_numeric.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper function to convert file.cio entries to numerics — cio_to_numeric","text":"cio_entry Line file.cio","code":""},{"path":"https://chrisschuerz.github.io/SWATrunR/reference/collect_cols.html","id":null,"dir":"Reference","previous_headings":"","what":"Collect selected columns from table in SQLite database — collect_cols","title":"Collect selected columns from table in SQLite database — collect_cols","text":"Collect selected columns table SQLite database","code":""},{"path":"https://chrisschuerz.github.io/SWATrunR/reference/collect_cols.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Collect selected columns from table in SQLite database — collect_cols","text":"","code":"collect_cols(col_name, tbl_name, db, handle_conn = TRUE)"},{"path":"https://chrisschuerz.github.io/SWATrunR/reference/collect_cols.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Collect selected columns from table in SQLite database — collect_cols","text":"col_name Character vector defines column names tbl_name String defines name table collect columns db SQLite database connection handle_conn Logical value decide whether data base connected disconnected","code":""},{"path":"https://chrisschuerz.github.io/SWATrunR/reference/compare_tables.html","id":null,"dir":"Reference","previous_headings":"","what":"Update a time stamp in the run_log table — compare_tables","title":"Update a time stamp in the run_log table — compare_tables","text":"Update time stamp run_log table","code":""},{"path":"https://chrisschuerz.github.io/SWATrunR/reference/compare_tables.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Update a time stamp in the run_log table — compare_tables","text":"","code":"compare_tables(tbl_sim, tbl_df, txt, convert = FALSE)"},{"path":"https://chrisschuerz.github.io/SWATrunR/reference/compare_tables.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Update a time stamp in the run_log table — compare_tables","text":"tbl_sim Table defined current simulation tbl_df Corresponding table saved data bases txt Text string added error message. save_path Path sql data base incrementally saving simulations run_index IDs parameter sets simulations run","code":""},{"path":"https://chrisschuerz.github.io/SWATrunR/reference/define_output.html","id":null,"dir":"Reference","previous_headings":"","what":"Define SWAT output variables — define_output","title":"Define SWAT output variables — define_output","text":"Define SWAT output variables extracted SWAT model execution returned R. required use function pass desired outputs variable output function calls run_swat2012 run_swatplus. See examples use output definition together run_swat2012 run_swatplus. , comprehensive examples provided package's 'Get Started' page section 'First SWAT model runs.","code":""},{"path":"https://chrisschuerz.github.io/SWATrunR/reference/define_output.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Define SWAT output variables — define_output","text":"","code":"define_output(file, variable = NULL, unit = NULL)"},{"path":"https://chrisschuerz.github.io/SWATrunR/reference/define_output.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Define SWAT output variables — define_output","text":"file Character string. SWAT output file read. (Valid inputs 'rch', 'sub', 'hru', 'sed' respective SWAT2012 output files 'output.rch', 'output.sub', output.hru', 'output.sed'. respective SWAT+ output files see available options 'print.prt' file SWAT+ project). variable Character string. Output variable extracted respective SWAT output file defined file. correct definition SWAT2012 output variables please use variable documented SWAT Output Data Documentation. SWAT+ output variables please use header names respective output table, without units! Optionally, column number variable respective output file can provided. CAUTION: spaces (e.g. P TOT) must replaced underscores (P_TOT). unit Numeric vector. spatial unit (e.g. reach, subbasin, HRU) defined columns 'RCH', 'SUB', 'HRU' respective SWAT2012 output file 'unit' column SWAT+ output file outputs extracted.","code":""},{"path":"https://chrisschuerz.github.io/SWATrunR/reference/define_output.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Define SWAT output variables — define_output","text":"","code":"# A single variable can be defined as follows (e.g. \"FLOW_OUT\" for # the reaches 1 and 5):  out_flow <- define_output(file = \"rch\",                           variable = \"FLOW_OUT\",                           unit = c(1,5)) # In this case the the variable name of the returned output is then # the same as defined with 'variable', here \"FLOW_OUT\"  # If a custom variable name is preferred for the returned output, # the output must be defined as named list:  out_flow <- list(discharge = define_output(file = \"rch\",                                            variable = \"FLOW_OUT\",                                            unit = c(1,5)))   # Define the discharge for the RCH units 1 to 5 and the # nitrate-nitrogen load and ET for the unit 5:  out_def <- list(flow = define_output(file = \"rch\",                                      variable = \"FLOW_OUT\",                                      unit = 1:5),                 no3  = define_output(file = \"rch\",                                      variable = \"NO3_OUT\",                                      unit = 5),                 et_a = define_output(file = \"sub\",                                      variable = \"ET\",                                      unit = 5))"},{"path":"https://chrisschuerz.github.io/SWATrunR/reference/display_progress.html","id":null,"dir":"Reference","previous_headings":"","what":"Display the progress if iterative processes — display_progress","title":"Display the progress if iterative processes — display_progress","text":"Display progress iterative processes","code":""},{"path":"https://chrisschuerz.github.io/SWATrunR/reference/display_progress.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Display the progress if iterative processes — display_progress","text":"","code":"display_progress(n, nmax, t0, word)"},{"path":"https://chrisschuerz.github.io/SWATrunR/reference/display_progress.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Display the progress if iterative processes — display_progress","text":"n Iteration step nmax Number iterations t0 initial time step","code":""},{"path":"https://chrisschuerz.github.io/SWATrunR/reference/display_progress_pct.html","id":null,"dir":"Reference","previous_headings":"","what":"Display the progress if iterative processes as percentage value — display_progress_pct","title":"Display the progress if iterative processes as percentage value — display_progress_pct","text":"Display progress iterative processes percentage value","code":""},{"path":"https://chrisschuerz.github.io/SWATrunR/reference/display_progress_pct.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Display the progress if iterative processes as percentage value — display_progress_pct","text":"","code":"display_progress_pct(n, nmax, t0)"},{"path":"https://chrisschuerz.github.io/SWATrunR/reference/display_progress_pct.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Display the progress if iterative processes as percentage value — display_progress_pct","text":"n Iteration step nmax Number iterations t0 initial time step","code":""},{"path":"https://chrisschuerz.github.io/SWATrunR/reference/evaluate_expression.html","id":null,"dir":"Reference","previous_headings":"","what":"Evaluate the expression defined for a variable in 'output' — evaluate_expression","title":"Evaluate the expression defined for a variable in 'output' — evaluate_expression","text":"Evaluate expression defined variable 'output'","code":""},{"path":"https://chrisschuerz.github.io/SWATrunR/reference/evaluate_expression.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Evaluate the expression defined for a variable in 'output' — evaluate_expression","text":"","code":"evaluate_expression(table, expr)"},{"path":"https://chrisschuerz.github.io/SWATrunR/reference/evaluate_expression.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Evaluate the expression defined for a variable in 'output' — evaluate_expression","text":"table Table dplyr expression applied expr Expression applied table","code":""},{"path":"https://chrisschuerz.github.io/SWATrunR/reference/extract_non_var_cols.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract date, plant_name, p columns from the respective simulation outputs — extract_non_var_cols","title":"Extract date, plant_name, p columns from the respective simulation outputs — extract_non_var_cols","text":"Extract date, plant_name, p columns respective simulation outputs","code":""},{"path":"https://chrisschuerz.github.io/SWATrunR/reference/extract_non_var_cols.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract date, plant_name, p columns from the respective simulation outputs — extract_non_var_cols","text":"","code":"extract_non_var_cols(tbl)"},{"path":"https://chrisschuerz.github.io/SWATrunR/reference/extract_non_var_cols.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract date, plant_name, p columns from the respective simulation outputs — extract_non_var_cols","text":"tbl Table simulation results one SWAT output file","code":""},{"path":"https://chrisschuerz.github.io/SWATrunR/reference/extract_swat2012_output_i.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract and rearrange output variables of SWAT2012 outputs — extract_swat2012_output_i","title":"Extract and rearrange output variables of SWAT2012 outputs — extract_swat2012_output_i","text":"Extract rearrange output variables SWAT2012 outputs","code":""},{"path":"https://chrisschuerz.github.io/SWATrunR/reference/extract_swat2012_output_i.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract and rearrange output variables of SWAT2012 outputs — extract_swat2012_output_i","text":"","code":"extract_swat2012_output_i(out_tbl_i, out_def_i)"},{"path":"https://chrisschuerz.github.io/SWATrunR/reference/extract_swat2012_output_i.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract and rearrange output variables of SWAT2012 outputs — extract_swat2012_output_i","text":"out_tbl_i ith output table read SWAT2012 simulations out_def_i ith output definition table","code":""},{"path":"https://chrisschuerz.github.io/SWATrunR/reference/filter_mon.html","id":null,"dir":"Reference","previous_headings":"","what":"Filter function to extract only relevant month entries in SWAT2012 outputs — filter_mon","title":"Filter function to extract only relevant month entries in SWAT2012 outputs — filter_mon","text":"Filter function extract relevant month entries SWAT2012 outputs","code":""},{"path":"https://chrisschuerz.github.io/SWATrunR/reference/filter_mon.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Filter function to extract only relevant month entries in SWAT2012 outputs — filter_mon","text":"","code":"filter_mon(mon)"},{"path":"https://chrisschuerz.github.io/SWATrunR/reference/filter_mon.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Filter function to extract only relevant month entries in SWAT2012 outputs — filter_mon","text":"mon Month column output table vector","code":""},{"path":"https://chrisschuerz.github.io/SWATrunR/reference/find_first_line.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper function to find the position of the fist line of the table in a file — find_first_line","title":"Helper function to find the position of the fist line of the table in a file — find_first_line","text":"Helper function find position fist line table file","code":""},{"path":"https://chrisschuerz.github.io/SWATrunR/reference/find_first_line.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper function to find the position of the fist line of the table in a file — find_first_line","text":"","code":"find_first_line(out_file, thread_path)"},{"path":"https://chrisschuerz.github.io/SWATrunR/reference/find_first_line.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper function to find the position of the fist line of the table in a file — find_first_line","text":"out_file output files read thread_path Path respective thread SWAT executed","code":""},{"path":"https://chrisschuerz.github.io/SWATrunR/reference/finish_progress.html","id":null,"dir":"Reference","previous_headings":"","what":"Print message for completed process — finish_progress","title":"Print message for completed process — finish_progress","text":"Print message completed process","code":""},{"path":"https://chrisschuerz.github.io/SWATrunR/reference/finish_progress.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print message for completed process — finish_progress","text":"","code":"finish_progress(nmax, t0, word)"},{"path":"https://chrisschuerz.github.io/SWATrunR/reference/finish_progress.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print message for completed process — finish_progress","text":"nmax Number iterations t0 initial time step","code":""},{"path":"https://chrisschuerz.github.io/SWATrunR/reference/format_mgt_line.html","id":null,"dir":"Reference","previous_headings":"","what":"Format a line in the mgt table for writing in correct format to file — format_mgt_line","title":"Format a line in the mgt table for writing in correct format to file — format_mgt_line","text":"Format line mgt table writing correct format file","code":""},{"path":"https://chrisschuerz.github.io/SWATrunR/reference/format_mgt_line.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Format a line in the mgt table for writing in correct format to file — format_mgt_line","text":"","code":"format_mgt_line(mgt_line)"},{"path":"https://chrisschuerz.github.io/SWATrunR/reference/format_mgt_line.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Format a line in the mgt table for writing in correct format to file — format_mgt_line","text":"mgt_line line mgt table formatted character strings","code":""},{"path":"https://chrisschuerz.github.io/SWATrunR/reference/format_swat2012_parameter.html","id":null,"dir":"Reference","previous_headings":"","what":"Translate the parameter inputs into a parameter input table and a separarate\r\ntable providing the file constraints and the filter expressions for the\r\nrespective parameter — format_swat2012_parameter","title":"Translate the parameter inputs into a parameter input table and a separarate\r\ntable providing the file constraints and the filter expressions for the\r\nrespective parameter — format_swat2012_parameter","text":"Translate parameter inputs parameter input table separarate table providing file constraints filter expressions respective parameter","code":""},{"path":"https://chrisschuerz.github.io/SWATrunR/reference/format_swat2012_parameter.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Translate the parameter inputs into a parameter input table and a separarate\r\ntable providing the file constraints and the filter expressions for the\r\nrespective parameter — format_swat2012_parameter","text":"","code":"format_swat2012_parameter(parameter, swat_vers)"},{"path":"https://chrisschuerz.github.io/SWATrunR/reference/format_swat2012_parameter.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Translate the parameter inputs into a parameter input table and a separarate\r\ntable providing the file constraints and the filter expressions for the\r\nrespective parameter — format_swat2012_parameter","text":"parameter Model parameters named vector tibble","code":""},{"path":"https://chrisschuerz.github.io/SWATrunR/reference/format_swatplus_parameter.html","id":null,"dir":"Reference","previous_headings":"","what":"Translate the parameter inputs into a parameter input table and a separarate\r\ntable providing the file constraints and the filter expressions for the\r\nrespective parameter — format_swatplus_parameter","title":"Translate the parameter inputs into a parameter input table and a separarate\r\ntable providing the file constraints and the filter expressions for the\r\nrespective parameter — format_swatplus_parameter","text":"Translate parameter inputs parameter input table separarate table providing file constraints filter expressions respective parameter","code":""},{"path":"https://chrisschuerz.github.io/SWATrunR/reference/format_swatplus_parameter.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Translate the parameter inputs into a parameter input table and a separarate\r\ntable providing the file constraints and the filter expressions for the\r\nrespective parameter — format_swatplus_parameter","text":"","code":"format_swatplus_parameter(parameter)"},{"path":"https://chrisschuerz.github.io/SWATrunR/reference/format_swatplus_parameter.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Translate the parameter inputs into a parameter input table and a separarate\r\ntable providing the file constraints and the filter expressions for the\r\nrespective parameter — format_swatplus_parameter","text":"parameter Model parameters named vector tibble","code":""},{"path":"https://chrisschuerz.github.io/SWATrunR/reference/get_date_vector_2012.html","id":null,"dir":"Reference","previous_headings":"","what":"Create date vector from the date info in the model setup of a SWAT2012 project — get_date_vector_2012","title":"Create date vector from the date info in the model setup of a SWAT2012 project — get_date_vector_2012","text":"Create date vector date info model setup SWAT2012 project","code":""},{"path":"https://chrisschuerz.github.io/SWATrunR/reference/get_date_vector_2012.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create date vector from the date info in the model setup of a SWAT2012 project — get_date_vector_2012","text":"","code":"get_date_vector_2012(model_setup)"},{"path":"https://chrisschuerz.github.io/SWATrunR/reference/get_date_vector_2012.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create date vector from the date info in the model setup of a SWAT2012 project — get_date_vector_2012","text":"model_setup Model setup defined run_swat input parameters /SWAT model input files","code":""},{"path":"https://chrisschuerz.github.io/SWATrunR/reference/get_digit.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the number of digits that the run_XXX should have based on the number\r\nof rows in the parameter values table — get_digit","title":"Get the number of digits that the run_XXX should have based on the number\r\nof rows in the parameter values table — get_digit","text":"Get number digits run_XXX based number rows parameter values table","code":""},{"path":"https://chrisschuerz.github.io/SWATrunR/reference/get_digit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the number of digits that the run_XXX should have based on the number\r\nof rows in the parameter values table — get_digit","text":"","code":"get_digit(tbl)"},{"path":"https://chrisschuerz.github.io/SWATrunR/reference/get_digit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the number of digits that the run_XXX should have based on the number\r\nof rows in the parameter values table — get_digit","text":"tbl Parameter values table","code":""},{"path":"https://chrisschuerz.github.io/SWATrunR/reference/get_file_header.html","id":null,"dir":"Reference","previous_headings":"","what":"Read the column names for the SWAT output files — get_file_header","title":"Read the column names for the SWAT output files — get_file_header","text":"Read column names SWAT output files","code":""},{"path":"https://chrisschuerz.github.io/SWATrunR/reference/get_file_header.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read the column names for the SWAT output files — get_file_header","text":"","code":"get_file_header(output_i, tbl_pos, thread_path)"},{"path":"https://chrisschuerz.github.io/SWATrunR/reference/get_file_header.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read the column names for the SWAT output files — get_file_header","text":"thread_path Path respective thread SWAT executed output Output defined read SWAT model results fwf_pos Fixed width positions variables output files","code":""},{"path":"https://chrisschuerz.github.io/SWATrunR/reference/get_fwf_positions.html","id":null,"dir":"Reference","previous_headings":"","what":"Derive the fixed with positions of the columns in the SWAT output files — get_fwf_positions","title":"Derive the fixed with positions of the columns in the SWAT output files — get_fwf_positions","text":"Derive fixed positions columns SWAT output files","code":""},{"path":"https://chrisschuerz.github.io/SWATrunR/reference/get_fwf_positions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Derive the fixed with positions of the columns in the SWAT output files — get_fwf_positions","text":"","code":"get_fwf_positions(output_i, thread_path, tbl_pos)"},{"path":"https://chrisschuerz.github.io/SWATrunR/reference/get_fwf_positions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Derive the fixed with positions of the columns in the SWAT output files — get_fwf_positions","text":"thread_path Path respective thread SWAT executed output Output defined read SWAT model results","code":""},{"path":"https://chrisschuerz.github.io/SWATrunR/reference/get_hru_meta.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract the meta data from the header of a '.hru' file — get_hru_meta","title":"Extract the meta data from the header of a '.hru' file — get_hru_meta","text":"Extract meta data header '.hru' file","code":""},{"path":"https://chrisschuerz.github.io/SWATrunR/reference/get_hru_meta.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract the meta data from the header of a '.hru' file — get_hru_meta","text":"","code":"get_hru_meta(hru_file_i)"},{"path":"https://chrisschuerz.github.io/SWATrunR/reference/get_hru_meta.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract the meta data from the header of a '.hru' file — get_hru_meta","text":"hru_file_i 'th hru file (read character vector)","code":""},{"path":"https://chrisschuerz.github.io/SWATrunR/reference/get_os.html","id":null,"dir":"Reference","previous_headings":"","what":"Identify the OS (provided by Gabor Csardi) — get_os","title":"Identify the OS (provided by Gabor Csardi) — get_os","text":"Identify OS (provided Gabor Csardi)","code":""},{"path":"https://chrisschuerz.github.io/SWATrunR/reference/get_os.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Identify the OS (provided by Gabor Csardi) — get_os","text":"","code":"get_os()"},{"path":"https://chrisschuerz.github.io/SWATrunR/reference/get_par_name.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract the parameter name from one line in a list parameter file — get_par_name","title":"Extract the parameter name from one line in a list parameter file — get_par_name","text":"Extract parameter name one line list parameter file","code":""},{"path":"https://chrisschuerz.github.io/SWATrunR/reference/get_par_name.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract the parameter name from one line in a list parameter file — get_par_name","text":"","code":"get_par_name(chr, par_pos)"},{"path":"https://chrisschuerz.github.io/SWATrunR/reference/get_par_name.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract the parameter name from one line in a list parameter file — get_par_name","text":"chr Character string par_pos Logical vector provides row holds parameter ","code":""},{"path":"https://chrisschuerz.github.io/SWATrunR/reference/get_sol_texture.html","id":null,"dir":"Reference","previous_headings":"","what":"Acquire the object indices of from the respective object file. — get_sol_texture","title":"Acquire the object indices of from the respective object file. — get_sol_texture","text":"Acquire object indices respective object file.","code":""},{"path":"https://chrisschuerz.github.io/SWATrunR/reference/get_sol_texture.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Acquire the object indices of from the respective object file. — get_sol_texture","text":"","code":"get_sol_texture(file)"},{"path":"https://chrisschuerz.github.io/SWATrunR/reference/get_sol_texture.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Acquire the object indices of from the respective object file. — get_sol_texture","text":"file Path object file","code":""},{"path":"https://chrisschuerz.github.io/SWATrunR/reference/get_table.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract the parameter values that are provided in tabular form in a file — get_table","title":"Extract the parameter values that are provided in tabular form in a file — get_table","text":"Extract parameter values provided tabular form file","code":""},{"path":"https://chrisschuerz.github.io/SWATrunR/reference/get_table.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract the parameter values that are provided in tabular form in a file — get_table","text":"","code":"get_table(file_i, table_pos, col_pos, col_names, fun)"},{"path":"https://chrisschuerz.github.io/SWATrunR/reference/get_table.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract the parameter values that are provided in tabular form in a file — get_table","text":"file_i 'th parameter file file suffix table_pos Index vector indicating lines belong table col_pos Index vector separates individual table columns","code":""},{"path":"https://chrisschuerz.github.io/SWATrunR/reference/get_tbl_column.html","id":null,"dir":"Reference","previous_headings":"","what":"Acquire the object indices of from the respective object file. — get_tbl_column","title":"Acquire the object indices of from the respective object file. — get_tbl_column","text":"Acquire object indices respective object file.","code":""},{"path":"https://chrisschuerz.github.io/SWATrunR/reference/get_tbl_column.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Acquire the object indices of from the respective object file. — get_tbl_column","text":"","code":"get_tbl_column(file, col_i)"},{"path":"https://chrisschuerz.github.io/SWATrunR/reference/get_tbl_column.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Acquire the object indices of from the respective object file. — get_tbl_column","text":"file Path object file","code":""},{"path":"https://chrisschuerz.github.io/SWATrunR/reference/get_time_interval.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the time interval between to time stamps — get_time_interval","title":"Get the time interval between to time stamps — get_time_interval","text":"Get time interval time stamps","code":""},{"path":"https://chrisschuerz.github.io/SWATrunR/reference/get_time_interval.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the time interval between to time stamps — get_time_interval","text":"","code":"get_time_interval(start_time, end_time)"},{"path":"https://chrisschuerz.github.io/SWATrunR/reference/get_time_interval.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the time interval between to time stamps — get_time_interval","text":"start_time start time stamp end_time end time stamp","code":""},{"path":"https://chrisschuerz.github.io/SWATrunR/reference/get_value.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract the parameter values from a list parameter file — get_value","title":"Extract the parameter values from a list parameter file — get_value","text":"Extract parameter values list parameter file","code":""},{"path":"https://chrisschuerz.github.io/SWATrunR/reference/get_value.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract the parameter values from a list parameter file — get_value","text":"","code":"get_value(file_i, par_pos)"},{"path":"https://chrisschuerz.github.io/SWATrunR/reference/get_value.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract the parameter values from a list parameter file — get_value","text":"file_i 'th parameter file file suffix par_pos Logical vector provides row holds parameter ","code":""},{"path":"https://chrisschuerz.github.io/SWATrunR/reference/get_value_range.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the value range from a condition in the par_def table — get_value_range","title":"Get the value range from a condition in the par_def table — get_value_range","text":"Get value range condition par_def table","code":""},{"path":"https://chrisschuerz.github.io/SWATrunR/reference/get_value_range.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the value range from a condition in the par_def table — get_value_range","text":"","code":"get_value_range(condition)"},{"path":"https://chrisschuerz.github.io/SWATrunR/reference/get_value_range.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the value range from a condition in the par_def table — get_value_range","text":"condition Character string defines condition","code":""},{"path":"https://chrisschuerz.github.io/SWATrunR/reference/grapes-.-grapes.html","id":null,"dir":"Reference","previous_headings":"","what":"Concatenate with a dot — %.%","title":"Concatenate with a dot — %.%","text":"\\","code":""},{"path":"https://chrisschuerz.github.io/SWATrunR/reference/grapes-.-grapes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Concatenate with a dot — %.%","text":"","code":"a %.% b"},{"path":"https://chrisschuerz.github.io/SWATrunR/reference/grapes-and-and-grapes.html","id":null,"dir":"Reference","previous_headings":"","what":"Concatenate with space — %&&%","title":"Concatenate with space — %&&%","text":"\\","code":""},{"path":"https://chrisschuerz.github.io/SWATrunR/reference/grapes-and-and-grapes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Concatenate with space — %&&%","text":"","code":"a %&&% b"},{"path":"https://chrisschuerz.github.io/SWATrunR/reference/grapes-and-grapes.html","id":null,"dir":"Reference","previous_headings":"","what":"Concatenate without separator — %&%","title":"Concatenate without separator — %&%","text":"\\","code":""},{"path":"https://chrisschuerz.github.io/SWATrunR/reference/grapes-and-grapes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Concatenate without separator — %&%","text":"","code":"a %&% b"},{"path":"https://chrisschuerz.github.io/SWATrunR/reference/grapes-grapes.html","id":null,"dir":"Reference","previous_headings":"","what":"Concatenate with a hyphen — %-%","title":"Concatenate with a hyphen — %-%","text":"\\ \\","code":""},{"path":"https://chrisschuerz.github.io/SWATrunR/reference/grapes-grapes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Concatenate with a hyphen — %-%","text":"","code":"a %-% b  a %--% b"},{"path":"https://chrisschuerz.github.io/SWATrunR/reference/grapes-slash-slash-grapes.html","id":null,"dir":"Reference","previous_headings":"","what":"Paste slash function — %//%","title":"Paste slash function — %//%","text":"\\","code":""},{"path":"https://chrisschuerz.github.io/SWATrunR/reference/grapes-slash-slash-grapes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Paste slash function — %//%","text":"","code":"a %//% b"},{"path":"https://chrisschuerz.github.io/SWATrunR/reference/grapes-_-grapes.html","id":null,"dir":"Reference","previous_headings":"","what":"Concatenate with an underscore — %_%","title":"Concatenate with an underscore — %_%","text":"\\","code":""},{"path":"https://chrisschuerz.github.io/SWATrunR/reference/grapes-_-grapes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Concatenate with an underscore — %_%","text":"","code":"a %_% b"},{"path":"https://chrisschuerz.github.io/SWATrunR/reference/group_values.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert the information on available runs for the simulated variables into\r\nstrings that are printed — group_values","title":"Convert the information on available runs for the simulated variables into\r\nstrings that are printed — group_values","text":"Convert information available runs simulated variables strings printed","code":""},{"path":"https://chrisschuerz.github.io/SWATrunR/reference/group_values.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert the information on available runs for the simulated variables into\r\nstrings that are printed — group_values","text":"","code":"group_values(vals, sep = \":\")"},{"path":"https://chrisschuerz.github.io/SWATrunR/reference/group_values.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert the information on available runs for the simulated variables into\r\nstrings that are printed — group_values","text":"tbl overview table provides meta data simulation runs variables saved data bases","code":""},{"path":"https://chrisschuerz.github.io/SWATrunR/reference/group_variable_units.html","id":null,"dir":"Reference","previous_headings":"","what":"Group variable names which where saved for several spatial units — group_variable_units","title":"Group variable names which where saved for several spatial units — group_variable_units","text":"Group variable names saved several spatial units","code":""},{"path":"https://chrisschuerz.github.io/SWATrunR/reference/group_variable_units.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Group variable names which where saved for several spatial units — group_variable_units","text":"","code":"group_variable_units(variable_names)"},{"path":"https://chrisschuerz.github.io/SWATrunR/reference/group_variable_units.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Group variable names which where saved for several spatial units — group_variable_units","text":"variable_names Vector variable names","code":""},{"path":"https://chrisschuerz.github.io/SWATrunR/reference/identify_sequence.html","id":null,"dir":"Reference","previous_headings":"","what":"Group sequences of units together for writing the OBJ columns in calibration.cal — identify_sequence","title":"Group sequences of units together for writing the OBJ columns in calibration.cal — identify_sequence","text":"Group sequences units together writing OBJ columns calibration.cal","code":""},{"path":"https://chrisschuerz.github.io/SWATrunR/reference/identify_sequence.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Group sequences of units together for writing the OBJ columns in calibration.cal — identify_sequence","text":"","code":"identify_sequence(val)"},{"path":"https://chrisschuerz.github.io/SWATrunR/reference/identify_sequence.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Group sequences of units together for writing the OBJ columns in calibration.cal — identify_sequence","text":"val Numeric vector unit values","code":""},{"path":"https://chrisschuerz.github.io/SWATrunR/reference/initialize_run_info.html","id":null,"dir":"Reference","previous_headings":"","what":"Prepare run info for the simulation experiment — initialize_run_info","title":"Prepare run info for the simulation experiment — initialize_run_info","text":"Prepare run info simulation experiment","code":""},{"path":"https://chrisschuerz.github.io/SWATrunR/reference/initialize_run_info.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prepare run info for the simulation experiment — initialize_run_info","text":"","code":"initialize_run_info(model_setup, output, project_path, run_path)"},{"path":"https://chrisschuerz.github.io/SWATrunR/reference/initialize_run_info.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prepare run info for the simulation experiment — initialize_run_info","text":"model_setup List model configurations output Table defined output variables project_path Path SWAT project folder run_path Path SWAT project run folder sim_results List simulation results SWAT model runs","code":""},{"path":"https://chrisschuerz.github.io/SWATrunR/reference/initialize_save_file.html","id":null,"dir":"Reference","previous_headings":"","what":"Initialize the data base wher model outputs are saved — initialize_save_file","title":"Initialize the data base wher model outputs are saved — initialize_save_file","text":"Initialize data base wher model outputs saved","code":""},{"path":"https://chrisschuerz.github.io/SWATrunR/reference/initialize_save_file.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Initialize the data base wher model outputs are saved — initialize_save_file","text":"","code":"initialize_save_file(save_path, parameter, run_info, run_index)"},{"path":"https://chrisschuerz.github.io/SWATrunR/reference/initialize_save_file.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Initialize the data base wher model outputs are saved — initialize_save_file","text":"save_path Path sql data base incrementally saving simulations parameter Parameter set provided simulation run_info List meta data simulation setup run_index IDs parameter sets simulations run","code":""},{"path":"https://chrisschuerz.github.io/SWATrunR/reference/init_cal.html","id":null,"dir":"Reference","previous_headings":"","what":"Initialize the calibration.cal table — init_cal","title":"Initialize the calibration.cal table — init_cal","text":"Initialize calibration.cal table","code":""},{"path":"https://chrisschuerz.github.io/SWATrunR/reference/init_cal.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Initialize the calibration.cal table — init_cal","text":"","code":"init_cal(par_def)"},{"path":"https://chrisschuerz.github.io/SWATrunR/reference/init_cal.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Initialize the calibration.cal table — init_cal","text":"par_def Tibble one line includes parameter definition parameter ","code":""},{"path":"https://chrisschuerz.github.io/SWATrunR/reference/is_identical_lst.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if tables in a list are identical — is_identical_lst","title":"Check if tables in a list are identical — is_identical_lst","text":"Check tables list identical","code":""},{"path":"https://chrisschuerz.github.io/SWATrunR/reference/is_identical_lst.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if tables in a list are identical — is_identical_lst","text":"","code":"is_identical_lst(tbl_list)"},{"path":"https://chrisschuerz.github.io/SWATrunR/reference/is_identical_lst.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if tables in a list are identical — is_identical_lst","text":"tbl_list List data.frames","code":""},{"path":"https://chrisschuerz.github.io/SWATrunR/reference/is_identical_tbl.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if two tables are identical — is_identical_tbl","title":"Check if two tables are identical — is_identical_tbl","text":"Check two tables identical","code":""},{"path":"https://chrisschuerz.github.io/SWATrunR/reference/is_identical_tbl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if two tables are identical — is_identical_tbl","text":"","code":"is_identical_tbl(x, y)"},{"path":"https://chrisschuerz.github.io/SWATrunR/reference/is_identical_tbl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if two tables are identical — is_identical_tbl","text":"x First table y Second table","code":""},{"path":"https://chrisschuerz.github.io/SWATrunR/reference/is_par.html","id":null,"dir":"Reference","previous_headings":"","what":"Check which row in a character vector file holds a model parameter — is_par","title":"Check which row in a character vector file holds a model parameter — is_par","text":"Check row character vector file holds model parameter","code":""},{"path":"https://chrisschuerz.github.io/SWATrunR/reference/is_par.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check which row in a character vector file holds a model parameter — is_par","text":"","code":"is_par(chr)"},{"path":"https://chrisschuerz.github.io/SWATrunR/reference/is_par.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check which row in a character vector file holds a model parameter — is_par","text":"chr Character string","code":""},{"path":"https://chrisschuerz.github.io/SWATrunR/reference/load_demo.html","id":null,"dir":"Reference","previous_headings":"","what":"Loading SWAT demo data — load_demo","title":"Loading SWAT demo data — load_demo","text":"function can load data sets SWAT2012 SWAT+ demo projects. provided data includes demo projects, discharge observation data spatial data subbasin boundaries, river networks, HRUs SWAT setups.","code":""},{"path":"https://chrisschuerz.github.io/SWATrunR/reference/load_demo.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Loading SWAT demo data — load_demo","text":"","code":"load_demo(dataset, path = NULL, version = NULL, revision = NULL)"},{"path":"https://chrisschuerz.github.io/SWATrunR/reference/load_demo.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Loading SWAT demo data — load_demo","text":"dataset Character string define data set load. Valid inputs dataset = c('project', 'observation', 'subbasin', 'river', 'hru'). dataset = 'project' loads SWAT demo project defined path location returns final project path text string R. definition version required. dataset = 'observation' returns tibble discharge observation data main outlet demo watershed. options 'subbasin', 'river', 'hru' return paths respective subbasin, river network HRU shape files. See examples load shapes unsing e.g. sf package. options require definition version. path Character string defines path copy SWAT demo project. version Character string defines SWAT version. Options version = c('2012', 'plus'). argument required load SWAT projects shape files. revision Numeric value define model revision ofthe loaded SWAT project. See SWATdata valid revision numbers. loading SWAT project leaving revision = NULL, recent model revision loaded default.","code":""},{"path":"https://chrisschuerz.github.io/SWATrunR/reference/load_demo.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Loading SWAT demo data — load_demo","text":"learn load different demo data sets SWATplusR see section Loading demos package's Get Started page.","code":""},{"path":"https://chrisschuerz.github.io/SWATrunR/reference/load_swat_run.html","id":null,"dir":"Reference","previous_headings":"","what":"Load saved SWAT simulations — load_swat_run","title":"Load saved SWAT simulations — load_swat_run","text":"Load simuation results saved sqlite data bases one multiple save folders running SWAT.","code":""},{"path":"https://chrisschuerz.github.io/SWATrunR/reference/load_swat_run.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Load saved SWAT simulations — load_swat_run","text":"","code":"load_swat_run(   save_dir,   variable = NULL,   run = NULL,   add_parameter = TRUE,   add_date = TRUE,   add_run_info = TRUE )"},{"path":"https://chrisschuerz.github.io/SWATrunR/reference/load_swat_run.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Load saved SWAT simulations — load_swat_run","text":"save_dir Character string vector character strings provide path/s save folder/s. variable Output variables saved SWAT run loaded R run Numeric vector giving indexes simulations loaded add_parameter Logical. add_parameter = TRUE parameter set SWAT runs added loaded data add_date Logical. add_date = TRUE date column added simulation results variable add_run_info Logical. add_run_info = TRUE meta information simulation runs added outputs","code":""},{"path":"https://chrisschuerz.github.io/SWATrunR/reference/manage_model_run.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate folder structure for parallel SWAT execution — manage_model_run","title":"Generate folder structure for parallel SWAT execution — manage_model_run","text":"Generate folder structure parallel SWAT execution","code":""},{"path":"https://chrisschuerz.github.io/SWATrunR/reference/manage_model_run.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate folder structure for parallel SWAT execution — manage_model_run","text":"","code":"manage_model_run(   project_path,   run_path,   n_thread,   os,   swat_vers,   refresh,   quiet )"},{"path":"https://chrisschuerz.github.io/SWATrunR/reference/manage_model_run.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate folder structure for parallel SWAT execution — manage_model_run","text":"project_path Path SWAT project folder (.e. TxtInOut) run_path Path '.model_run' folder built. NULL executable model built 'project_path' n_thread Number parallel threads created. number must accordance number cores PC os String indicates operating system current machine swat_vers Character string defines SWAT version. Either \"2012\" \"plus\". refresh Logical. Defines refreshing exisiting .model_run folder structure forced. quiet Logical. Defines messages written function executed quietly.","code":""},{"path":"https://chrisschuerz.github.io/SWATrunR/reference/modify_gen_par.html","id":null,"dir":"Reference","previous_headings":"","what":"General function to modify parameters that are provided in linear table\r\nformat — modify_gen_par","title":"General function to modify parameters that are provided in linear table\r\nformat — modify_gen_par","text":"General function modify parameters provided linear table format","code":""},{"path":"https://chrisschuerz.github.io/SWATrunR/reference/modify_gen_par.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"General function to modify parameters that are provided in linear table\r\nformat — modify_gen_par","text":"","code":"modify_gen_par(parameter, model_parameter, file_meta, i_par, run_index, i_run)"},{"path":"https://chrisschuerz.github.io/SWATrunR/reference/modify_gen_par.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"General function to modify parameters that are provided in linear table\r\nformat — modify_gen_par","text":"parameter List providing parameter table parameter constraints model_parameter swat_parameter set modified according parpameter i_par file_meta Table meta informations swat model parameter files i_par Index gives number curent parameter modified step run_index Vector indices runs performed i_run Index gives number current run simulated respective thread","code":""},{"path":"https://chrisschuerz.github.io/SWATrunR/reference/modify_mgt_par.html","id":null,"dir":"Reference","previous_headings":"","what":"Modify parameters that are provided in the management table format — modify_mgt_par","title":"Modify parameters that are provided in the management table format — modify_mgt_par","text":"Modify parameters provided management table format","code":""},{"path":"https://chrisschuerz.github.io/SWATrunR/reference/modify_mgt_par.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Modify parameters that are provided in the management table format — modify_mgt_par","text":"","code":"modify_mgt_par(parameter, model_parameter, file_meta, i_par, run_index, i_run)"},{"path":"https://chrisschuerz.github.io/SWATrunR/reference/modify_mgt_par.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Modify parameters that are provided in the management table format — modify_mgt_par","text":"parameter List providing parameter table parameter constraints model_parameter swat_parameter set modified according parpameter i_par file_meta Table meta informations swat model parameter files i_par Index gives number curent parameter modified step run_index Vector indices runs performed i_run Index gives number current run simulated respective thread","code":""},{"path":"https://chrisschuerz.github.io/SWATrunR/reference/modify_parameter.html","id":null,"dir":"Reference","previous_headings":"","what":"Modify the model parameters of the thread that runs the simulation run_i — modify_parameter","title":"Modify the model parameters of the thread that runs the simulation run_i — modify_parameter","text":"Modify model parameters thread runs simulation run_i","code":""},{"path":"https://chrisschuerz.github.io/SWATrunR/reference/modify_parameter.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Modify the model parameters of the thread that runs the simulation run_i — modify_parameter","text":"","code":"modify_parameter(parameter, thread_parameter, file_meta, run_index, i_run)"},{"path":"https://chrisschuerz.github.io/SWATrunR/reference/modify_parameter.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Modify the model parameters of the thread that runs the simulation run_i — modify_parameter","text":"parameter List providing parameter table parameter constraints thread_parameter swat_parameter set modified according parpameter set used respective thread file_meta Table meta informations SWAT model parameter files run_index Vector indices runs performed i_run Index gives number current run simulated respective thread","code":""},{"path":"https://chrisschuerz.github.io/SWATrunR/reference/mutate_output_i.html","id":null,"dir":"Reference","previous_headings":"","what":"Transform extracted outputs into a wide table and add suffix to variable names. — mutate_output_i","title":"Transform extracted outputs into a wide table and add suffix to variable names. — mutate_output_i","text":"Transform extracted outputs wide table add suffix variable names.","code":""},{"path":"https://chrisschuerz.github.io/SWATrunR/reference/mutate_output_i.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Transform extracted outputs into a wide table and add suffix to variable names. — mutate_output_i","text":"","code":"mutate_output_i(out_tbl_i, output_i)"},{"path":"https://chrisschuerz.github.io/SWATrunR/reference/mutate_output_i.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Transform extracted outputs into a wide table and add suffix to variable names. — mutate_output_i","text":"out_tbl_i i_th output table read SWAT+ outputs output_i i_th part output table defines read SWAT model results","code":""},{"path":"https://chrisschuerz.github.io/SWATrunR/reference/paste_runs.html","id":null,"dir":"Reference","previous_headings":"","what":"Paste run indexes if start and end of sequence differ. Otherwise only use\r\nstart value — paste_runs","title":"Paste run indexes if start and end of sequence differ. Otherwise only use\r\nstart value — paste_runs","text":"Paste run indexes start end sequence differ. Otherwise use start value","code":""},{"path":"https://chrisschuerz.github.io/SWATrunR/reference/paste_runs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Paste run indexes if start and end of sequence differ. Otherwise only use\r\nstart value — paste_runs","text":"","code":"paste_runs(strt, end, sep)"},{"path":"https://chrisschuerz.github.io/SWATrunR/reference/paste_runs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Paste run indexes if start and end of sequence differ. Otherwise only use\r\nstart value — paste_runs","text":"strt Numeric start value sequence end Numeric end value sequence","code":""},{"path":"https://chrisschuerz.github.io/SWATrunR/reference/plural.html","id":null,"dir":"Reference","previous_headings":"","what":"Add plural 's' to the written message if multiple operations done — plural","title":"Add plural 's' to the written message if multiple operations done — plural","text":"Add plural 's' written message multiple operations done","code":""},{"path":"https://chrisschuerz.github.io/SWATrunR/reference/plural.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add plural 's' to the written message if multiple operations done — plural","text":"","code":"plural(n)"},{"path":"https://chrisschuerz.github.io/SWATrunR/reference/plural.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add plural 's' to the written message if multiple operations done — plural","text":"n INterger number operations","code":""},{"path":"https://chrisschuerz.github.io/SWATrunR/reference/prepare_error_report.html","id":null,"dir":"Reference","previous_headings":"","what":"Prepare error report in case of failed simulations — prepare_error_report","title":"Prepare error report in case of failed simulations — prepare_error_report","text":"Prepare error report case failed simulations","code":""},{"path":"https://chrisschuerz.github.io/SWATrunR/reference/prepare_error_report.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prepare error report in case of failed simulations — prepare_error_report","text":"","code":"prepare_error_report(sim_result)"},{"path":"https://chrisschuerz.github.io/SWATrunR/reference/prepare_error_report.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prepare error report in case of failed simulations — prepare_error_report","text":"sim_result List simulation results SWAT model runs","code":""},{"path":"https://chrisschuerz.github.io/SWATrunR/reference/prepare_output_definition.html","id":null,"dir":"Reference","previous_headings":"","what":"Check output if is a data.frame and convert in case to named list — prepare_output_definition","title":"Check output if is a data.frame and convert in case to named list — prepare_output_definition","text":"Check output data.frame convert case named list","code":""},{"path":"https://chrisschuerz.github.io/SWATrunR/reference/prepare_output_definition.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check output if is a data.frame and convert in case to named list — prepare_output_definition","text":"","code":"prepare_output_definition(output, swat_vers, project_path)"},{"path":"https://chrisschuerz.github.io/SWATrunR/reference/prepare_output_definition.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check output if is a data.frame and convert in case to named list — prepare_output_definition","text":"output Output (list outputs) defined define_output() swat_vers SWAT version one '2012' 'plus'","code":""},{"path":"https://chrisschuerz.github.io/SWATrunR/reference/read_basin_yld.html","id":null,"dir":"Reference","previous_headings":"","what":"Read basin yield output tables. — read_basin_yld","title":"Read basin yield output tables. — read_basin_yld","text":"Read basin yield output tables.","code":""},{"path":"https://chrisschuerz.github.io/SWATrunR/reference/read_basin_yld.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read basin yield output tables. — read_basin_yld","text":"","code":"read_basin_yld(output_i, thread_path)"},{"path":"https://chrisschuerz.github.io/SWATrunR/reference/read_basin_yld.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read basin yield output tables. — read_basin_yld","text":"output_i i_th part output table defines thread_path String path thread read output file read SWAT model results","code":""},{"path":"https://chrisschuerz.github.io/SWATrunR/reference/read_chm.html","id":null,"dir":"Reference","previous_headings":"","what":"Read parameters from the '.chm' file (as it has an individual file structure) — read_chm","title":"Read parameters from the '.chm' file (as it has an individual file structure) — read_chm","text":"Read parameters '.chm' file (individual file structure)","code":""},{"path":"https://chrisschuerz.github.io/SWATrunR/reference/read_chm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read parameters from the '.chm' file (as it has an individual file structure) — read_chm","text":"","code":"read_chm(file_meta, project_path)"},{"path":"https://chrisschuerz.github.io/SWATrunR/reference/read_chm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read parameters from the '.chm' file (as it has an individual file structure) — read_chm","text":"file_meta Table provides file meta data project_path Path SWAT project folder (.e. TxtInOut)","code":""},{"path":"https://chrisschuerz.github.io/SWATrunR/reference/read_fdcout.html","id":null,"dir":"Reference","previous_headings":"","what":"Reading the FDC output table. — read_fdcout","title":"Reading the FDC output table. — read_fdcout","text":"Reading FDC output table.","code":""},{"path":"https://chrisschuerz.github.io/SWATrunR/reference/read_fdcout.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reading the FDC output table. — read_fdcout","text":"","code":"read_fdcout(output_i, thread_path)"},{"path":"https://chrisschuerz.github.io/SWATrunR/reference/read_fdcout.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Reading the FDC output table. — read_fdcout","text":"output_i i_th part output table defines read SWAT model results thread_path String path thread read output file","code":""},{"path":"https://chrisschuerz.github.io/SWATrunR/reference/read_file_meta.html","id":null,"dir":"Reference","previous_headings":"","what":"Read the meta information for the parameter files — read_file_meta","title":"Read the meta information for the parameter files — read_file_meta","text":"Read meta information parameter files","code":""},{"path":"https://chrisschuerz.github.io/SWATrunR/reference/read_file_meta.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read the meta information for the parameter files — read_file_meta","text":"","code":"read_file_meta(project_path, par_constrain)"},{"path":"https://chrisschuerz.github.io/SWATrunR/reference/read_file_meta.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read the meta information for the parameter files — read_file_meta","text":"project_path Path SWAT project folder (.e. TxtInOut)","code":""},{"path":"https://chrisschuerz.github.io/SWATrunR/reference/read_hru.html","id":null,"dir":"Reference","previous_headings":"","what":"Read all '.hru' files in the project_path and extract the meta data from\r\nthese files and return them as a meta data tibble — read_hru","title":"Read all '.hru' files in the project_path and extract the meta data from\r\nthese files and return them as a meta data tibble — read_hru","text":"Read '.hru' files project_path extract meta data files return meta data tibble","code":""},{"path":"https://chrisschuerz.github.io/SWATrunR/reference/read_hru.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read all '.hru' files in the project_path and extract the meta data from\r\nthese files and return them as a meta data tibble — read_hru","text":"","code":"read_hru(project_path)"},{"path":"https://chrisschuerz.github.io/SWATrunR/reference/read_hru.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read all '.hru' files in the project_path and extract the meta data from\r\nthese files and return them as a meta data tibble — read_hru","text":"project_path Path SWAT project folder (.e. TxtInOut)","code":""},{"path":"https://chrisschuerz.github.io/SWATrunR/reference/read_mgt.html","id":null,"dir":"Reference","previous_headings":"","what":"Read parameters from the '.mgt' file (as it has an individual file structure) — read_mgt","title":"Read parameters from the '.mgt' file (as it has an individual file structure) — read_mgt","text":"Read parameters '.mgt' file (individual file structure)","code":""},{"path":"https://chrisschuerz.github.io/SWATrunR/reference/read_mgt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read parameters from the '.mgt' file (as it has an individual file structure) — read_mgt","text":"","code":"read_mgt(file_meta, project_path)"},{"path":"https://chrisschuerz.github.io/SWATrunR/reference/read_mgt.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read parameters from the '.mgt' file (as it has an individual file structure) — read_mgt","text":"file_meta Table provides file meta data project_path Path SWAT project folder (.e. TxtInOut)","code":""},{"path":"https://chrisschuerz.github.io/SWATrunR/reference/read_mgtout.html","id":null,"dir":"Reference","previous_headings":"","what":"Read and process SWAT+ management outputs. — read_mgtout","title":"Read and process SWAT+ management outputs. — read_mgtout","text":"Read process SWAT+ management outputs.","code":""},{"path":"https://chrisschuerz.github.io/SWATrunR/reference/read_mgtout.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read and process SWAT+ management outputs. — read_mgtout","text":"","code":"read_mgtout(output_i, thread_path)"},{"path":"https://chrisschuerz.github.io/SWATrunR/reference/read_mgtout.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read and process SWAT+ management outputs. — read_mgtout","text":"output_i i_th part output table defines thread_path String path thread read output file","code":""},{"path":"https://chrisschuerz.github.io/SWATrunR/reference/read_output_i.html","id":null,"dir":"Reference","previous_headings":"","what":"Reading the i_th SWAT+ output file, filter required units and select variables. — read_output_i","title":"Reading the i_th SWAT+ output file, filter required units and select variables. — read_output_i","text":"Reading i_th SWAT+ output file, filter required units select variables.","code":""},{"path":"https://chrisschuerz.github.io/SWATrunR/reference/read_output_i.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reading the i_th SWAT+ output file, filter required units and select variables. — read_output_i","text":"","code":"read_output_i(output_i, col_names_i, thread_path, date_cols)"},{"path":"https://chrisschuerz.github.io/SWATrunR/reference/read_output_i.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Reading the i_th SWAT+ output file, filter required units and select variables. — read_output_i","text":"output_i i_th part output table defines read SWAT model results col_names_i Prepared fixed column names output file thread_path String path thread read output file date_cols data read, vector names date columns.","code":""},{"path":"https://chrisschuerz.github.io/SWATrunR/reference/read_par_list.html","id":null,"dir":"Reference","previous_headings":"","what":"Read parameters that are arranged in a simple list (1 parameter per row) — read_par_list","title":"Read parameters that are arranged in a simple list (1 parameter per row) — read_par_list","text":"Read parameters arranged simple list (1 parameter per row)","code":""},{"path":"https://chrisschuerz.github.io/SWATrunR/reference/read_par_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read parameters that are arranged in a simple list (1 parameter per row) — read_par_list","text":"","code":"read_par_list(file_meta, file_suffix, project_path, n_row = NULL)"},{"path":"https://chrisschuerz.github.io/SWATrunR/reference/read_par_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read parameters that are arranged in a simple list (1 parameter per row) — read_par_list","text":"file_meta Table provides file meta data file_suffix Suffix parameter files parameters read project_path Path SWAT project folder (.e. TxtInOut)","code":""},{"path":"https://chrisschuerz.github.io/SWATrunR/reference/read_sol.html","id":null,"dir":"Reference","previous_headings":"","what":"Read parameters from the '.sol' file (as it has an individual file structure) — read_sol","title":"Read parameters from the '.sol' file (as it has an individual file structure) — read_sol","text":"Read parameters '.sol' file (individual file structure)","code":""},{"path":"https://chrisschuerz.github.io/SWATrunR/reference/read_sol.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read parameters from the '.sol' file (as it has an individual file structure) — read_sol","text":"","code":"read_sol(file_meta, project_path)"},{"path":"https://chrisschuerz.github.io/SWATrunR/reference/read_sol.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read parameters from the '.sol' file (as it has an individual file structure) — read_sol","text":"file_meta Table provides file meta data project_path Path SWAT project folder (.e. TxtInOut)","code":""},{"path":"https://chrisschuerz.github.io/SWATrunR/reference/read_swat2012_files.html","id":null,"dir":"Reference","previous_headings":"","what":"Read the original swat parameter values from the parameter files in\r\nproject_path — read_swat2012_files","title":"Read the original swat parameter values from the parameter files in\r\nproject_path — read_swat2012_files","text":"Read original swat parameter values parameter files project_path","code":""},{"path":"https://chrisschuerz.github.io/SWATrunR/reference/read_swat2012_files.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read the original swat parameter values from the parameter files in\r\nproject_path — read_swat2012_files","text":"","code":"read_swat2012_files(project_path, file_meta)"},{"path":"https://chrisschuerz.github.io/SWATrunR/reference/read_swat2012_files.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read the original swat parameter values from the parameter files in\r\nproject_path — read_swat2012_files","text":"project_path Path SWAT project folder (.e. TxtInOut) par_constrain Table providing file constraints respective parameter modified","code":""},{"path":"https://chrisschuerz.github.io/SWATrunR/reference/read_swat2012_output.html","id":null,"dir":"Reference","previous_headings":"","what":"Read SWAT output files — read_swat2012_output","title":"Read SWAT output files — read_swat2012_output","text":"Read SWAT output files","code":""},{"path":"https://chrisschuerz.github.io/SWATrunR/reference/read_swat2012_output.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read SWAT output files — read_swat2012_output","text":"","code":"read_swat2012_output(output, thread_path)"},{"path":"https://chrisschuerz.github.io/SWATrunR/reference/read_swat2012_output.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read SWAT output files — read_swat2012_output","text":"output Output defined read SWAT model results thread_path Path respective thread SWAT executed","code":""},{"path":"https://chrisschuerz.github.io/SWATrunR/reference/read_swatplus_output.html","id":null,"dir":"Reference","previous_headings":"","what":"Read SWAT+ output files — read_swatplus_output","title":"Read SWAT+ output files — read_swatplus_output","text":"Read SWAT+ output files","code":""},{"path":"https://chrisschuerz.github.io/SWATrunR/reference/read_swatplus_output.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read SWAT+ output files — read_swatplus_output","text":"","code":"read_swatplus_output(output, thread_path, add_date, revision)"},{"path":"https://chrisschuerz.github.io/SWATrunR/reference/read_swatplus_output.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read SWAT+ output files — read_swatplus_output","text":"output Output defined read SWAT model results thread_path Path respective thread SWAT executed add_date Logical wheter add date column revision Numeric. revision number SWAT+ executable","code":""},{"path":"https://chrisschuerz.github.io/SWATrunR/reference/read_unit_conditions.html","id":null,"dir":"Reference","previous_headings":"","what":"Read the unit numbers (for hru, aqu, cha, res) and the textures etc for later\r\nparameter conditioning. — read_unit_conditions","title":"Read the unit numbers (for hru, aqu, cha, res) and the textures etc for later\r\nparameter conditioning. — read_unit_conditions","text":"Read unit numbers (hru, aqu, cha, res) textures etc later parameter conditioning.","code":""},{"path":"https://chrisschuerz.github.io/SWATrunR/reference/read_unit_conditions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read the unit numbers (for hru, aqu, cha, res) and the textures etc for later\r\nparameter conditioning. — read_unit_conditions","text":"","code":"read_unit_conditions(project_path, parameter)"},{"path":"https://chrisschuerz.github.io/SWATrunR/reference/read_unit_conditions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read the unit numbers (for hru, aqu, cha, res) and the textures etc for later\r\nparameter conditioning. — read_unit_conditions","text":"project_path Path SWAT+ project","code":""},{"path":"https://chrisschuerz.github.io/SWATrunR/reference/remove_dummy.html","id":null,"dir":"Reference","previous_headings":"","what":"Remove the generated dummy column that was required for the col bind — remove_dummy","title":"Remove the generated dummy column that was required for the col bind — remove_dummy","text":"Remove generated dummy column required col bind","code":""},{"path":"https://chrisschuerz.github.io/SWATrunR/reference/remove_dummy.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Remove the generated dummy column that was required for the col bind — remove_dummy","text":"","code":"remove_dummy(tbl)"},{"path":"https://chrisschuerz.github.io/SWATrunR/reference/remove_dummy.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Remove the generated dummy column that was required for the col bind — remove_dummy","text":"tbl Tibble","code":""},{"path":"https://chrisschuerz.github.io/SWATrunR/reference/remove_non_var_cols.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract variable columns from the respective simulation outputs — remove_non_var_cols","title":"Extract variable columns from the respective simulation outputs — remove_non_var_cols","text":"Extract variable columns respective simulation outputs","code":""},{"path":"https://chrisschuerz.github.io/SWATrunR/reference/remove_non_var_cols.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract variable columns from the respective simulation outputs — remove_non_var_cols","text":"","code":"remove_non_var_cols(tbl)"},{"path":"https://chrisschuerz.github.io/SWATrunR/reference/remove_non_var_cols.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract variable columns from the respective simulation outputs — remove_non_var_cols","text":"tbl Table simulation results one SWAT output file","code":""},{"path":"https://chrisschuerz.github.io/SWATrunR/reference/remove_units_2012.html","id":null,"dir":"Reference","previous_headings":"","what":"Remove the units from variable names in output files of SWAT2012 simulations — remove_units_2012","title":"Remove the units from variable names in output files of SWAT2012 simulations — remove_units_2012","text":"Remove units variable names output files SWAT2012 simulations","code":""},{"path":"https://chrisschuerz.github.io/SWATrunR/reference/remove_units_2012.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Remove the units from variable names in output files of SWAT2012 simulations — remove_units_2012","text":"","code":"remove_units_2012(col_nm)"},{"path":"https://chrisschuerz.github.io/SWATrunR/reference/remove_units_2012.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Remove the units from variable names in output files of SWAT2012 simulations — remove_units_2012","text":"col_nm Character vector column names","code":""},{"path":"https://chrisschuerz.github.io/SWATrunR/reference/remove_units_plus.html","id":null,"dir":"Reference","previous_headings":"","what":"Remove the units from variable names in output files of SWAT+ Revisions before 56 — remove_units_plus","title":"Remove the units from variable names in output files of SWAT+ Revisions before 56 — remove_units_plus","text":"Remove units variable names output files SWAT+ Revisions 56","code":""},{"path":"https://chrisschuerz.github.io/SWATrunR/reference/remove_units_plus.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Remove the units from variable names in output files of SWAT+ Revisions before 56 — remove_units_plus","text":"","code":"remove_units_plus(col_nm)"},{"path":"https://chrisschuerz.github.io/SWATrunR/reference/remove_units_plus.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Remove the units from variable names in output files of SWAT+ Revisions before 56 — remove_units_plus","text":"col_nm Character vector column names","code":""},{"path":"https://chrisschuerz.github.io/SWATrunR/reference/replace_colname_na.html","id":null,"dir":"Reference","previous_headings":"","what":"Fix issues with shifted col_names in SWAT+ rev59.3 — replace_colname_na","title":"Fix issues with shifted col_names in SWAT+ rev59.3 — replace_colname_na","text":"Fix issues shifted col_names SWAT+ rev59.3","code":""},{"path":"https://chrisschuerz.github.io/SWATrunR/reference/replace_colname_na.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fix issues with shifted col_names in SWAT+ rev59.3 — replace_colname_na","text":"","code":"replace_colname_na(col_nm, unit_nm)"},{"path":"https://chrisschuerz.github.io/SWATrunR/reference/replace_colname_na.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fix issues with shifted col_names in SWAT+ rev59.3 — replace_colname_na","text":"col_nm Character vector column names unit_nm Character vector unit line table","code":""},{"path":"https://chrisschuerz.github.io/SWATrunR/reference/run_os.html","id":null,"dir":"Reference","previous_headings":"","what":"Add './' to run the exe on unix systems — run_os","title":"Add './' to run the exe on unix systems — run_os","text":"Add './' run exe unix systems","code":""},{"path":"https://chrisschuerz.github.io/SWATrunR/reference/run_os.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add './' to run the exe on unix systems — run_os","text":"","code":"run_os(exe, os)"},{"path":"https://chrisschuerz.github.io/SWATrunR/reference/run_os.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add './' to run the exe on unix systems — run_os","text":"exe Text string defines name executable file os Text string defines operating system","code":""},{"path":"https://chrisschuerz.github.io/SWATrunR/reference/run_swat2012.html","id":null,"dir":"Reference","previous_headings":"","what":"Run a SWAT2012 project — run_swat2012","title":"Run a SWAT2012 project — run_swat2012","text":"function allows run SWAT2012 project R. Basic settings SWAT run simulation period time interval outputs can done directly. SWAT simulation outputs can defined returned 'tidy' format R. Functionality model parametrization, parallel execution simulations, incremental saving simulation runs provided.","code":""},{"path":"https://chrisschuerz.github.io/SWATrunR/reference/run_swat2012.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run a SWAT2012 project — run_swat2012","text":"","code":"run_swat2012(   project_path,   output,   parameter = NULL,   start_date = NULL,   end_date = NULL,   output_interval = NULL,   years_skip = NULL,   rch_out_var = NULL,   sub_out_var = NULL,   hru_out_var = NULL,   hru_out_nr = NULL,   run_index = NULL,   run_path = NULL,   n_thread = NULL,   save_path = NULL,   save_file = NULL,   return_output = TRUE,   add_parameter = TRUE,   add_date = TRUE,   refresh = TRUE,   keep_folder = FALSE,   quiet = FALSE )"},{"path":"https://chrisschuerz.github.io/SWATrunR/reference/run_swat2012.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run a SWAT2012 project — run_swat2012","text":"project_path Character string provides path SWAT project folder (.e. TxtInOut). output Define output variables extract SWAT model runs. See function define_output help file see define simulation outputs. parameter (optional) SWAT model parameters either provided named vector tibble. parameter changes provided parameter performed model execution accordingly. learn modify parameters see Get started page SWATplusR. start_date (optional) Start date SWAT simulation. Provided character string ymd format (e.g. 'yyyy-mm-dd') Date format. end_date (optional) End date SWAT simulation. Provided character string ymd format (e.g. 'yyyy-mm-dd') Date format. output_interval (optional) Time interval SWAT model outputs written. Provided either character string (\"d\" daily, \"m\" monthly, \"y\" yearly) SWAT input values (0 monthly, 1 daily, 2 yearly). years_skip (optional) Integer value define number simulation years skipped writing SWAT model outputs. rch_out_var (optional) Numeric vector maximum length = 20 customized output reach variables. output codes see SWAT /O Documentation p.77ff. sub_out_var (optional) Numeric vector maximum length = 15 customized output subbasin variables.output codes see SWAT /O Documentation p.78ff. hru_out_var (optional) Numeric vector maximum length = 20 customized output HRU variables.output codes see SWAT /O Documentation p.79ff. hru_out_nr (optional) Numeric vector maximum length = 20 providing HRU numbers HRU variables written. Optional hru_out_nr = '', HRU variables written HRU (caution, large output files possible!) run_index (optional) Numeric vector (e.g.run_index = c(1:100,   110, 115)) run subset provided parameter sets. NULL provided parameter sets used simulation. run_path (optional) Character string provides path '.model_run' folder written SWAT models executed. NULL '.model_run' built project folder. n_thread (optional) Number threads used parallel model run. provided models run single core. parameter ineffective single simulations. save_path (optional) Character string define path model runs saved save_file defined. save_path = NULL folder save_file saved project_path. save_file (optional) Character string define name folder data bases generated store simulations incrementally. return_output (optional) Logical. Whether outputs returned . Set return_out = FALSE provide save_file outputs saved hard drive returned R. 'Default = TRUE add_parameter (optional) Logical. add_parameter = TRUE, values parameter changes information changes saved /returned together model outputs. Default = TRUE add_date (optional) Logical. add_date = TRUE date column added every simulation output table.  Default = TRUE refresh (optional) Logical. refresh = TRUE always forces '.model_run' newly written SWAT run ins started. Default =   TRUE keep_folder (optional) Logical. keep_folder = TRUE '.model_run' kept deleted finishing model runs. case '.model_run' reused new model run refresh = FALSE. Default = FALSE quiet (optional) Logical. quiet = TRUE messages written.  Default = FALSE","code":""},{"path":"https://chrisschuerz.github.io/SWATrunR/reference/run_swat2012.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run a SWAT2012 project — run_swat2012","text":"Returns simulation results defined output variables tibble. one parameter set provided list tibbles returned column model run list entry output variable.","code":""},{"path":"https://chrisschuerz.github.io/SWATrunR/reference/run_swat2012.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Run a SWAT2012 project — run_swat2012","text":"learn basics use SWATplusR see Get started page package's github page.","code":""},{"path":"https://chrisschuerz.github.io/SWATrunR/reference/run_swatplus.html","id":null,"dir":"Reference","previous_headings":"","what":"Run SWAT+ — run_swatplus","title":"Run SWAT+ — run_swatplus","text":"function allows run SWAT+ project R. Basic settings SWAT run simulation period time interval outputs can done directly. SWAT simulation outputs can defined returned 'tidy' format R. Functionality model parametrization, parallel execution simulations, incremental saving simulation runs provided.","code":""},{"path":"https://chrisschuerz.github.io/SWATrunR/reference/run_swatplus.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run SWAT+ — run_swatplus","text":"","code":"run_swatplus(   project_path,   output,   parameter = NULL,   start_date = NULL,   end_date = NULL,   years_skip = NULL,   start_date_print = NULL,   run_index = NULL,   run_path = NULL,   n_thread = NULL,   save_path = NULL,   save_file = NULL,   return_output = TRUE,   add_parameter = TRUE,   add_date = TRUE,   refresh = TRUE,   keep_folder = FALSE,   quiet = FALSE,   revision = NULL,   time_out = Inf )"},{"path":"https://chrisschuerz.github.io/SWATrunR/reference/run_swatplus.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run SWAT+ — run_swatplus","text":"project_path Character string provides path SWAT project folder (.e. TxtInOut). output Define output variables extract SWAT model runs. See function define_output help file see define simulation outputs. parameter (optional) SWAT model parameters either provided named vector tibble. parameter changes provided parameter performed model execution accordingly. learn modify parameters see Get started page SWATplusR. start_date (optional) Start date SWAT simulation. Provided character string ymd format (e.g. 'yyyy-mm-dd'), numeric value form yyyymmdd, Date format. end_date (optional) End date SWAT simulation. Provided character string ymd format (e.g. 'yyyy-mm-dd'), numeric value form yyyymmdd, Date format. years_skip (optional) Integer value define number simulation years skipped writing SWAT model outputs. start_date_print (optional) Start date printing simulation outputs. start_date_print overrules years_skip. Provided character string ymd format (e.g. 'yyyy-mm-dd'), numeric value form yyyymmdd, Date format. run_index (optional) Numeric vector (e.g.run_index = c(1:100,   110, 115)) run subset provided parameter sets. NULL provided parameter sets used simulation. run_path (optional) Character string provides path '.model_run' folder written SWAT models executed. NULL '.model_run' built project folder. n_thread (optional) Number threads used parallel model run. provided models run single core. parameter ineffective single simulations. save_path (optional) Character string define path model runs saved save_file defined. save_path = NULL save_file saved project_path. save_file (optional) Character string define name folder data bases generated store simulations incrementally. return_output (optional) Logical. Whether outputs returned . Set return_out = FALSE provide save_file outputs saved hard drive returned R. 'Default = TRUE add_parameter (optional) Logical. add_parameter = TRUE, values parameter changes information changes saved /returned together model outputs. Default = TRUE add_date (optional) Logical. add_date = TRUE date column added every simulation output table.  Default = TRUE refresh (optional) Logical. refresh = TRUE always forces '.model_run' newly written SWAT run ins started. Default =   TRUE keep_folder (optional) Logical. keep_folder = TRUE '.model_run' kept deleted finishing model runs. case '.model_run' reused new model run refresh = FALSE. Default = FALSE quiet (optional) Logical. quiet = TRUE messages written.  Default = FALSE revision (optional) Numeric. revision defined run_swatplus() uses input revision number (e.g. revision = 59.3. Otherwise revision number acquired SWAT executable. time_out (optional) Numeric. Timeout simulation seconds. Simulations may get stuck due specific parameter combinations. timeout kills simulation runtime exceeds set time seconds. careful setting timeout set short also kill potentially sucessful runs finishing.","code":""},{"path":"https://chrisschuerz.github.io/SWATrunR/reference/run_swatplus.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run SWAT+ — run_swatplus","text":"Returns simulation results defined output variables tibble. one parameter set provided list tibbles returned column model run list entry output variable.","code":""},{"path":"https://chrisschuerz.github.io/SWATrunR/reference/run_swatplus.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Run SWAT+ — run_swatplus","text":"learn basics use SWATplusR see Get started page package's github page.","code":""},{"path":"https://chrisschuerz.github.io/SWATrunR/reference/save_error_log.html","id":null,"dir":"Reference","previous_headings":"","what":"Save error report of model run i in error_log sql data base — save_error_log","title":"Save error report of model run i in error_log sql data base — save_error_log","text":"Save error report model run error_log sql data base","code":""},{"path":"https://chrisschuerz.github.io/SWATrunR/reference/save_error_log.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Save error report of model run i in error_log sql data base — save_error_log","text":"","code":"save_error_log(save_path, model_output, parameter, run_index, i_run)"},{"path":"https://chrisschuerz.github.io/SWATrunR/reference/save_error_log.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Save error report of model run i in error_log sql data base — save_error_log","text":"save_path Path sql data base model_output output i_run'th simulation tibble parameter Vector tibble parameter sets run_index Vector indices runs performed i_run 'th run SWAT simulation","code":""},{"path":"https://chrisschuerz.github.io/SWATrunR/reference/save_run.html","id":null,"dir":"Reference","previous_headings":"","what":"Save results of model run i in existing sql data base — save_run","title":"Save results of model run i in existing sql data base — save_run","text":"Save results model run existing sql data base","code":""},{"path":"https://chrisschuerz.github.io/SWATrunR/reference/save_run.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Save results of model run i in existing sql data base — save_run","text":"","code":"save_run(save_path, model_output, parameter, run_index, i_run, i_thread)"},{"path":"https://chrisschuerz.github.io/SWATrunR/reference/save_run.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Save results of model run i in existing sql data base — save_run","text":"save_path Path sql data base model_output output i_run'th simulation tibble parameter Vector tibble parameter sets run_index Vector indices runs performed i_run 'th run SWAT simulation","code":""},{"path":"https://chrisschuerz.github.io/SWATrunR/reference/scan_save_files.html","id":null,"dir":"Reference","previous_headings":"","what":"Scan the save folders of a SWAT run and return all meta data of this\r\nsimulation — scan_save_files","title":"Scan the save folders of a SWAT run and return all meta data of this\r\nsimulation — scan_save_files","text":"Scan save folders SWAT run return meta data simulation","code":""},{"path":"https://chrisschuerz.github.io/SWATrunR/reference/scan_save_files.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Scan the save folders of a SWAT run and return all meta data of this\r\nsimulation — scan_save_files","text":"","code":"scan_save_files(save_dir)"},{"path":"https://chrisschuerz.github.io/SWATrunR/reference/scan_save_files.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Scan the save folders of a SWAT run and return all meta data of this\r\nsimulation — scan_save_files","text":"save_dir Character string vector character strings provide path/s save folder/s.","code":""},{"path":"https://chrisschuerz.github.io/SWATrunR/reference/scan_swat_run.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve information on saved SWAT runs — scan_swat_run","title":"Retrieve information on saved SWAT runs — scan_swat_run","text":"Scan one multiple save folders belong SWAT simulation get information simulation period, simulated variables used parameter sets.","code":""},{"path":"https://chrisschuerz.github.io/SWATrunR/reference/scan_swat_run.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve information on saved SWAT runs — scan_swat_run","text":"","code":"scan_swat_run(save_dir, return_full = FALSE)"},{"path":"https://chrisschuerz.github.io/SWATrunR/reference/scan_swat_run.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve information on saved SWAT runs — scan_swat_run","text":"save_dir Character string vector return_full TRUE list variables, successful run IDs missing run IDs returned. Otherwise overview printed.","code":""},{"path":"https://chrisschuerz.github.io/SWATrunR/reference/setup_calibration_cal.html","id":null,"dir":"Reference","previous_headings":"","what":"Setup the calibration.cal file and include all parameter conditions\r\nof the simulation and set them according to respective input parameters — setup_calibration_cal","title":"Setup the calibration.cal file and include all parameter conditions\r\nof the simulation and set them according to respective input parameters — setup_calibration_cal","text":"Setup calibration.cal file include parameter conditions simulation set according respective input parameters","code":""},{"path":"https://chrisschuerz.github.io/SWATrunR/reference/setup_calibration_cal.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Setup the calibration.cal file and include all parameter conditions\r\nof the simulation and set them according to respective input parameters — setup_calibration_cal","text":"","code":"setup_calibration_cal(par_def, unit_cons)"},{"path":"https://chrisschuerz.github.io/SWATrunR/reference/setup_calibration_cal.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Setup the calibration.cal file and include all parameter conditions\r\nof the simulation and set them according to respective input parameters — setup_calibration_cal","text":"par_def Tibble one line includes parameter definition parameter unit_cons List tibbles contains meta information hru, aqu, etc. units constrain variables (e.g. texture, plant)","code":""},{"path":"https://chrisschuerz.github.io/SWATrunR/reference/setup_swat2012.html","id":null,"dir":"Reference","previous_headings":"","what":"Reads and modifies the SWAT projects' filo.cio according to provided inputs — setup_swat2012","title":"Reads and modifies the SWAT projects' filo.cio according to provided inputs — setup_swat2012","text":"Reads modifies SWAT projects' filo.cio according provided inputs","code":""},{"path":"https://chrisschuerz.github.io/SWATrunR/reference/setup_swat2012.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reads and modifies the SWAT projects' filo.cio according to provided inputs — setup_swat2012","text":"","code":"setup_swat2012(   project_path,   output,   start_date,   end_date,   output_interval,   years_skip,   rch_out_var,   sub_out_var,   hru_out_var,   hru_out_nr )"},{"path":"https://chrisschuerz.github.io/SWATrunR/reference/setup_swat2012.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Reads and modifies the SWAT projects' filo.cio according to provided inputs — setup_swat2012","text":"project_path Path SWAT project folder (.e. TxtInOut) start_date Start date SWAT simulation. Provided character string ymd format (e.g. 'yyyy-mm-dd') Date format project located end_date End date SWAT simulation. Provided character string ymd format (e.g. 'yyyy-mm-dd') Date format project located output_interval Time interval SWAT model outputs written. Provided either character string (\"d\" daily, \"m\" monthly, \"y\" yearly) SWAT input values (0 monthly, 1 daily, 2 yearly). years_skip Integer value provides numbe years skipped writing SWAT model outputs rch_out_var Numeric vector maximum length = 20 customized output reach variables.output codes see SWAT /O Documentation p.77ff. sub_out_var Numeric vector maximum length = 15 customized output subbasin variables.output codes see SWAT /O Documentation p.78ff. hru_out_var Numeric vector maximum length = 20 customized output HRU variables.output codes see SWAT /O Documentation p.79ff. hru_out_nr Numeric vector maximum length = 20 providing HRU numbers HRU variables written. Optional hru_out_nr = '', HRU variables written HRU (caution, large output files possible!)","code":""},{"path":"https://chrisschuerz.github.io/SWATrunR/reference/setup_swatplus.html","id":null,"dir":"Reference","previous_headings":"","what":"Reads and modifies the SWAT+ projects' files that define the basic settings\r\nof the simulation and set them according tu respective input parameters — setup_swatplus","title":"Reads and modifies the SWAT+ projects' files that define the basic settings\r\nof the simulation and set them according tu respective input parameters — setup_swatplus","text":"Reads modifies SWAT+ projects' files define basic settings simulation set according tu respective input parameters","code":""},{"path":"https://chrisschuerz.github.io/SWATrunR/reference/setup_swatplus.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reads and modifies the SWAT+ projects' files that define the basic settings\r\nof the simulation and set them according tu respective input parameters — setup_swatplus","text":"","code":"setup_swatplus(   project_path,   parameter,   output,   start_date,   end_date,   start_date_print,   years_skip,   unit_cons )"},{"path":"https://chrisschuerz.github.io/SWATrunR/reference/setup_swatplus.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Reads and modifies the SWAT+ projects' files that define the basic settings\r\nof the simulation and set them according tu respective input parameters — setup_swatplus","text":"project_path Path SWAT project folder (.e. TxtInOut) start_date Start date SWAT simulation. Provided character string ymd format (e.g. 'yyyy-mm-dd') Date format project located end_date End date SWAT simulation. Provided character string ymd format (e.g. 'yyyy-mm-dd') Date format project located years_skip Integer value provides numbe years skipped writing SWAT model outputs","code":""},{"path":"https://chrisschuerz.github.io/SWATrunR/reference/set_colnames.html","id":null,"dir":"Reference","previous_headings":"","what":"Set the column names of a matrix — set_colnames","title":"Set the column names of a matrix — set_colnames","text":"Set column names matrix","code":""},{"path":"https://chrisschuerz.github.io/SWATrunR/reference/set_colnames.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set the column names of a matrix — set_colnames","text":"","code":"set_colnames(mtx, col_names)"},{"path":"https://chrisschuerz.github.io/SWATrunR/reference/set_colnames.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set the column names of a matrix — set_colnames","text":"mtx matrix col_names Character vector column names","code":""},{"path":"https://chrisschuerz.github.io/SWATrunR/reference/set_save_path.html","id":null,"dir":"Reference","previous_headings":"","what":"Set the save path to the sqlite data base file — set_save_path","title":"Set the save path to the sqlite data base file — set_save_path","text":"Set save path sqlite data base file","code":""},{"path":"https://chrisschuerz.github.io/SWATrunR/reference/set_save_path.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set the save path to the sqlite data base file — set_save_path","text":"","code":"set_save_path(project_path, save_path, save_dir)"},{"path":"https://chrisschuerz.github.io/SWATrunR/reference/set_save_path.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set the save path to the sqlite data base file — set_save_path","text":"project_path Character string. Path SWAT project save_path (optional) character string. save path different project path save_dir character string. Name sqlite data base directory","code":""},{"path":"https://chrisschuerz.github.io/SWATrunR/reference/split_by_units.html","id":null,"dir":"Reference","previous_headings":"","what":"Split header line at the positions of units and return tidy header — split_by_units","title":"Split header line at the positions of units and return tidy header — split_by_units","text":"Split header line positions units return tidy header","code":""},{"path":"https://chrisschuerz.github.io/SWATrunR/reference/split_by_units.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Split header line at the positions of units and return tidy header — split_by_units","text":"","code":"split_by_units(header)"},{"path":"https://chrisschuerz.github.io/SWATrunR/reference/split_by_units.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Split header line at the positions of units and return tidy header — split_by_units","text":"header Character string header line","code":""},{"path":"https://chrisschuerz.github.io/SWATrunR/reference/split_line.html","id":null,"dir":"Reference","previous_headings":"","what":"Split one line in a parameter file into the individual values of the table — split_line","title":"Split one line in a parameter file into the individual values of the table — split_line","text":"Split one line parameter file individual values table","code":""},{"path":"https://chrisschuerz.github.io/SWATrunR/reference/split_line.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Split one line in a parameter file into the individual values of the table — split_line","text":"","code":"split_line(chr, start, end)"},{"path":"https://chrisschuerz.github.io/SWATrunR/reference/split_line.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Split one line in a parameter file into the individual values of the table — split_line","text":"start Index vector indicating start values value end Index vector indicating end values value file_i 'th parameter file file suffix","code":""},{"path":"https://chrisschuerz.github.io/SWATrunR/reference/split_out_tbl.html","id":null,"dir":"Reference","previous_headings":"","what":"Split tables with more than ncol_max columns into list of tables — split_out_tbl","title":"Split tables with more than ncol_max columns into list of tables — split_out_tbl","text":"Split tables ncol_max columns list tables","code":""},{"path":"https://chrisschuerz.github.io/SWATrunR/reference/split_out_tbl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Split tables with more than ncol_max columns into list of tables — split_out_tbl","text":"","code":"split_out_tbl(tbl, ncol_max)"},{"path":"https://chrisschuerz.github.io/SWATrunR/reference/split_out_tbl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Split tables with more than ncol_max columns into list of tables — split_out_tbl","text":"tbl Table split ncol_max Maximum number columns split done","code":""},{"path":"https://chrisschuerz.github.io/SWATrunR/reference/tidy_constraint.html","id":null,"dir":"Reference","previous_headings":"","what":"Apply a set of operations to the rule strings to check and clean the defined operations — tidy_constraint","title":"Apply a set of operations to the rule strings to check and clean the defined operations — tidy_constraint","text":"Apply set operations rule strings check clean defined operations","code":""},{"path":"https://chrisschuerz.github.io/SWATrunR/reference/tidy_constraint.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Apply a set of operations to the rule strings to check and clean the defined operations — tidy_constraint","text":"","code":"tidy_constraint(chr, bool_op)"},{"path":"https://chrisschuerz.github.io/SWATrunR/reference/tidy_constraint.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Apply a set of operations to the rule strings to check and clean the defined operations — tidy_constraint","text":"chr Text string defines constraint bool_op Vector strings define different possible boolean operations","code":""},{"path":"https://chrisschuerz.github.io/SWATrunR/reference/tidy_simulations.html","id":null,"dir":"Reference","previous_headings":"","what":"Tidy up and rearrange simulation results before returning them — tidy_simulations","title":"Tidy up and rearrange simulation results before returning them — tidy_simulations","text":"Tidy rearrange simulation results returning ","code":""},{"path":"https://chrisschuerz.github.io/SWATrunR/reference/tidy_simulations.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Tidy up and rearrange simulation results before returning them — tidy_simulations","text":"","code":"tidy_simulations(sim_result)"},{"path":"https://chrisschuerz.github.io/SWATrunR/reference/tidy_simulations.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Tidy up and rearrange simulation results before returning them — tidy_simulations","text":"sim_result List simulation results SWAT model runs","code":""},{"path":"https://chrisschuerz.github.io/SWATrunR/reference/translate_outfile_names.html","id":null,"dir":"Reference","previous_headings":"","what":"Translate the output file settings defined according to print.prt to the\r\nactual output file names — translate_outfile_names","title":"Translate the output file settings defined according to print.prt to the\r\nactual output file names — translate_outfile_names","text":"Translate output file settings defined according print.prt actual output file names","code":""},{"path":"https://chrisschuerz.github.io/SWATrunR/reference/translate_outfile_names.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Translate the output file settings defined according to print.prt to the\r\nactual output file names — translate_outfile_names","text":"","code":"translate_outfile_names(output, output_interval, revision)"},{"path":"https://chrisschuerz.github.io/SWATrunR/reference/translate_outfile_names.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Translate the output file settings defined according to print.prt to the\r\nactual output file names — translate_outfile_names","text":"output List output variables defined define_output output_interval time interval writing simulated outputs revision revision number SWAT+ executable","code":""},{"path":"https://chrisschuerz.github.io/SWATrunR/reference/translate_parameter_constraints.html","id":null,"dir":"Reference","previous_headings":"","what":"Translate the parameter inputs and the set constraints into lookup table — translate_parameter_constraints","title":"Translate the parameter inputs and the set constraints into lookup table — translate_parameter_constraints","text":"Translate parameter inputs set constraints lookup table","code":""},{"path":"https://chrisschuerz.github.io/SWATrunR/reference/translate_parameter_constraints.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Translate the parameter inputs and the set constraints into lookup table — translate_parameter_constraints","text":"","code":"translate_parameter_constraints(par, swat_vers)"},{"path":"https://chrisschuerz.github.io/SWATrunR/reference/translate_parameter_constraints.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Translate the parameter inputs and the set constraints into lookup table — translate_parameter_constraints","text":"par Character string vector providing parameters constraints","code":""},{"path":"https://chrisschuerz.github.io/SWATrunR/reference/translate_rev55.html","id":null,"dir":"Reference","previous_headings":"","what":"Translate the output file settings defined according to print.prt to the\r\nactual output file names or SWAT+ Revisions before 56 — translate_rev55","title":"Translate the output file settings defined according to print.prt to the\r\nactual output file names or SWAT+ Revisions before 56 — translate_rev55","text":"Translate output file settings defined according print.prt actual output file names SWAT+ Revisions 56","code":""},{"path":"https://chrisschuerz.github.io/SWATrunR/reference/translate_rev55.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Translate the output file settings defined according to print.prt to the\r\nactual output file names or SWAT+ Revisions before 56 — translate_rev55","text":"","code":"translate_rev55(output, output_interval)"},{"path":"https://chrisschuerz.github.io/SWATrunR/reference/translate_rev55.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Translate the output file settings defined according to print.prt to the\r\nactual output file names or SWAT+ Revisions before 56 — translate_rev55","text":"output List output variables defined define_output output_interval time interval writing simulated outputs","code":""},{"path":"https://chrisschuerz.github.io/SWATrunR/reference/translate_rev57.html","id":null,"dir":"Reference","previous_headings":"","what":"Translate the output file settings defined according to print.prt to the\r\nactual output file names for SWAT+ Revisions later than 56 — translate_rev57","title":"Translate the output file settings defined according to print.prt to the\r\nactual output file names for SWAT+ Revisions later than 56 — translate_rev57","text":"Translate output file settings defined according print.prt actual output file names SWAT+ Revisions later 56","code":""},{"path":"https://chrisschuerz.github.io/SWATrunR/reference/translate_rev57.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Translate the output file settings defined according to print.prt to the\r\nactual output file names for SWAT+ Revisions later than 56 — translate_rev57","text":"","code":"translate_rev57(output, output_interval)"},{"path":"https://chrisschuerz.github.io/SWATrunR/reference/translate_rev57.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Translate the output file settings defined according to print.prt to the\r\nactual output file names for SWAT+ Revisions later than 56 — translate_rev57","text":"output List output variables defined define_output output_interval time interval writing simulated outputs","code":""},{"path":"https://chrisschuerz.github.io/SWATrunR/reference/translate_sequence.html","id":null,"dir":"Reference","previous_headings":"","what":"Translate the unit sequences to calibration.cal syntax — translate_sequence","title":"Translate the unit sequences to calibration.cal syntax — translate_sequence","text":"Translate unit sequences calibration.cal syntax","code":""},{"path":"https://chrisschuerz.github.io/SWATrunR/reference/translate_sequence.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Translate the unit sequences to calibration.cal syntax — translate_sequence","text":"","code":"translate_sequence(val_seq)"},{"path":"https://chrisschuerz.github.io/SWATrunR/reference/translate_sequence.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Translate the unit sequences to calibration.cal syntax — translate_sequence","text":"val_seq Numeric vector unit values","code":""},{"path":"https://chrisschuerz.github.io/SWATrunR/reference/truncate.html","id":null,"dir":"Reference","previous_headings":"","what":"Truncate long character vectors — truncate","title":"Truncate long character vectors — truncate","text":"Truncate long character vectors","code":""},{"path":"https://chrisschuerz.github.io/SWATrunR/reference/truncate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Truncate long character vectors — truncate","text":"","code":"truncate(x, n, side = \"left\")"},{"path":"https://chrisschuerz.github.io/SWATrunR/reference/truncate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Truncate long character vectors — truncate","text":"x Character vector n Threshold value truncation done side side truncation ... Either left ","code":""},{"path":"https://chrisschuerz.github.io/SWATrunR/reference/update_par.html","id":null,"dir":"Reference","previous_headings":"","what":"Update parameter values according to the different options 'abs', 'rep', and\r\n'rel' — update_par","title":"Update parameter values according to the different options 'abs', 'rep', and\r\n'rel' — update_par","text":"Update parameter values according different options 'abs', 'rep', 'rel'","code":""},{"path":"https://chrisschuerz.github.io/SWATrunR/reference/update_par.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Update parameter values according to the different options 'abs', 'rep', and\r\n'rel' — update_par","text":"","code":"update_par(par, par_up, change)"},{"path":"https://chrisschuerz.github.io/SWATrunR/reference/update_par.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Update parameter values according to the different options 'abs', 'rep', and\r\n'rel' — update_par","text":"par Vector parameter values updated par_up Value applied paramter values updating change Type change, either: abs', 'rep', 'rel'","code":""},{"path":"https://chrisschuerz.github.io/SWATrunR/reference/update_plant_par.html","id":null,"dir":"Reference","previous_headings":"","what":"Modify plants.plt parameters — update_plant_par","title":"Modify plants.plt parameters — update_plant_par","text":"Modify plants.plt parameters","code":""},{"path":"https://chrisschuerz.github.io/SWATrunR/reference/update_plant_par.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Modify plants.plt parameters — update_plant_par","text":"","code":"update_plant_par(thread_path, parameter, is_plant_par, run_index, i_run)"},{"path":"https://chrisschuerz.github.io/SWATrunR/reference/update_plant_par.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Modify plants.plt parameters — update_plant_par","text":"thread_path Path parallel thread folder parameter List providing parameter table parameter constraints is_plant_par Logical vector defines plant parameters run_index Vector indices runs performed i_run Index gives number current run simulated respective thread","code":""},{"path":"https://chrisschuerz.github.io/SWATrunR/reference/update_sim_log.html","id":null,"dir":"Reference","previous_headings":"","what":"Update a time stamp in the run_log table — update_sim_log","title":"Update a time stamp in the run_log table — update_sim_log","text":"Update time stamp run_log table","code":""},{"path":"https://chrisschuerz.github.io/SWATrunR/reference/update_sim_log.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Update a time stamp in the run_log table — update_sim_log","text":"","code":"update_sim_log(save_path, run_info)"},{"path":"https://chrisschuerz.github.io/SWATrunR/reference/update_sim_log.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Update a time stamp in the run_log table — update_sim_log","text":"save_path Path sql data base incrementally saving simulations run_index IDs parameter sets simulations run","code":""},{"path":"https://chrisschuerz.github.io/SWATrunR/reference/write_calibration.html","id":null,"dir":"Reference","previous_headings":"","what":"Update the calibration file structure with the parameter set of the current\r\nsimulation run_i — write_calibration","title":"Update the calibration file structure with the parameter set of the current\r\nsimulation run_i — write_calibration","text":"Update calibration file structure parameter set current simulation run_i","code":""},{"path":"https://chrisschuerz.github.io/SWATrunR/reference/write_calibration.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Update the calibration file structure with the parameter set of the current\r\nsimulation run_i — write_calibration","text":"","code":"write_calibration(thread_path, parameter, calibration, run_index, i_run)"},{"path":"https://chrisschuerz.github.io/SWATrunR/reference/write_calibration.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Update the calibration file structure with the parameter set of the current\r\nsimulation run_i — write_calibration","text":"thread_path Path current parallel thread 'thread_i' parameter Model parameters named vector tibble calibration Template table structure calibration file i_run Index i_th simulation run","code":""},{"path":"https://chrisschuerz.github.io/SWATrunR/reference/write_chm.html","id":null,"dir":"Reference","previous_headings":"","what":"Write modified .chm SWAT parameter files due to their specific format — write_chm","title":"Write modified .chm SWAT parameter files due to their specific format — write_chm","text":"Write modified .chm SWAT parameter files due specific format","code":""},{"path":"https://chrisschuerz.github.io/SWATrunR/reference/write_chm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Write modified .chm SWAT parameter files due to their specific format — write_chm","text":"","code":"write_chm(file_meta, thread_parameter, thread_path)"},{"path":"https://chrisschuerz.github.io/SWATrunR/reference/write_chm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Write modified .chm SWAT parameter files due to their specific format — write_chm","text":"file_meta Table provides parameter file meta data thread_parameter Modified model parameters written respective thread folder thread_path Path thread folder model executed","code":""},{"path":"https://chrisschuerz.github.io/SWATrunR/reference/write_file_cio.html","id":null,"dir":"Reference","previous_headings":"","what":"Write the updated file.cio to all parallel folders — write_file_cio","title":"Write the updated file.cio to all parallel folders — write_file_cio","text":"Write updated file.cio parallel folders","code":""},{"path":"https://chrisschuerz.github.io/SWATrunR/reference/write_file_cio.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Write the updated file.cio to all parallel folders — write_file_cio","text":"","code":"write_file_cio(run_path, file_cio)"},{"path":"https://chrisschuerz.github.io/SWATrunR/reference/write_file_cio.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Write the updated file.cio to all parallel folders — write_file_cio","text":"run_path Path .model_run folder file_cio Updated file_cio written","code":""},{"path":"https://chrisschuerz.github.io/SWATrunR/reference/write_mgt.html","id":null,"dir":"Reference","previous_headings":"","what":"Write modified .mgt SWAT parameter files due to their specific format — write_mgt","title":"Write modified .mgt SWAT parameter files due to their specific format — write_mgt","text":"Write modified .mgt SWAT parameter files due specific format","code":""},{"path":"https://chrisschuerz.github.io/SWATrunR/reference/write_mgt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Write modified .mgt SWAT parameter files due to their specific format — write_mgt","text":"","code":"write_mgt(file_meta, thread_parameter, thread_path)"},{"path":"https://chrisschuerz.github.io/SWATrunR/reference/write_mgt.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Write modified .mgt SWAT parameter files due to their specific format — write_mgt","text":"file_meta Table provides parameter file meta data thread_parameter Modified model parameters written respective thread folder thread_path Path thread folder model executed","code":""},{"path":"https://chrisschuerz.github.io/SWATrunR/reference/write_parameter.html","id":null,"dir":"Reference","previous_headings":"","what":"Write modified SWAT parameter files in respective thread folder — write_parameter","title":"Write modified SWAT parameter files in respective thread folder — write_parameter","text":"Write modified SWAT parameter files respective thread folder","code":""},{"path":"https://chrisschuerz.github.io/SWATrunR/reference/write_parameter.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Write modified SWAT parameter files in respective thread folder — write_parameter","text":"","code":"write_parameter(file_meta, thread_parameter, thread_path)"},{"path":"https://chrisschuerz.github.io/SWATrunR/reference/write_parameter.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Write modified SWAT parameter files in respective thread folder — write_parameter","text":"file_meta Table provides parameter file meta data thread_parameter Modified model parameters written respective thread folder thread_path Path thread folder model executed","code":""},{"path":"https://chrisschuerz.github.io/SWATrunR/reference/write_par_list.html","id":null,"dir":"Reference","previous_headings":"","what":"Write modified SWAT parameter files that are arranged in a linear format — write_par_list","title":"Write modified SWAT parameter files that are arranged in a linear format — write_par_list","text":"Write modified SWAT parameter files arranged linear format","code":""},{"path":"https://chrisschuerz.github.io/SWATrunR/reference/write_par_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Write modified SWAT parameter files that are arranged in a linear format — write_par_list","text":"","code":"write_par_list(file_meta, file_suffix, thread_parameter, thread_path)"},{"path":"https://chrisschuerz.github.io/SWATrunR/reference/write_par_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Write modified SWAT parameter files that are arranged in a linear format — write_par_list","text":"file_meta Table provides parameter file meta data file_suffix File ending respective parameter files written thread_parameter Modified model parameters written respective thread folder thread_path Path thread folder model executed","code":""},{"path":"https://chrisschuerz.github.io/SWATrunR/reference/write_sol.html","id":null,"dir":"Reference","previous_headings":"","what":"Write modified .sol SWAT parameter files due to their specific format — write_sol","title":"Write modified .sol SWAT parameter files due to their specific format — write_sol","text":"Write modified .sol SWAT parameter files due specific format","code":""},{"path":"https://chrisschuerz.github.io/SWATrunR/reference/write_sol.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Write modified .sol SWAT parameter files due to their specific format — write_sol","text":"","code":"write_sol(file_meta, thread_parameter, thread_path)"},{"path":"https://chrisschuerz.github.io/SWATrunR/reference/write_sol.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Write modified .sol SWAT parameter files due to their specific format — write_sol","text":"file_meta Table provides parameter file meta data thread_parameter Modified model parameters written respective thread folder thread_path Path thread folder model executed","code":""},{"path":"https://chrisschuerz.github.io/SWATrunR/reference/write_swatplus_setup.html","id":null,"dir":"Reference","previous_headings":"","what":"Write the updated init files to all parallel folders — write_swatplus_setup","title":"Write the updated init files to all parallel folders — write_swatplus_setup","text":"Write updated init files parallel folders","code":""},{"path":"https://chrisschuerz.github.io/SWATrunR/reference/write_swatplus_setup.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Write the updated init files to all parallel folders — write_swatplus_setup","text":"","code":"write_swatplus_setup(run_path, model_setup)"},{"path":"https://chrisschuerz.github.io/SWATrunR/reference/write_swatplus_setup.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Write the updated init files to all parallel folders — write_swatplus_setup","text":"run_path Path .model_run folder model_setup List files define SWAT+ model setup","code":""}]
